diff -rubN mmc/card/block.c mmc.wiko/card/block.c
--- mmc/card/block.c	2013-04-08 21:39:40.000000000 +0300
+++ mmc.wiko/card/block.c	2012-11-13 09:53:05.000000000 +0200
@@ -46,6 +46,15 @@
 #include <mach/mt_storage_logger.h>
 #include "queue.h"
 
+#include <linux/xlog.h>
+#include <asm/div64.h>
+#include <linux/vmalloc.h>
+
+   
+#ifdef USER_BUILD_KERNEL
+#undef FEATURE_STORAGE_PERF_INDEX
+#endif
+
 MODULE_ALIAS("mmc:block");
 #ifdef MODULE_PARAM_PREFIX
 #undef MODULE_PARAM_PREFIX
@@ -820,6 +829,53 @@
 	 R1_CC_ERROR |		/* Card controller error */		\
 	 R1_ERROR)		/* General/unknown error */
 
+#if defined(FEATURE_STORAGE_PERF_INDEX)
+#define PRT_TIME_PERIOD	500000000
+#define UP_LIMITS_4BYTE		4294967295UL	//((4*1024*1024*1024)-1)
+#define ID_CNT 10
+pid_t mmcqd[ID_CNT]={0};
+static unsigned long long mmcqd_tag_t1[ID_CNT]={0}, mmcqd_last_t2[ID_CNT]={0}, mmccid_tag_t1=0;
+static unsigned long long mmcqd_t_usage_wr[ID_CNT]={0}, mmcqd_t_usage_rd[ID_CNT]={0};
+static unsigned int mmcqd_rq_size_wr[ID_CNT]={0}, mmcqd_rq_size_rd[ID_CNT]={0};
+static unsigned int mmcqd_wr_offset_tag[ID_CNT]={0}, mmcqd_rd_offset_tag[ID_CNT]={0}, mmcqd_wr_offset[ID_CNT]={0}, mmcqd_rd_offset[ID_CNT]={0};
+static unsigned int mmcqd_wr_bit[ID_CNT]={0},mmcqd_wr_tract[ID_CNT]={0};
+static unsigned int mmcqd_rd_bit[ID_CNT]={0},mmcqd_rd_tract[ID_CNT]={0};
+static unsigned int mmcqd_wr_break[ID_CNT]={0}, mmcqd_rd_break[ID_CNT]={0};
+static unsigned int mmcqd_rq_count[ID_CNT]={0}, mmcqd_wr_rq_count[ID_CNT]={0}, mmcqd_rd_rq_count[ID_CNT]={0};
+extern u32 g_u32_cid[4];
+#ifdef FEATURE_STORAGE_META_LOG
+int check_perdev_minors = CONFIG_MMC_BLOCK_MINORS;
+struct metadata_rwlogger metadata_logger[10] = {{{0}}};
+#endif
+static void g_var_clear(unsigned int idx)
+{
+				mmcqd_t_usage_wr[idx]=0;
+				mmcqd_t_usage_rd[idx]=0;
+				mmcqd_rq_size_wr[idx]=0;
+				mmcqd_rq_size_rd[idx]=0;
+				mmcqd_rq_count[idx]=0;
+				mmcqd_wr_offset[idx]=0;
+				mmcqd_rd_offset[idx]=0;				
+				mmcqd_wr_break[idx]=0;
+				mmcqd_rd_break[idx]=0;				
+				mmcqd_wr_tract[idx]=0; 
+				mmcqd_wr_bit[idx]=0; 
+				mmcqd_rd_tract[idx]=0; 
+				mmcqd_rd_bit[idx]=0; 				
+				mmcqd_wr_rq_count[idx]=0;
+				mmcqd_rd_rq_count[idx]=0;
+}
+#endif
+//#undef FEATURE_STORAGE_PID_LOGGER
+#if defined(FEATURE_STORAGE_PID_LOGGER)
+
+struct struct_pid_logger g_pid_logger[PID_ID_CNT]={{0,0,{0},{0},{0},{0}}};
+
+
+
+unsigned char *page_logger = NULL;
+spinlock_t g_locker;
+#endif
 static int mmc_blk_issue_rw_rq(struct mmc_queue *mq, struct request *req)
 {
 	struct mmc_blk_data *md = mq->data;
@@ -827,6 +883,24 @@
 	struct mmc_blk_request brq;
 	int ret = 1, disable_multi = 0, retry = 0;
   unsigned long long time1 = 0,time2 = 0;
+
+#if defined(FEATURE_STORAGE_PERF_INDEX)
+	pid_t mmcqd_pid=0;
+	unsigned long long t_period=0, t_usage=0;
+	unsigned int t_percent=0;
+	unsigned int perf_meter=0; 
+	unsigned int rq_byte=0,rq_sector=0,sect_offset=0;
+	unsigned int diversity=0;
+	unsigned int idx=0;
+	unsigned char i=0;
+#ifdef FEATURE_STORAGE_META_LOG
+	unsigned int mmcmetaindex=0;
+#endif
+#endif
+#if defined(FEATURE_STORAGE_PID_LOGGER)
+	unsigned int index=0;
+#endif
+
 	/*
 	 * Reliable writes are used to implement Forced Unit Access and
 	 * REQ_META accesses, and are supported only on MMCs.
@@ -835,12 +909,161 @@
 			  (req->cmd_flags & REQ_META)) &&
 		(rq_data_dir(req) == WRITE) &&
 		(md->flags & MMC_BLK_REL_WR);
-	if (unlikely(dumpMMCqd())) {
 		
 		time1 = sched_clock();
+
+	if (unlikely(dumpMMCqd())) {	
 		AddStorageTrace(STORAGE_LOGGER_MSG_ISSUE_RQ,mmc_blk_issue_rq,(rq_data_dir(req) == WRITE),
 						 (int)blk_rq_pos(req),(int)blk_rq_sectors(req));
 	}
+
+#if defined(FEATURE_STORAGE_PERF_INDEX)
+			mmcqd_pid = task_pid_nr(current);
+			if(mmcqd[0] ==0)
+					mmcqd[0] = mmcqd_pid;			
+
+			for(i=0;i<ID_CNT;i++)			
+			{
+				if(mmcqd_pid == mmcqd[i]) 
+				{
+					idx=i;
+					break;			
+				}			
+				else if ((mmcqd_pid != mmcqd[i]) && (mmcqd[i+1] == 0))
+				{
+					mmcqd[i+1]=mmcqd_pid;		//please ensure mmcqd cnt < ID_CNT-1
+					idx=i+1;
+					break;
+				}				
+			}
+			
+			if(mmccid_tag_t1==0)
+				mmccid_tag_t1 = time1;
+			t_period = time1 - mmccid_tag_t1;
+			if(t_period >= (unsigned long long )((PRT_TIME_PERIOD)*(unsigned long long )10))
+			{
+				xlog_printk(ANDROID_LOG_DEBUG, "BLOCK_TAG", "MMC Queue Thread:%d, %d, %d, %d, %d \n", mmcqd[0], mmcqd[1], mmcqd[2], mmcqd[3], mmcqd[4]);  
+				xlog_printk(ANDROID_LOG_DEBUG, "BLOCK_TAG", "MMC CID: %lx %lx %lx %lx \n", g_u32_cid[0], g_u32_cid[1], g_u32_cid[2], g_u32_cid[3]);
+				mmccid_tag_t1 = time1;
+			}
+			if(mmcqd_tag_t1[idx]==0)
+				mmcqd_tag_t1[idx] = time1;			
+			t_period = time1 - mmcqd_tag_t1[idx];
+			
+			if(t_period >= (unsigned long long )PRT_TIME_PERIOD)
+			{
+				t_usage = mmcqd_t_usage_wr [idx] + mmcqd_t_usage_rd[idx];
+				if(t_period > t_usage*100)
+					xlog_printk(ANDROID_LOG_DEBUG, "BLOCK_TAG", "mmcqd:%d Workload < 1%%, duty %lld, period %lld, req_cnt=%d \n", mmcqd[idx], t_usage, t_period, mmcqd_rq_count[idx]);
+				else
+				{
+					do_div(t_period, 100);	//boundary issue
+					t_percent =((unsigned int)t_usage)/((unsigned int)t_period);						
+					xlog_printk(ANDROID_LOG_DEBUG, "BLOCK_TAG", "mmcqd:%d Workload=%d%%, duty %lld, period %lld00, req_cnt=%d \n", mmcqd[idx], t_percent, t_usage, t_period, mmcqd_rq_count[idx]);	//period %lld00 == period %lld x100
+				}
+				if(mmcqd_wr_rq_count[idx] >= 2)
+				{
+					diversity = mmcqd_wr_offset[idx]/(mmcqd_wr_rq_count[idx]-1);
+					xlog_printk(ANDROID_LOG_DEBUG, "BLOCK_TAG", "mmcqd:%d Write Diversity=%d sectors offset, req_cnt=%d, break_cnt=%d, tract_cnt=%d, bit_cnt=%d\n", mmcqd[idx], diversity, mmcqd_wr_rq_count[idx], mmcqd_wr_break[idx], mmcqd_wr_tract[idx], mmcqd_wr_bit[idx]);
+				}
+				if(mmcqd_rd_rq_count[idx] >= 2)
+				{
+					diversity = mmcqd_rd_offset[idx]/(mmcqd_rd_rq_count[idx]-1);
+					xlog_printk(ANDROID_LOG_DEBUG, "BLOCK_TAG", "mmcqd:%d Read Diversity=%d sectors offset, req_cnt=%d, break_cnt=%d, tract_cnt=%d, bit_cnt=%d\n", mmcqd[idx], diversity, mmcqd_rd_rq_count[idx], mmcqd_rd_break[idx], mmcqd_rd_tract[idx], mmcqd_rd_bit[idx]);
+				}
+				if(mmcqd_t_usage_wr[idx])
+				{
+					do_div(mmcqd_t_usage_wr[idx], 1000000);	//boundary issue
+					if(mmcqd_t_usage_wr[idx])	// discard print if duration will <1ms
+					{
+						perf_meter = (mmcqd_rq_size_wr[idx])/((unsigned int)mmcqd_t_usage_wr[idx]); //kb/s
+						xlog_printk(ANDROID_LOG_DEBUG, "BLOCK_TAG", "mmcqd:%d Write Throughput=%d kB/s, size: %d bytes, time:%lld ms\n", mmcqd[idx], perf_meter, mmcqd_rq_size_wr[idx], mmcqd_t_usage_wr[idx]);
+					}
+				}
+				if(mmcqd_t_usage_rd[idx])
+				{
+					do_div(mmcqd_t_usage_rd[idx], 1000000);	//boundary issue
+					if(mmcqd_t_usage_rd[idx])	// discard print if duration will <1ms
+					{
+						perf_meter = (mmcqd_rq_size_rd[idx])/((unsigned int)mmcqd_t_usage_rd[idx]); //kb/s					
+						xlog_printk(ANDROID_LOG_DEBUG, "BLOCK_TAG", "mmcqd:%d Read Throughput=%d kB/s, size: %d bytes, time:%lld ms\n", mmcqd[idx], perf_meter, mmcqd_rq_size_rd[idx], mmcqd_t_usage_rd[idx]);  					
+					}
+				}
+				mmcqd_tag_t1[idx]=time1;
+				g_var_clear(idx);
+#ifdef FEATURE_STORAGE_META_LOG			
+				mmcmetaindex = mmc_get_devidx(md->disk);
+				xlog_printk(ANDROID_LOG_DEBUG, "BLOCK_TAG", "mmcqd metarw WR:%d NWR:%d HR:%d WDR:%d HDR:%d WW:%d NWW:%d HW:%d\n", 
+					metadata_logger[mmcmetaindex].metadata_rw_logger[0], metadata_logger[mmcmetaindex].metadata_rw_logger[1], 
+					metadata_logger[mmcmetaindex].metadata_rw_logger[2], metadata_logger[mmcmetaindex].metadata_rw_logger[3], 
+					metadata_logger[mmcmetaindex].metadata_rw_logger[4], metadata_logger[mmcmetaindex].metadata_rw_logger[5], 
+					metadata_logger[mmcmetaindex].metadata_rw_logger[6], metadata_logger[mmcmetaindex].metadata_rw_logger[7]);  					
+				clear_metadata_rw_status(md->disk->first_minor);
+#endif
+#if defined(FEATURE_STORAGE_PID_LOGGER)
+				do {
+					int i;
+					for(index=0; index<PID_ID_CNT; index++) {
+						
+						if( g_pid_logger[index].current_pid!=0 && g_pid_logger[index].current_pid == mmcqd_pid)
+							break;
+					}
+					if( index == PID_ID_CNT )
+						break;
+					for( i=0; i<PID_LOGGER_COUNT; i++) {
+						//printk(KERN_INFO"hank mmcqd %d %d", g_pid_logger[index].pid_logger[i], mmcqd_pid);
+						if( g_pid_logger[index].pid_logger[i] == 0)
+							break;
+						sprintf (g_pid_logger[index].pid_buffer+i*37, "{%05d:%05d:%08d:%05d:%08d}", g_pid_logger[index].pid_logger[i], g_pid_logger[index].pid_logger_counter[i], g_pid_logger[index].pid_logger_length[i], g_pid_logger[index].pid_logger_r_counter[i], g_pid_logger[index].pid_logger_r_length[i]);					
+
+					}
+					if( i != 0) {
+						xlog_printk(ANDROID_LOG_DEBUG, "BLOCK_TAG", "mmcqd pid:%d %s\n", g_pid_logger[index].current_pid, g_pid_logger[index].pid_buffer);
+						memset( &(g_pid_logger[index].pid_logger), 0, sizeof(struct struct_pid_logger)-(unsigned long)&(((struct struct_pid_logger *)0)->pid_logger));
+
+					}
+					g_pid_logger[index].pid_buffer[0] = '\0';
+					
+				} while(0);
+#endif
+				
+			}
+			rq_byte = blk_rq_bytes(req);
+			rq_sector = blk_rq_sectors(req);			
+			if(rq_data_dir(req) == WRITE)
+			{
+				mmcqd_wr_rq_count[idx]++;				
+				if(mmcqd_wr_offset_tag[idx]>0)
+				{
+					sect_offset = abs(blk_rq_pos(req) - mmcqd_wr_offset_tag[idx]);  
+					mmcqd_wr_offset[idx] += sect_offset;
+					if(sect_offset == 1)
+						mmcqd_wr_break[idx]++;	
+				}
+				mmcqd_wr_offset_tag[idx] = blk_rq_pos(req) + rq_sector;				
+				if(rq_sector <= 1)	//512 bytes
+					mmcqd_wr_bit[idx] ++;
+				else if(rq_sector >= 1016)					//508kB
+					mmcqd_wr_tract[idx] ++;
+			}
+			else	//read
+			{
+				mmcqd_rd_rq_count[idx]++;
+				if(mmcqd_rd_offset_tag[idx]>0)
+				{
+					sect_offset = abs(blk_rq_pos(req) - mmcqd_rd_offset_tag[idx]);  
+					mmcqd_rd_offset[idx] += sect_offset;
+					if(sect_offset == 1)
+						mmcqd_rd_break[idx]++;		
+				}
+				mmcqd_rd_offset_tag[idx] = blk_rq_pos(req) + rq_sector;				
+				if(rq_sector <= 1)	//512 bytes
+					mmcqd_rd_bit[idx] ++;
+				else if(rq_sector >= 1016)					//508kB
+					mmcqd_rd_tract[idx] ++;
+			}
+#endif
+		
 	do {
 		u32 readcmd, writecmd;
 
@@ -1052,12 +1275,29 @@
 		spin_unlock_irq(&md->lock);
 	} while (ret);
 
+
+	time2 = sched_clock();
+
 	if (unlikely(dumpMMCqd()))
 	{
-		time2 = sched_clock();
 		AddStorageTrace(STORAGE_LOGGER_MSG_ISSUE_RQ_1,mmc_blk_issue_rq,(time2-time1));
 	}
 	
+#if defined(FEATURE_STORAGE_PERF_INDEX)
+		if(rq_data_dir(req) == WRITE)
+		{
+			mmcqd_t_usage_wr[idx] += time2-time1;
+			mmcqd_rq_size_wr[idx] += rq_byte;
+		}
+		else
+		{
+			mmcqd_t_usage_rd[idx] += time2-time1;
+			mmcqd_rq_size_rd[idx] += rq_byte;				
+		}
+		mmcqd_rq_count[idx]++;
+		mmcqd_last_t2[idx] = time2;
+#endif
+	
 	return 1;
 
  cmd_err:
@@ -1190,6 +1430,20 @@
 	ret = mmc_init_queue(&md->queue, card, &md->lock, subname);
 	if (ret)
 		goto err_putdisk;
+#if defined(FEATURE_STORAGE_PID_LOGGER)
+	if( !page_logger){
+		//num_page_logger = sizeof(struct page_pid_logger);
+		page_logger = vmalloc(num_physpages*sizeof(struct page_pid_logger));
+		if( page_logger) {
+			memset( page_logger, -1, num_physpages*sizeof( struct page_pid_logger));
+		}
+		spin_lock_init(&g_locker);
+	}
+	
+#endif
+#if defined(FEATURE_STORAGE_META_LOG)
+	check_perdev_minors = perdev_minors;
+#endif
 
 	md->queue.issue_fn = mmc_blk_issue_rq;
 	md->queue.data = md;
@@ -1246,9 +1500,16 @@
 	return ERR_PTR(ret);
 }
 
+#ifdef MTK_EMMC_SUPPORT
+extern int msdc_get_reserve(void);
+#endif
+
 static struct mmc_blk_data *mmc_blk_alloc(struct mmc_card *card)
 {
 	sector_t size;
+#ifdef MTK_EMMC_SUPPORT
+    unsigned int l_reserve;
+#endif
 	struct mmc_blk_data *md;
 
 	if (!mmc_card_sd(card) && mmc_card_blockaddr(card)) {
@@ -1265,8 +1526,15 @@
 		size = card->csd.capacity << (card->csd.read_blkbits - 9);
 		
 	}
-	if(!mmc_card_sd(card))
-			size -= 0x5000; /*reserved for 10MB (emmc combo offset+reserved)*/
+
+	if(!mmc_card_sd(card)){
+#ifdef MTK_EMMC_SUPPORT
+            l_reserve =  msdc_get_reserve();
+            printk("l_reserve = 0x%x\n", l_reserve);
+            size -= l_reserve;                         /*reserved for 64MB (emmc otp + emmc combo offset + reserved)*/
+#endif    
+    }
+
 	
 	md = mmc_blk_alloc_req(card, &card->dev, size, false, NULL);
 	return md;
diff -rubN mmc/core/mmc.c mmc.wiko/core/mmc.c
--- mmc/core/mmc.c	2013-04-08 21:39:40.000000000 +0300
+++ mmc.wiko/core/mmc.c	2012-11-13 09:53:05.000000000 +0200
@@ -25,6 +25,7 @@
 #ifdef MTK_EMMC_SUPPORT
 	extern int init_pmt(void);
 #endif
+
 static const unsigned int tran_exp[] = {
 	10000,		100000,		1000000,	10000000,
 	0,		0,		0,		0
diff -rubN mmc/core/sd.c mmc.wiko/core/sd.c
--- mmc/core/sd.c	2013-04-08 21:39:40.000000000 +0300
+++ mmc.wiko/core/sd.c	2012-11-13 09:53:05.000000000 +0200
@@ -24,6 +24,7 @@
 #include "sd.h"
 #include "sd_ops.h"
 
+u32 g_u32_cid[4]={0};
 static const unsigned int tran_exp[] = {
 	10000,		100000,		1000000,	10000000,
 	0,		0,		0,		0
@@ -890,7 +891,7 @@
 	struct mmc_card *oldcard)
 {
 	struct mmc_card *card;
-	int err;
+	int err, i;
 	u32 cid[4];
 	u32 rocr = 0;
 
@@ -900,6 +901,8 @@
 	err = mmc_sd_get_cid(host, ocr, cid, &rocr);
 	if (err)
 		return err;
+	for (i=0; i<4; i++)
+		g_u32_cid[i] = cid[i];
 
 	if (oldcard) {
 		if (memcmp(cid, oldcard->raw_cid, sizeof(cid)) != 0)
diff -rubN mmc/core/sd.h mmc.wiko/core/sd.h
--- mmc/core/sd.h	2013-04-08 21:39:40.000000000 +0300
+++ mmc.wiko/core/sd.h	2012-11-13 09:53:05.000000000 +0200
@@ -4,6 +4,7 @@
 #include <linux/mmc/card.h>
 
 extern struct device_type sd_type;
+extern u32 g_u32_cid[4];
 
 int mmc_sd_get_cid(struct mmc_host *host, u32 ocr, u32 *cid, u32 *rocr);
 int mmc_sd_get_csd(struct mmc_host *host, struct mmc_card *card);

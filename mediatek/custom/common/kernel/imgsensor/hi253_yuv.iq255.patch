diff -rubN hi253_yuv/hi253yuv_CameraCustomized.h hi253_yuv.iq255/hi253yuv_CameraCustomized.h
--- hi253_yuv/hi253yuv_CameraCustomized.h	2012-12-28 07:07:00.000000000 +0200
+++ hi253_yuv.iq255/hi253yuv_CameraCustomized.h	2012-05-02 21:05:52.000000000 +0300
@@ -1,3 +1,36 @@
+/* Copyright Statement:
+ *
+ * This software/firmware and related documentation ("MediaTek Software") are
+ * protected under relevant copyright laws. The information contained herein
+ * is confidential and proprietary to MediaTek Inc. and/or its licensors.
+ * Without the prior written permission of MediaTek inc. and/or its licensors,
+ * any reproduction, modification, use or disclosure of MediaTek Software,
+ * and information contained herein, in whole or in part, shall be strictly prohibited.
+ */
+/* MediaTek Inc. (C) 2010. All rights reserved.
+ *
+ * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
+ * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
+ * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
+ * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
+ * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
+ * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
+ * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
+ * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
+ * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
+ * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
+ * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
+ * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
+ * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
+ * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
+ * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
+ * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
+ *
+ * The following software/firmware and/or related documentation ("MediaTek Software")
+ * have been modified by MediaTek Inc. All revisions are subject to any receiver's
+ * applicable license agreements with MediaTek Inc.     */
 /*****************************************************************************
  *
  * Filename:
diff -rubN hi253_yuv/hi253yuv_Camera_Sensor_para.h hi253_yuv.iq255/hi253yuv_Camera_Sensor_para.h
--- hi253_yuv/hi253yuv_Camera_Sensor_para.h	2012-12-28 07:07:00.000000000 +0200
+++ hi253_yuv.iq255/hi253yuv_Camera_Sensor_para.h	2012-05-02 21:05:52.000000000 +0300
@@ -1,3 +1,36 @@
+/* Copyright Statement:
+ *
+ * This software/firmware and related documentation ("MediaTek Software") are
+ * protected under relevant copyright laws. The information contained herein
+ * is confidential and proprietary to MediaTek Inc. and/or its licensors.
+ * Without the prior written permission of MediaTek inc. and/or its licensors,
+ * any reproduction, modification, use or disclosure of MediaTek Software,
+ * and information contained herein, in whole or in part, shall be strictly prohibited.
+ */
+/* MediaTek Inc. (C) 2010. All rights reserved.
+ *
+ * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
+ * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
+ * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
+ * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
+ * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
+ * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
+ * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
+ * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
+ * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
+ * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
+ * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
+ * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
+ * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
+ * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
+ * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
+ * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
+ *
+ * The following software/firmware and/or related documentation ("MediaTek Software")
+ * have been modified by MediaTek Inc. All revisions are subject to any receiver's
+ * applicable license agreements with MediaTek Inc. */
 /*****************************************************************************
  *
  * Filename:
diff -rubN hi253_yuv/hi253yuv_Sensor.c hi253_yuv.iq255/hi253yuv_Sensor.c
--- hi253_yuv/hi253yuv_Sensor.c	2012-12-28 07:07:00.000000000 +0200
+++ hi253_yuv.iq255/hi253yuv_Sensor.c	2012-08-02 18:00:24.000000000 +0300
@@ -1,3 +1,38 @@
+/* Copyright Statement:
+ *
+ * This software/firmware and related documentation ("MediaTek Software") are
+ * protected under relevant copyright laws. The information contained herein
+ * is confidential and proprietary to MediaTek Inc. and/or its licensors.
+ * Without the prior written permission of MediaTek inc. and/or its licensors,
+ * any reproduction, modification, use or disclosure of MediaTek Software,
+ * and information contained herein, in whole or in part, shall be strictly prohibited.
+ */
+/* MediaTek Inc. (C) 2010. All rights reserved.
+ *
+ * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
+ * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
+ * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
+ * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
+ * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
+ * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
+ * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
+ * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
+ * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
+ * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
+ * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
+ * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
+ * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
+ * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
+ * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
+ * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
+ *
+ * The following software/firmware and/or related documentation ("MediaTek Software")
+ * have been modified by MediaTek Inc. All revisions are subject to any receiver's
+ * applicable license agreements with MediaTek Inc. */
+
+
 /*****************************************************************************
  *
  * Filename:
@@ -40,7 +75,6 @@
 #include <linux/fs.h>
 #include <asm/atomic.h>
 #include <asm/io.h>
-#include <asm/system.h>
 
 #include "kd_camera_hw.h"
 #include "kd_imgsensor.h"
@@ -82,9 +116,7 @@
   kal_uint8   AWBCTL1; /* P22.0x10. */
 } HI253Status;
 
-static DEFINE_SPINLOCK(hi253_drv_lock);
-
-
+kal_uint8 HI253_Sleep_Mode;
 extern int iReadRegI2C(u8 *a_pSendData , u16 a_sizeSendData, u8 * a_pRecvData, u16 a_sizeRecvData, u16 i2cId);
 extern int iWriteRegI2C(u8 *a_pSendData , u16 a_sizeSendData, u16 i2cId);
 
@@ -112,112 +144,113 @@
   HI253WriteCmosSensor(0x03, Page);
 }
 
-void HI253InitSetting(void)
-{
-  /*[SENSOR_INITIALIZATION]
-    DISP_DATE = "2010-11-24 "
-    DISP_WIDTH = 800
-    DISP_HEIGHT = 600
-    DISP_FORMAT = YUV422
-    DISP_DATAORDER = YUYV
-    MCLK = 26.00
-    PLL = 2.00  
-    BEGIN */
 
-  HI253WriteCmosSensor(0x01, 0xf9); // Sleep ON
-  HI253WriteCmosSensor(0x08, 0x0f); // Hi-Z ON
-  HI253WriteCmosSensor(0x01, 0xf8); // Sleep OFF
-
-  HI253SetPage(0x00); // Dummy 750us START
-  HI253SetPage(0x00);
-  HI253SetPage(0x00);
-  HI253SetPage(0x00);
-  HI253SetPage(0x00);
-  HI253SetPage(0x00);
-  HI253SetPage(0x00);
-  HI253SetPage(0x00);
-  HI253SetPage(0x00);
-  HI253SetPage(0x00); // Dummy 750us END
 
-  HI253WriteCmosSensor(0x0e, 0x00); // PLL 
-
-  HI253SetPage(0x00); // Dummy 750us START
-  HI253SetPage(0x00);
-  HI253SetPage(0x00);
-  HI253SetPage(0x00);
-  HI253SetPage(0x00);
-  HI253SetPage(0x00);
-  HI253SetPage(0x00);
-  HI253SetPage(0x00);
-  HI253SetPage(0x00);
-  HI253SetPage(0x00); // Dummy 750us END
+void HI253_Init_Cmds(void) 
+{ 
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x01, 0xf1);
+	HI253WriteCmosSensor(0x01, 0xf3);
+	HI253WriteCmosSensor(0x01, 0xf1);
+    mdelay(1);
+	HI253WriteCmosSensor(0x01, 0xf9); //sleep on
+	HI253WriteCmosSensor(0x08, 0x0f); //Hi-Z on
+	HI253WriteCmosSensor(0x01, 0xf8); //sleep off
+	HI253WriteCmosSensor(0x03, 0x00); // Dummy 750us START
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00); // Dummy 750us END
+	HI253WriteCmosSensor(0x0e, 0x03); //PLL On
+	HI253WriteCmosSensor(0x0e, 0x73); //PLLx2
+	HI253WriteCmosSensor(0x03, 0x00); // Dummy 750us START
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00); // Dummy 750us END
+	
+	HI253WriteCmosSensor(0x0e, 0x00); //PLL off
+	HI253WriteCmosSensor(0x01, 0xf1); //sleep on
+	HI253WriteCmosSensor(0x08, 0x00); //Hi-Z off
 
-  HI253WriteCmosSensor(0x0e, 0x00); // PLL OFF
-  HI253WriteCmosSensor(0x01, 0xf1); // Sleep ON
-  HI253WriteCmosSensor(0x08, 0x00); // Hi-Z OFF
   HI253WriteCmosSensor(0x01, 0xf3);
   HI253WriteCmosSensor(0x01, 0xf1);
 
-  HI253SetPage(0x20); 
-  HI253WriteCmosSensor(0x10, 0x0c); // AE OFF
-  HI253SetPage(0x22); 
-  HI253WriteCmosSensor(0x10, 0x69); // AWB OFF
+	// PAGE 20
+	HI253WriteCmosSensor(0x03, 0x20); //page 20
+	HI253WriteCmosSensor(0x10, 0x1c); //ae off
+
+	// PAGE 22
+	HI253WriteCmosSensor(0x03, 0x22); //page 22
+	HI253WriteCmosSensor(0x10, 0x69); //awb off
+
+	//Initial Start
+	/////// PAGE 0 START ///////
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x10, 0x11); // Sub1/2_Preview2 Mode_H binning
+	HI253WriteCmosSensor(0x12, 0x04);//0x04default
 
-  HI253SetPage(0x00); 
-  HI253WriteCmosSensor(0x10, 0x13); // Sub1/2_Preview2
-  HI253WriteCmosSensor(0x11, 0x90); // Windowing ON, 1Frame Skip
-  HI253WriteCmosSensor(0x12, 0x04); // 00:Rinsing edge 04:fall edge
   HI253WriteCmosSensor(0x0b, 0xaa); // ESD Check Register
   HI253WriteCmosSensor(0x0c, 0xaa); // ESD Check Register
   HI253WriteCmosSensor(0x0d, 0xaa); // ESD Check Register
-  HI253WriteCmosSensor(0x20, 0x00); // WINROWH
-  HI253WriteCmosSensor(0x21, 0x04); // WINROWL
-  HI253WriteCmosSensor(0x22, 0x00); // WINCOLH
-  HI253WriteCmosSensor(0x23, 0x07); // WINCOLL
-  HI253WriteCmosSensor(0x24, 0x04); // WINHGTH
-  HI253WriteCmosSensor(0x25, 0xb0); // WINHGTL
-  HI253WriteCmosSensor(0x26, 0x06); // WINWIDH
-  HI253WriteCmosSensor(0x27, 0x40); // WINWIDL
-
-  HI253WriteCmosSensor(0x40, 0x01); // HBLANKH 424
-  HI253WriteCmosSensor(0x41, 0xa8); // HBLANKL
-  HI253WriteCmosSensor(0x42, 0x00); // VSYNCH 62
-  HI253WriteCmosSensor(0x43, 0x3e); // VSYNCL
-
-  HI253WriteCmosSensor(0x45, 0x04); // VSCTL1
-  HI253WriteCmosSensor(0x46, 0x18); // VSCTL2
-  HI253WriteCmosSensor(0x47, 0xd8); // VSCTL3
 
-  HI253WriteCmosSensor(0xe1, 0x0f);
+	HI253WriteCmosSensor(0x20, 0x00); // Windowing start point Y
+	HI253WriteCmosSensor(0x21, 0x04);
+	HI253WriteCmosSensor(0x22, 0x00); // Windowing start point X
+	HI253WriteCmosSensor(0x23, 0x07);
+
+	HI253WriteCmosSensor(0x24, 0x04);
+	HI253WriteCmosSensor(0x25, 0xb0);
+	HI253WriteCmosSensor(0x26, 0x06);
+	HI253WriteCmosSensor(0x27, 0x40); // WINROW END
+	
+	HI253WriteCmosSensor(0x40, 0x01); //Hblank 408
+	HI253WriteCmosSensor(0x41, 0x98); 
+	HI253WriteCmosSensor(0x42, 0x00); //Vblank 100
+	HI253WriteCmosSensor(0x43, 0x14);
+	
+	HI253WriteCmosSensor(0x45, 0x04);
+	HI253WriteCmosSensor(0x46, 0x18);
+	HI253WriteCmosSensor(0x47, 0xd8);
 
   //BLC 
-  HI253WriteCmosSensor(0x80, 0x2e); // BLCCTL
+	HI253WriteCmosSensor(0x80, 0x2e);
   HI253WriteCmosSensor(0x81, 0x7e);
   HI253WriteCmosSensor(0x82, 0x90);
   HI253WriteCmosSensor(0x83, 0x00);
   HI253WriteCmosSensor(0x84, 0x0c);
   HI253WriteCmosSensor(0x85, 0x00);
-  HI253WriteCmosSensor(0x90, 0x0a); // BLCTIMETH ON
-  HI253WriteCmosSensor(0x91, 0x0a); // BLCTIMETH OFF
-  HI253WriteCmosSensor(0x92, 0x78); // BLCAGTH ON
-  HI253WriteCmosSensor(0x93, 0x70); // BLCAGTH OFF
-  HI253WriteCmosSensor(0x94, 0x75); // BLCDGTH ON
-  HI253WriteCmosSensor(0x95, 0x70); // BLCDGTH OFF
+	HI253WriteCmosSensor(0x90, 0x0c); //BLC_TIME_TH_ON
+	HI253WriteCmosSensor(0x91, 0x0c); //BLC_TIME_TH_OFF 
+	HI253WriteCmosSensor(0x92, 0xd8); //BLC_AG_TH_ON
+	HI253WriteCmosSensor(0x93, 0xd0); //BLC_AG_TH_OFF
+	HI253WriteCmosSensor(0x94, 0x75);
+	HI253WriteCmosSensor(0x95, 0x70);
   HI253WriteCmosSensor(0x96, 0xdc);
   HI253WriteCmosSensor(0x97, 0xfe);
-  HI253WriteCmosSensor(0x98, 0x20);
+	HI253WriteCmosSensor(0x98, 0x38);
 
   //OutDoor BLC
-  HI253WriteCmosSensor(0x99,0x42);// B
-  HI253WriteCmosSensor(0x9a,0x42);// Gb
-  HI253WriteCmosSensor(0x9b,0x42);// R
-  HI253WriteCmosSensor(0x9c,0x42);// Gr
+	HI253WriteCmosSensor(0x99, 0x43);
+	HI253WriteCmosSensor(0x9a, 0x43);
+	HI253WriteCmosSensor(0x9b, 0x43);
+	HI253WriteCmosSensor(0x9c, 0x43);
 
   //Dark BLC 
-  HI253WriteCmosSensor(0xa0, 0x00); // BLCOFS DB
-  HI253WriteCmosSensor(0xa2, 0x00); // BLCOFS DGb
-  HI253WriteCmosSensor(0xa4, 0x00); // BLCOFS DR
-  HI253WriteCmosSensor(0xa6, 0x00); // BLCOFS DGr
+	HI253WriteCmosSensor(0xa0, 0x00);
+	HI253WriteCmosSensor(0xa2, 0x00);
+	HI253WriteCmosSensor(0xa4, 0x00);
+	HI253WriteCmosSensor(0xa6, 0x00);
 
   //Normal BLC
   HI253WriteCmosSensor(0xa8, 0x43);
@@ -225,33 +258,55 @@
   HI253WriteCmosSensor(0xac, 0x43);
   HI253WriteCmosSensor(0xae, 0x43);
 
-  HI253SetPage(0x02); 
-  HI253WriteCmosSensor(0x12, 0x03);
-  HI253WriteCmosSensor(0x13, 0x03);
-  HI253WriteCmosSensor(0x16, 0x00);
-  HI253WriteCmosSensor(0x17, 0x8C);
-  HI253WriteCmosSensor(0x18, 0x4c); // 0x28->0x2c->4c [20100919 update]
-  HI253WriteCmosSensor(0x19, 0x00); // 0x40->0x00 [20100912 update]
-  HI253WriteCmosSensor(0x1a, 0x39);
-  HI253WriteCmosSensor(0x1c, 0x09);
-  HI253WriteCmosSensor(0x1d, 0x40);
-  HI253WriteCmosSensor(0x1e, 0x30);
-  HI253WriteCmosSensor(0x1f, 0x10);
-  HI253WriteCmosSensor(0x20, 0x77);
-  HI253WriteCmosSensor(0x21, 0xde); // 0xdd->0xde [20100919 update]
-  HI253WriteCmosSensor(0x22, 0xa7);
-  HI253WriteCmosSensor(0x23, 0x30); // 0xb0->0x30 [20100912 update]
+	/////// PAGE 2 START ///////
+    HI253WriteCmosSensor(0x03, 0x02); //Page 02
+    HI253WriteCmosSensor(0x10, 0x00); //Mode_test
+    HI253WriteCmosSensor(0x11, 0x00); //Mode_dead_test
+    HI253WriteCmosSensor(0x12, 0x03); //pwr_ctl_ctl1
+    HI253WriteCmosSensor(0x13, 0x03); //Mode_ana_test
+    HI253WriteCmosSensor(0x14, 0x00); //mode_memory
+    HI253WriteCmosSensor(0x16, 0x00); //dcdc_ctl1
+    HI253WriteCmosSensor(0x17, 0x8c); //dcdc_ctl2
+    HI253WriteCmosSensor(0x18, 0x4C); //analog_func1
+    HI253WriteCmosSensor(0x19, 0x00); //analog_func2
+    HI253WriteCmosSensor(0x1a, 0x39); //analog_func3
+    HI253WriteCmosSensor(0x1b, 0x00); //analog_func4
+    HI253WriteCmosSensor(0x1c, 0x09); //dcdc_ctl3
+    HI253WriteCmosSensor(0x1d, 0x40); //dcdc_ctl4
+    HI253WriteCmosSensor(0x1e, 0x30); //analog_func7
+    HI253WriteCmosSensor(0x1f, 0x10); //analog_func8
+    HI253WriteCmosSensor(0x20, 0x77); //pixel bias
+    HI253WriteCmosSensor(0x21, 0xde); //adc,asp bias
+    HI253WriteCmosSensor(0x22, 0xa7); //main,bus bias
+    HI253WriteCmosSensor(0x23, 0x30); //clamp
+    HI253WriteCmosSensor(0x24, 0x4a);		
+    HI253WriteCmosSensor(0x25, 0x10);		
   HI253WriteCmosSensor(0x27, 0x3c);
+    HI253WriteCmosSensor(0x28, 0x00);		
+    HI253WriteCmosSensor(0x29, 0x0c);		
+    HI253WriteCmosSensor(0x2a, 0x80);		
   HI253WriteCmosSensor(0x2b, 0x80);
-  HI253WriteCmosSensor(0x2e, 0x00); // 100913 power saving Hy gou 11},
-  HI253WriteCmosSensor(0x2f, 0x00); // 100913 power saving Hy gou a1},
-  HI253WriteCmosSensor(0x30, 0x05);
+    HI253WriteCmosSensor(0x2c, 0x02);		
+    HI253WriteCmosSensor(0x2d, 0xa0);		
+    HI253WriteCmosSensor(0x2e, 0x11);		
+    HI253WriteCmosSensor(0x2f, 0xa1);		
+    HI253WriteCmosSensor(0x30, 0x05); //swap_ctl
+    HI253WriteCmosSensor(0x31, 0x99);		
+    HI253WriteCmosSensor(0x32, 0x00);		
+    HI253WriteCmosSensor(0x33, 0x00);		
+    HI253WriteCmosSensor(0x34, 0x22);		
+    HI253WriteCmosSensor(0x38, 0x88);		
+    HI253WriteCmosSensor(0x39, 0x88);		
   HI253WriteCmosSensor(0x50, 0x20);
+    HI253WriteCmosSensor(0x51, 0x00);		
   HI253WriteCmosSensor(0x52, 0x01);
   HI253WriteCmosSensor(0x53, 0xc1);
+    HI253WriteCmosSensor(0x54, 0x10);		
   HI253WriteCmosSensor(0x55, 0x1c);
-  HI253WriteCmosSensor(0x56, 0x11); // 0x00->0x11 [20100912 update]
-  HI253WriteCmosSensor(0x5d, 0xA2);
+    HI253WriteCmosSensor(0x56, 0x11);		
+    HI253WriteCmosSensor(0x58, 0x10);		
+    HI253WriteCmosSensor(0x59, 0x0e);		
+    HI253WriteCmosSensor(0x5d, 0xa2);		
   HI253WriteCmosSensor(0x5e, 0x5a); 
   HI253WriteCmosSensor(0x60, 0x87);
   HI253WriteCmosSensor(0x61, 0x99);
@@ -262,99 +317,125 @@
   HI253WriteCmosSensor(0x67, 0x0c);
   HI253WriteCmosSensor(0x68, 0x0c);
   HI253WriteCmosSensor(0x69, 0x0c);
+    HI253WriteCmosSensor(0x6a, 0xb4);		
+    HI253WriteCmosSensor(0x6b, 0xc4);		
+    HI253WriteCmosSensor(0x6c, 0xb5);		
+    HI253WriteCmosSensor(0x6d, 0xc2);		
+    HI253WriteCmosSensor(0x6e, 0xb5);		
+    HI253WriteCmosSensor(0x6f, 0xc0);		
+    HI253WriteCmosSensor(0x70, 0xb6);		
+    HI253WriteCmosSensor(0x71, 0xb8);		
   HI253WriteCmosSensor(0x72, 0x89);
-  HI253WriteCmosSensor(0x73, 0x96); // 0x97->0x96 [20100919 update]
+    HI253WriteCmosSensor(0x73, 0x96);		
   HI253WriteCmosSensor(0x74, 0x89);
-  HI253WriteCmosSensor(0x75, 0x96); // 0x97->0x96 [20100919 update]
+    HI253WriteCmosSensor(0x75, 0x96);		
   HI253WriteCmosSensor(0x76, 0x89);
-  HI253WriteCmosSensor(0x77, 0x96); // 0x97->0x96 [20100912 update]
-  HI253WriteCmosSensor(0x7C, 0x85);
+    HI253WriteCmosSensor(0x77, 0x96);		
+    HI253WriteCmosSensor(0x7c, 0x85);		
   HI253WriteCmosSensor(0x7d, 0xaf);
   HI253WriteCmosSensor(0x80, 0x01);
-  HI253WriteCmosSensor(0x81, 0x7f); // 0x81->0x7f [20100919 update]
-  HI253WriteCmosSensor(0x82, 0x13); // 0x23->0x13 [20100912 update]
-  HI253WriteCmosSensor(0x83, 0x24); // 0x2b->0x24 [20100912 update]
-  HI253WriteCmosSensor(0x84, 0x7d);
+    HI253WriteCmosSensor(0x81, 0x7f);		
+    HI253WriteCmosSensor(0x82, 0x13); //rx_on1_read
+    HI253WriteCmosSensor(0x83, 0x24);		
+    HI253WriteCmosSensor(0x84, 0x7D);		
   HI253WriteCmosSensor(0x85, 0x81);
-  HI253WriteCmosSensor(0x86, 0x7d);
+    HI253WriteCmosSensor(0x86, 0x7D);		
   HI253WriteCmosSensor(0x87, 0x81);
-  HI253WriteCmosSensor(0x92, 0x48); // 0x53->0x48 [20100912 update]
-  HI253WriteCmosSensor(0x93, 0x54); // 0x5e->0x54 [20100912 update]
-  HI253WriteCmosSensor(0x94, 0x7d);
+    HI253WriteCmosSensor(0x88, 0xab);		
+    HI253WriteCmosSensor(0x89, 0xbc);		
+    HI253WriteCmosSensor(0x8a, 0xac);		
+    HI253WriteCmosSensor(0x8b, 0xba);		
+    HI253WriteCmosSensor(0x8c, 0xad);		
+    HI253WriteCmosSensor(0x8d, 0xb8);		
+    HI253WriteCmosSensor(0x8e, 0xae);		
+    HI253WriteCmosSensor(0x8f, 0xb2);		
+    HI253WriteCmosSensor(0x90, 0xb3);		
+    HI253WriteCmosSensor(0x91, 0xb7);		
+    HI253WriteCmosSensor(0x92, 0x48);		
+    HI253WriteCmosSensor(0x93, 0x54);		
+    HI253WriteCmosSensor(0x94, 0x7D);		
   HI253WriteCmosSensor(0x95, 0x81);
-  HI253WriteCmosSensor(0x96, 0x7d);
+    HI253WriteCmosSensor(0x96, 0x7D);		
   HI253WriteCmosSensor(0x97, 0x81);
   HI253WriteCmosSensor(0xa0, 0x02);
-  HI253WriteCmosSensor(0xa1, 0x7b);
+    HI253WriteCmosSensor(0xa1, 0x7B);		
   HI253WriteCmosSensor(0xa2, 0x02);
-  HI253WriteCmosSensor(0xa3, 0x7b);
-  HI253WriteCmosSensor(0xa4, 0x7b);
+    HI253WriteCmosSensor(0xa3, 0x7B);		
+    HI253WriteCmosSensor(0xa4, 0x7B);		
   HI253WriteCmosSensor(0xa5, 0x02);
-  HI253WriteCmosSensor(0xa6, 0x7b);
+    HI253WriteCmosSensor(0xa6, 0x7B);		
   HI253WriteCmosSensor(0xa7, 0x02);
   HI253WriteCmosSensor(0xa8, 0x85);
-  HI253WriteCmosSensor(0xa9, 0x8c);
+    HI253WriteCmosSensor(0xa9, 0x8C);		
   HI253WriteCmosSensor(0xaa, 0x85);
-  HI253WriteCmosSensor(0xab, 0x8c);
-  HI253WriteCmosSensor(0xac, 0x10); // 0x20->0x10 [20100912 update]
-  HI253WriteCmosSensor(0xad, 0x16); // 0x26->0x16 [20100912 update]
-  HI253WriteCmosSensor(0xae, 0x10); // 0x20->0x10 [20100912 update]
-  HI253WriteCmosSensor(0xaf, 0x16); // 0x26->0x16 [20100912 update]
+    HI253WriteCmosSensor(0xab, 0x8C);		
+    HI253WriteCmosSensor(0xac, 0x10); //Rx_pwr_off1_read
+    HI253WriteCmosSensor(0xad, 0x16); //Rx_pwr_on1_read
+    HI253WriteCmosSensor(0xae, 0x10); //Rx_pwr_off2_read
+    HI253WriteCmosSensor(0xaf, 0x16); //Rx_pwr_on1_read
   HI253WriteCmosSensor(0xb0, 0x99);
-  HI253WriteCmosSensor(0xb1, 0xa3);
-  HI253WriteCmosSensor(0xb2, 0xa4);
-  HI253WriteCmosSensor(0xb3, 0xae);
-  HI253WriteCmosSensor(0xb4, 0x9b);
-  HI253WriteCmosSensor(0xb5, 0xa2);
-  HI253WriteCmosSensor(0xb6, 0xa6);
-  HI253WriteCmosSensor(0xb7, 0xac);
-  HI253WriteCmosSensor(0xb8, 0x9b);
-  HI253WriteCmosSensor(0xb9, 0x9f);
-  HI253WriteCmosSensor(0xba, 0xa6);
-  HI253WriteCmosSensor(0xbb, 0xaa);
-  HI253WriteCmosSensor(0xbc, 0x9b);
-  HI253WriteCmosSensor(0xbd, 0x9f);
-  HI253WriteCmosSensor(0xbe, 0xa6);
+    HI253WriteCmosSensor(0xb1, 0xA3);		
+    HI253WriteCmosSensor(0xb2, 0xA4);		
+    HI253WriteCmosSensor(0xb3, 0xAE);		
+    HI253WriteCmosSensor(0xb4, 0x9B);		
+    HI253WriteCmosSensor(0xb5, 0xA2);		
+    HI253WriteCmosSensor(0xb6, 0xA6);		
+    HI253WriteCmosSensor(0xb7, 0xAC);		
+    HI253WriteCmosSensor(0xb8, 0x9B);		
+    HI253WriteCmosSensor(0xb9, 0x9F);		
+    HI253WriteCmosSensor(0xba, 0xA6);		
+    HI253WriteCmosSensor(0xbb, 0xAA);		
+    HI253WriteCmosSensor(0xbc, 0x9B);		
+    HI253WriteCmosSensor(0xbd, 0x9F);		
+    HI253WriteCmosSensor(0xbe, 0xA6);		
   HI253WriteCmosSensor(0xbf, 0xaa);
-  HI253WriteCmosSensor(0xc4, 0x2c); // 0x36->0x2c [20100912 update]
-  HI253WriteCmosSensor(0xc5, 0x43); // 0x4e->0x43 [20100912 update]
-  HI253WriteCmosSensor(0xc6, 0x63); // 0x61->0x63 [20100912 update]
-  HI253WriteCmosSensor(0xc7, 0x79); // 0x78->0x79 [20100919 update]
-  HI253WriteCmosSensor(0xc8, 0x2d); // 0x36->0x2d [20100912 update]
-  HI253WriteCmosSensor(0xc9, 0x42); // 0x4d->0x42 [20100912 update]
-  HI253WriteCmosSensor(0xca, 0x2d); // 0x36->0x2d [20100912 update]
-  HI253WriteCmosSensor(0xcb, 0x42); // 0x4d->0x42 [20100912 update]
-  HI253WriteCmosSensor(0xcc, 0x64); // 0x62->0x64 [20100912 update]
+    HI253WriteCmosSensor(0xc4, 0x2c);		
+    HI253WriteCmosSensor(0xc5, 0x43);		
+    HI253WriteCmosSensor(0xc6, 0x63);		
+    HI253WriteCmosSensor(0xc7, 0x79);		
+    HI253WriteCmosSensor(0xc8, 0x2d);		
+    HI253WriteCmosSensor(0xc9, 0x42);		
+    HI253WriteCmosSensor(0xca, 0x2d);		
+    HI253WriteCmosSensor(0xcb, 0x42);		
+    HI253WriteCmosSensor(0xcc, 0x64);		
   HI253WriteCmosSensor(0xcd, 0x78);
-  HI253WriteCmosSensor(0xce, 0x64); // 0x62->0x64 [20100912 update]
+    HI253WriteCmosSensor(0xce, 0x64);		
   HI253WriteCmosSensor(0xcf, 0x78);
   HI253WriteCmosSensor(0xd0, 0x0a);
   HI253WriteCmosSensor(0xd1, 0x09);
-  HI253WriteCmosSensor(0xd4, 0x0a); // DCDCTIMETHON
-  HI253WriteCmosSensor(0xd5, 0x0a); // DCDCTIMETHOFF
-  HI253WriteCmosSensor(0xd6, 0x78); // DCDCAGTHON
-  HI253WriteCmosSensor(0xd7, 0x70); // DCDCAGTHOFF
+    HI253WriteCmosSensor(0xd2, 0x20);		
+    HI253WriteCmosSensor(0xd3, 0x00);	
+        
+	HI253WriteCmosSensor(0xd4, 0x0c);		
+	HI253WriteCmosSensor(0xd5, 0x0c);		
+	HI253WriteCmosSensor(0xd6, 0xd8);		
+	HI253WriteCmosSensor(0xd7, 0xd0);
+		
   HI253WriteCmosSensor(0xe0, 0xc4);
   HI253WriteCmosSensor(0xe1, 0xc4);
   HI253WriteCmosSensor(0xe2, 0xc4);
   HI253WriteCmosSensor(0xe3, 0xc4);
   HI253WriteCmosSensor(0xe4, 0x00);
-  HI253WriteCmosSensor(0xe8, 0x80); // 0x00->0x80 [20100919 update]
+    HI253WriteCmosSensor(0xe8, 0x80);		
   HI253WriteCmosSensor(0xe9, 0x40);
-  HI253WriteCmosSensor(0xea, 0x7f); // 0x82->0x7f [20100919 update]
-  HI253WriteCmosSensor(0xf0, 0x01); // 100810 memory delay
-  HI253WriteCmosSensor(0xf1, 0x01); // 100810 memory delay
-  HI253WriteCmosSensor(0xf2, 0x01); // 100810 memory delay
-  HI253WriteCmosSensor(0xf3, 0x01); // 100810 memory delay
-  HI253WriteCmosSensor(0xf4, 0x01); // 100810 memory delay
+    HI253WriteCmosSensor(0xea, 0x7f);		
+    HI253WriteCmosSensor(0xf0, 0x01); //sram1_cfg
+    HI253WriteCmosSensor(0xf1, 0x01); //sram2_cfg
+    HI253WriteCmosSensor(0xf2, 0x01); //sram3_cfg
+    HI253WriteCmosSensor(0xf3, 0x01); //sram4_cfg
+    HI253WriteCmosSensor(0xf4, 0x01); //sram5_cfg
+///////////
 
-  HI253SetPage(0x03);
+	/////// PAGE 3 ///////
+	HI253WriteCmosSensor(0x03, 0x03);
   HI253WriteCmosSensor(0x10, 0x10);
 
-  HI253SetPage(0x10); 
-  HI253WriteCmosSensor(0x10, 0x03); // YUYV
-  HI253WriteCmosSensor(0x12, 0x30); // ISPCTL3
-  HI253WriteCmosSensor(0x20, 0x00); // ITUCTL
+	/////// PAGE 10 START ///////
+	HI253WriteCmosSensor(0x03, 0x10);
+	HI253WriteCmosSensor(0x10, 0x01); // CrYCbY // For Demoset 0x03
+	HI253WriteCmosSensor(0x12, 0x30);
+	HI253WriteCmosSensor(0x13, 0x0a); // contrast on
+	HI253WriteCmosSensor(0x20, 0x00);	
   HI253WriteCmosSensor(0x30, 0x00);
   HI253WriteCmosSensor(0x31, 0x00);
   HI253WriteCmosSensor(0x32, 0x00);
@@ -364,15 +445,1062 @@
   HI253WriteCmosSensor(0x36, 0x00);
   HI253WriteCmosSensor(0x38, 0x00);
   HI253WriteCmosSensor(0x3e, 0x58);
+	HI253WriteCmosSensor(0x3f, 0x00);	
+	HI253WriteCmosSensor(0x40, 0x85); // YOFS
+	HI253WriteCmosSensor(0x41, 0x10); // DYOFS
+	HI253WriteCmosSensor(0x48, 0x90); // Contrast	
+	HI253WriteCmosSensor(0x60, 0x67);
+    HI253WriteCmosSensor(0x61, 0x9b); //7e //8e //88 //70
+    HI253WriteCmosSensor(0x62, 0x9b); //7e //8e //88 //80
+	HI253WriteCmosSensor(0x63, 0x50); //Double_AG 50->30
+	HI253WriteCmosSensor(0x64, 0x41);	
+	HI253WriteCmosSensor(0x66, 0x42);
+	HI253WriteCmosSensor(0x67, 0x20);	
+	HI253WriteCmosSensor(0x6a, 0x80); //8a
+	HI253WriteCmosSensor(0x6b, 0x84); //74
+	HI253WriteCmosSensor(0x6c, 0x80); //7e //7a
+	HI253WriteCmosSensor(0x6d, 0x80); //8e
+	
+	/////// PAGE 11 START ///////
+	HI253WriteCmosSensor(0x03, 0x11);
+	HI253WriteCmosSensor(0x10, 0x7f);
+	HI253WriteCmosSensor(0x11, 0x40);
+	HI253WriteCmosSensor(0x12, 0x0a); // Blue Max-Filter Delete
+	HI253WriteCmosSensor(0x13, 0xbb);
+	
+	HI253WriteCmosSensor(0x26, 0x31); // Double_AG 31->20
+	HI253WriteCmosSensor(0x27, 0x34); // Double_AG 34->22
+	HI253WriteCmosSensor(0x28, 0x0f);
+	HI253WriteCmosSensor(0x29, 0x10);
+	HI253WriteCmosSensor(0x2b, 0x30);
+	HI253WriteCmosSensor(0x2c, 0x32);
+	
+	//Out2 D-LPF th
+	HI253WriteCmosSensor(0x30, 0x70);
+	HI253WriteCmosSensor(0x31, 0x10);
+	HI253WriteCmosSensor(0x32, 0x58);
+	HI253WriteCmosSensor(0x33, 0x09);
+	HI253WriteCmosSensor(0x34, 0x06);
+	HI253WriteCmosSensor(0x35, 0x03);
+	
+	//Out1 D-LPF th
+	HI253WriteCmosSensor(0x36, 0x70);
+	HI253WriteCmosSensor(0x37, 0x18);
+	HI253WriteCmosSensor(0x38, 0x58);
+	HI253WriteCmosSensor(0x39, 0x09);
+	HI253WriteCmosSensor(0x3a, 0x06);
+	HI253WriteCmosSensor(0x3b, 0x03);
+	
+	//Indoor D-LPF th
+	HI253WriteCmosSensor(0x3c, 0x80);
+	HI253WriteCmosSensor(0x3d, 0x18);
+	HI253WriteCmosSensor(0x3e, 0xa0); //80
+	HI253WriteCmosSensor(0x3f, 0x0c);
+	HI253WriteCmosSensor(0x40, 0x09);
+	HI253WriteCmosSensor(0x41, 0x06);
+	
+	HI253WriteCmosSensor(0x42, 0x80);
+	HI253WriteCmosSensor(0x43, 0x18);
+	HI253WriteCmosSensor(0x44, 0xa0); //80
+	HI253WriteCmosSensor(0x45, 0x12);
+	HI253WriteCmosSensor(0x46, 0x10);
+	HI253WriteCmosSensor(0x47, 0x10);
+	
+	HI253WriteCmosSensor(0x48, 0x90);
+	HI253WriteCmosSensor(0x49, 0x40);
+	HI253WriteCmosSensor(0x4a, 0x80);
+	HI253WriteCmosSensor(0x4b, 0x13);
+	HI253WriteCmosSensor(0x4c, 0x10);
+	HI253WriteCmosSensor(0x4d, 0x11);
+	
+	HI253WriteCmosSensor(0x4e, 0x80);
+	HI253WriteCmosSensor(0x4f, 0x30);
+	HI253WriteCmosSensor(0x50, 0x80);
+	HI253WriteCmosSensor(0x51, 0x13);
+	HI253WriteCmosSensor(0x52, 0x10);
+	HI253WriteCmosSensor(0x53, 0x13);
+	
+	HI253WriteCmosSensor(0x54, 0x11);
+	HI253WriteCmosSensor(0x55, 0x17);
+	HI253WriteCmosSensor(0x56, 0x20);
+	HI253WriteCmosSensor(0x57, 0x01);
+	HI253WriteCmosSensor(0x58, 0x00);
+	HI253WriteCmosSensor(0x59, 0x00);
+	
+	HI253WriteCmosSensor(0x5a, 0x1f); //18
+	HI253WriteCmosSensor(0x5b, 0x00);
+	HI253WriteCmosSensor(0x5c, 0x00);
+	
+	HI253WriteCmosSensor(0x60, 0x3f);
+	HI253WriteCmosSensor(0x62, 0x60);
+	HI253WriteCmosSensor(0x70, 0x06);
+	
+	/////// PAGE 12 START ///////
+	HI253WriteCmosSensor(0x03, 0x12);
+	HI253WriteCmosSensor(0x20, 0x0f);
+	HI253WriteCmosSensor(0x21, 0x0f);
+	
+	HI253WriteCmosSensor(0x25, 0x00); //0x30
+	
+	HI253WriteCmosSensor(0x28, 0x00);
+	HI253WriteCmosSensor(0x29, 0x00);
+	HI253WriteCmosSensor(0x2a, 0x00);
+	
+	HI253WriteCmosSensor(0x30, 0x50);
+	HI253WriteCmosSensor(0x31, 0x18);
+	HI253WriteCmosSensor(0x32, 0x32);
+	HI253WriteCmosSensor(0x33, 0x40);
+	HI253WriteCmosSensor(0x34, 0x50);
+	HI253WriteCmosSensor(0x35, 0x70);
+	HI253WriteCmosSensor(0x36, 0xa0);
+	
+	//Out2 th
+	HI253WriteCmosSensor(0x40, 0xa0);
+	HI253WriteCmosSensor(0x41, 0x40);
+	HI253WriteCmosSensor(0x42, 0xa0);
+	HI253WriteCmosSensor(0x43, 0x90);
+	HI253WriteCmosSensor(0x44, 0x90);
+	HI253WriteCmosSensor(0x45, 0x80);
+	
+	//Out1 th
+	HI253WriteCmosSensor(0x46, 0xb0);
+	HI253WriteCmosSensor(0x47, 0x55);
+	HI253WriteCmosSensor(0x48, 0xa0);
+	HI253WriteCmosSensor(0x49, 0x90);
+	HI253WriteCmosSensor(0x4a, 0x90);
+	HI253WriteCmosSensor(0x4b, 0x80);
+	
+	//Indoor th
+	HI253WriteCmosSensor(0x4c, 0xb0);
+	HI253WriteCmosSensor(0x4d, 0x40);
+	HI253WriteCmosSensor(0x4e, 0x90);
+	HI253WriteCmosSensor(0x4f, 0x90);
+	HI253WriteCmosSensor(0x50, 0xa0);
+	HI253WriteCmosSensor(0x51, 0x80);
+	
+	//Dark1 th
+HI253WriteCmosSensor(0x52, 0xb0); //b0
+HI253WriteCmosSensor(0x53, 0x60); //60
+HI253WriteCmosSensor(0x54, 0xc0); //c0
+HI253WriteCmosSensor(0x55, 0xc0); //c0
+HI253WriteCmosSensor(0x56, 0xb0); //b0
+HI253WriteCmosSensor(0x57, 0x70); //70
+//Dark2 th
+HI253WriteCmosSensor(0x58, 0x90); //90
+HI253WriteCmosSensor(0x59, 0x40); //
+HI253WriteCmosSensor(0x5a, 0xd0); 
+HI253WriteCmosSensor(0x5b, 0xd0); 
+HI253WriteCmosSensor(0x5c, 0xc0); 
+HI253WriteCmosSensor(0x5d, 0x70); //70
+	
+	//Dark3 th
+HI253WriteCmosSensor(0x5e, 0x70);//88
+HI253WriteCmosSensor(0x5f, 0x40);
+HI253WriteCmosSensor(0x60, 0xe0);
+HI253WriteCmosSensor(0x61, 0xe0);
+HI253WriteCmosSensor(0x62, 0xe0);
+HI253WriteCmosSensor(0x63, 0xb4);//80
+	
+	HI253WriteCmosSensor(0x70, 0x15);
+	HI253WriteCmosSensor(0x71, 0x01); //Don't Touch register
+	
+	HI253WriteCmosSensor(0x72, 0x18);
+	HI253WriteCmosSensor(0x73, 0x01); //Don't Touch register
+	
+	HI253WriteCmosSensor(0x74, 0x25);
+	HI253WriteCmosSensor(0x75, 0x15);
+	
+	HI253WriteCmosSensor(0x80, 0x20);
+	HI253WriteCmosSensor(0x81, 0x40);
+	HI253WriteCmosSensor(0x82, 0x65);
+	HI253WriteCmosSensor(0x85, 0x1a);
+	HI253WriteCmosSensor(0x88, 0x00);
+	HI253WriteCmosSensor(0x89, 0x00);
+	HI253WriteCmosSensor(0x90, 0x5d); //For capture
+HI253WriteCmosSensor(0x91, 0x88);		
+HI253WriteCmosSensor(0x98, 0x7d);		
+HI253WriteCmosSensor(0x99, 0x28);		
+HI253WriteCmosSensor(0x9A, 0x14);		
+HI253WriteCmosSensor(0x9B, 0xc8);		
+HI253WriteCmosSensor(0x9C, 0x02);		
+HI253WriteCmosSensor(0x9D, 0x1e);		
+HI253WriteCmosSensor(0x9E, 0x28);		
+HI253WriteCmosSensor(0x9F, 0x07);		
+HI253WriteCmosSensor(0xA0, 0x32);		
+HI253WriteCmosSensor(0xA4, 0x04);		
+HI253WriteCmosSensor(0xA5, 0x0e);		
+HI253WriteCmosSensor(0xA6, 0x0c);		
+HI253WriteCmosSensor(0xA7, 0x04);		
+HI253WriteCmosSensor(0xA8, 0x3c);		
+
+HI253WriteCmosSensor(0xAA, 0x14);		
+HI253WriteCmosSensor(0xAB, 0x11);		
+HI253WriteCmosSensor(0xAC, 0x0f);		
+HI253WriteCmosSensor(0xAD, 0x16);		
+HI253WriteCmosSensor(0xAE, 0x15);		
+HI253WriteCmosSensor(0xAF, 0x14);		
+HI253WriteCmosSensor(0xB1, 0xaa);		
+HI253WriteCmosSensor(0xB2, 0x96);		
+HI253WriteCmosSensor(0xB3, 0x28);		
+//Dont Touch register
+HI253WriteCmosSensor(0xB8, 0x78);		
+HI253WriteCmosSensor(0xB9, 0xa0);		
+HI253WriteCmosSensor(0xBA, 0xb4);		
+HI253WriteCmosSensor(0xBB, 0x14);		
+HI253WriteCmosSensor(0xBC, 0x14);		
+HI253WriteCmosSensor(0xBD, 0x00);	//14	 \u53bb\u767d\u70b9
+HI253WriteCmosSensor(0xBE, 0x64);		
+HI253WriteCmosSensor(0xBF, 0x64);		
+HI253WriteCmosSensor(0xC0, 0x64);		
+HI253WriteCmosSensor(0xC1, 0x64);		
+HI253WriteCmosSensor(0xC2, 0x04);		
+HI253WriteCmosSensor(0xC3, 0x03);		
+HI253WriteCmosSensor(0xC4, 0x0c);		
+HI253WriteCmosSensor(0xC5, 0x30);		
+HI253WriteCmosSensor(0xC6, 0x2a);		
+	HI253WriteCmosSensor(0xD0, 0x0c);
+	HI253WriteCmosSensor(0xD1, 0x80);
+	HI253WriteCmosSensor(0xD2, 0x67);
+	HI253WriteCmosSensor(0xD3, 0x00);
+	HI253WriteCmosSensor(0xD4, 0x00);
+	HI253WriteCmosSensor(0xD5, 0x02);
+	HI253WriteCmosSensor(0xD6, 0xff);
+	HI253WriteCmosSensor(0xD7, 0x18);
+	//End
+	HI253WriteCmosSensor(0x3b, 0x06);
+	HI253WriteCmosSensor(0x3c, 0x06);
+	
+	HI253WriteCmosSensor(0xc5, 0x00);//55->48
+	HI253WriteCmosSensor(0xc6, 0x00);//48->40
+	
+	/////// PAGE 13 START ///////
+	HI253WriteCmosSensor(0x03, 0x13);
+	//Edge
+	HI253WriteCmosSensor(0x10, 0xcb);
+	HI253WriteCmosSensor(0x11, 0x7b);
+	HI253WriteCmosSensor(0x12, 0x07);
+	HI253WriteCmosSensor(0x14, 0x00);
+	
+	HI253WriteCmosSensor(0x20, 0x15);
+	HI253WriteCmosSensor(0x21, 0x13);
+	HI253WriteCmosSensor(0x22, 0x33);
+	HI253WriteCmosSensor(0x23, 0x05);
+	HI253WriteCmosSensor(0x24, 0x12);//09
+	
+	HI253WriteCmosSensor(0x26, 0x18);
+	HI253WriteCmosSensor(0x27, 0x30);
+	HI253WriteCmosSensor(0x29, 0x12);
+	HI253WriteCmosSensor(0x2a, 0x50);
+	
+	//Low clip th
+	HI253WriteCmosSensor(0x2b, 0x01); //Out2 02
+	HI253WriteCmosSensor(0x2c, 0x01); //Out1 02
+	HI253WriteCmosSensor(0x25, 0x06);
+	HI253WriteCmosSensor(0x2d, 0x0c);
+	HI253WriteCmosSensor(0x2e, 0x12);
+	HI253WriteCmosSensor(0x2f, 0x12);
+	
+	//Out2 Edge
+	HI253WriteCmosSensor(0x50, 0x18);
+	HI253WriteCmosSensor(0x51, 0x1c);
+	HI253WriteCmosSensor(0x52, 0x1b);
+	HI253WriteCmosSensor(0x53, 0x15);
+	HI253WriteCmosSensor(0x54, 0x18);
+	HI253WriteCmosSensor(0x55, 0x15);
+	
+	//Out1 Edge  
+	HI253WriteCmosSensor(0x56, 0x18);
+	HI253WriteCmosSensor(0x57, 0x1c);////1C
+	HI253WriteCmosSensor(0x58, 0x1b);
+	HI253WriteCmosSensor(0x59, 0x15);
+	HI253WriteCmosSensor(0x5a, 0x18);//18
+	HI253WriteCmosSensor(0x5b, 0x15);
+	
+	//Indoor Edge
+	HI253WriteCmosSensor(0x5c, 0x0b);
+	HI253WriteCmosSensor(0x5d, 0x10);//0C
+	HI253WriteCmosSensor(0x5e, 0x0a);
+	HI253WriteCmosSensor(0x5f, 0x08);
+	HI253WriteCmosSensor(0x60, 0x19);//09
+	HI253WriteCmosSensor(0x61, 0x08);
+	
+	//Dark1 Edge
+	HI253WriteCmosSensor(0x62, 0x08);
+	HI253WriteCmosSensor(0x63, 0x18);//08
+	HI253WriteCmosSensor(0x64, 0x08);
+	HI253WriteCmosSensor(0x65, 0x06);
+	HI253WriteCmosSensor(0x66, 0x16);//16
+	HI253WriteCmosSensor(0x67, 0x06);
+	
+	//Dark2 Edge
+	HI253WriteCmosSensor(0x68, 0x07);
+	HI253WriteCmosSensor(0x69, 0x07);
+	HI253WriteCmosSensor(0x6a, 0x07);
+	HI253WriteCmosSensor(0x6b, 0x05);
+	HI253WriteCmosSensor(0x6c, 0x05);
+	HI253WriteCmosSensor(0x6d, 0x05);
+	
+	//Dark3 Edge
+	HI253WriteCmosSensor(0x6e, 0x07);
+	HI253WriteCmosSensor(0x6f, 0x07);
+	HI253WriteCmosSensor(0x70, 0x07);
+	HI253WriteCmosSensor(0x71, 0x05);
+	HI253WriteCmosSensor(0x72, 0x05);
+	HI253WriteCmosSensor(0x73, 0x05);
+	
+	//2DY
+	HI253WriteCmosSensor(0x80, 0xfd);
+	HI253WriteCmosSensor(0x81, 0x1f);
+	HI253WriteCmosSensor(0x82, 0x05);
+	HI253WriteCmosSensor(0x83, 0x31);
+	
+	HI253WriteCmosSensor(0x90, 0x05);
+	HI253WriteCmosSensor(0x91, 0x05);
+	HI253WriteCmosSensor(0x92, 0x33);
+	HI253WriteCmosSensor(0x93, 0x30);
+	HI253WriteCmosSensor(0x94, 0x03);
+	HI253WriteCmosSensor(0x95, 0x14);
+	HI253WriteCmosSensor(0x97, 0x20);
+	HI253WriteCmosSensor(0x99, 0x20);
+	
+	HI253WriteCmosSensor(0xa0, 0x01);
+	HI253WriteCmosSensor(0xa1, 0x02);
+	HI253WriteCmosSensor(0xa2, 0x01);
+	HI253WriteCmosSensor(0xa3, 0x02);
+	HI253WriteCmosSensor(0xa4, 0x05);
+	HI253WriteCmosSensor(0xa5, 0x05);
+	HI253WriteCmosSensor(0xa6, 0x07);
+	HI253WriteCmosSensor(0xa7, 0x08);
+	HI253WriteCmosSensor(0xa8, 0x07);
+	HI253WriteCmosSensor(0xa9, 0x08);
+	HI253WriteCmosSensor(0xaa, 0x07);
+	HI253WriteCmosSensor(0xab, 0x08);
+	
+	//Out2 
+	HI253WriteCmosSensor(0xb0, 0x22);
+	HI253WriteCmosSensor(0xb1, 0x2a);
+	HI253WriteCmosSensor(0xb2, 0x28);
+	HI253WriteCmosSensor(0xb3, 0x22);
+	HI253WriteCmosSensor(0xb4, 0x2a);
+	HI253WriteCmosSensor(0xb5, 0x28);
+	
+	//Out1 
+	HI253WriteCmosSensor(0xb6, 0x22);
+	HI253WriteCmosSensor(0xb7, 0x2a);
+	HI253WriteCmosSensor(0xb8, 0x28);
+	HI253WriteCmosSensor(0xb9, 0x22);
+	HI253WriteCmosSensor(0xba, 0x2a);
+	HI253WriteCmosSensor(0xbb, 0x28);
+	
+	//Indoor 
+	HI253WriteCmosSensor(0xbc, 0x25);
+	HI253WriteCmosSensor(0xbd, 0x2a);
+	HI253WriteCmosSensor(0xbe, 0x27);
+	HI253WriteCmosSensor(0xbf, 0x25);
+	HI253WriteCmosSensor(0xc0, 0x2a);
+	HI253WriteCmosSensor(0xc1, 0x27);
+	
+	//Dark1
+	HI253WriteCmosSensor(0xc2, 0x1e);
+	HI253WriteCmosSensor(0xc3, 0x24);
+	HI253WriteCmosSensor(0xc4, 0x20);
+	HI253WriteCmosSensor(0xc5, 0x1e);
+	HI253WriteCmosSensor(0xc6, 0x24);
+	HI253WriteCmosSensor(0xc7, 0x20);
+	
+	//Dark2
+	HI253WriteCmosSensor(0xc8, 0x18);
+	HI253WriteCmosSensor(0xc9, 0x20);
+	HI253WriteCmosSensor(0xca, 0x1e);
+	HI253WriteCmosSensor(0xcb, 0x18);
+	HI253WriteCmosSensor(0xcc, 0x20);
+	HI253WriteCmosSensor(0xcd, 0x1e);
+	
+	//Dark3 
+	HI253WriteCmosSensor(0xce, 0x18);
+	HI253WriteCmosSensor(0xcf, 0x20);
+	HI253WriteCmosSensor(0xd0, 0x1e);
+	HI253WriteCmosSensor(0xd1, 0x18);
+	HI253WriteCmosSensor(0xd2, 0x20);
+	HI253WriteCmosSensor(0xd3, 0x1e);
+
+	
+	/////// PAGE 14 START ///////
+	HI253WriteCmosSensor(0x03, 0x14);
+	HI253WriteCmosSensor(0x10, 0x11);
+	HI253WriteCmosSensor(0x14, 0x80); // GX
+	HI253WriteCmosSensor(0x15, 0x80); // GY
+	HI253WriteCmosSensor(0x16, 0x80); // RX
+	HI253WriteCmosSensor(0x17, 0x80); // RY
+	HI253WriteCmosSensor(0x18, 0x80); // BX
+	HI253WriteCmosSensor(0x19, 0x80); // BY
+HI253WriteCmosSensor(0x20, 0xb0); //X 60 //a0
+HI253WriteCmosSensor(0x21, 0x70); //Y
+HI253WriteCmosSensor(0x22, 0x80);
+HI253WriteCmosSensor(0x23, 0x80);
+HI253WriteCmosSensor(0x24, 0x80);
+HI253WriteCmosSensor(0x30, 0xc8);
+HI253WriteCmosSensor(0x31, 0x2b);
+HI253WriteCmosSensor(0x32, 0x00);
+HI253WriteCmosSensor(0x33, 0x00);
+HI253WriteCmosSensor(0x34, 0x90);
+HI253WriteCmosSensor(0x40, 0x5C); //0x48//65
+HI253WriteCmosSensor(0x50, 0x4d); //0x34
+HI253WriteCmosSensor(0x60, 0x46); //0x29
+HI253WriteCmosSensor(0x70, 0x4d); //0x34
+	
+	/////// PAGE 15 START ///////
+	HI253WriteCmosSensor(0x03, 0x15);
+	HI253WriteCmosSensor(0x10, 0x0f);
+	
+	//Rstep H 16
+	//Rstep L 14
+	HI253WriteCmosSensor(0x14, 0x42); //CMCOFSGH_Day //4c
+	HI253WriteCmosSensor(0x15, 0x32); //CMCOFSGM_CWF //3c
+	HI253WriteCmosSensor(0x16, 0x24); //CMCOFSGL_A //2e
+	HI253WriteCmosSensor(0x17, 0x2f); //CMC SIGN
+	
+	//CMC_Default_CWF
+HI253WriteCmosSensor(0x30, 0x80);
+HI253WriteCmosSensor(0x31, 0x4d);
+HI253WriteCmosSensor(0x32, 0x0d);
+HI253WriteCmosSensor(0x33, 0x0c);
+HI253WriteCmosSensor(0x34, 0x4d);
+HI253WriteCmosSensor(0x35, 0x01);
+HI253WriteCmosSensor(0x36, 0x00);
+HI253WriteCmosSensor(0x37, 0x43);
+HI253WriteCmosSensor(0x38, 0x83);
+	
+	//CMC OFS L_A
+	HI253WriteCmosSensor(0x40, 0x92);
+	HI253WriteCmosSensor(0x41, 0x1b);
+	HI253WriteCmosSensor(0x42, 0x89);
+	HI253WriteCmosSensor(0x43, 0x81);
+	HI253WriteCmosSensor(0x44, 0x00);
+	HI253WriteCmosSensor(0x45, 0x01);
+	HI253WriteCmosSensor(0x46, 0x89);
+	HI253WriteCmosSensor(0x47, 0x9e);
+	HI253WriteCmosSensor(0x48, 0x28);
+		
+	//CMC POFS H_DAY
+	HI253WriteCmosSensor(0x50, 0x02);
+	HI253WriteCmosSensor(0x51, 0x82);
+	HI253WriteCmosSensor(0x52, 0x00);
+	HI253WriteCmosSensor(0x53, 0x07);
+	HI253WriteCmosSensor(0x54, 0x11);
+	HI253WriteCmosSensor(0x55, 0x98);
+	HI253WriteCmosSensor(0x56, 0x00);
+	HI253WriteCmosSensor(0x57, 0x0b);
+	HI253WriteCmosSensor(0x58, 0x8b);
+	HI253WriteCmosSensor(0x80, 0x03);
+	HI253WriteCmosSensor(0x85, 0x40);
+	HI253WriteCmosSensor(0x87, 0x02);
+	HI253WriteCmosSensor(0x88, 0x00);
+	HI253WriteCmosSensor(0x89, 0x00);
+	HI253WriteCmosSensor(0x8a, 0x00);
+	
+	/////// PAGE 16 START ///////
+	HI253WriteCmosSensor(0x03, 0x16);
+	HI253WriteCmosSensor(0x10, 0x31);
+	HI253WriteCmosSensor(0x18, 0x5e);// Double_AG 5e->37
+	HI253WriteCmosSensor(0x19, 0x5d);// Double_AG 5e->36
+HI253WriteCmosSensor(0x1A, 0x0e);//TIME_ON
+HI253WriteCmosSensor(0x1B, 0x01);//TIME_OFF
+HI253WriteCmosSensor(0x1C, 0xdc);//OUT_ON
+HI253WriteCmosSensor(0x1D, 0xfe);//OUT_OFF
+//GMA
+HI253WriteCmosSensor(0x30, 0x00);
+HI253WriteCmosSensor(0x31, 0x06);
+HI253WriteCmosSensor(0x32, 0x12);
+HI253WriteCmosSensor(0x33, 0x29);
+HI253WriteCmosSensor(0x34, 0x4d);
+HI253WriteCmosSensor(0x35, 0x6c);
+HI253WriteCmosSensor(0x36, 0x81);
+HI253WriteCmosSensor(0x37, 0x94);
+HI253WriteCmosSensor(0x38, 0xa4);
+HI253WriteCmosSensor(0x39, 0xb3);
+HI253WriteCmosSensor(0x3a, 0xc0);
+HI253WriteCmosSensor(0x3b, 0xcb);
+HI253WriteCmosSensor(0x3c, 0xd5);
+HI253WriteCmosSensor(0x3d, 0xde);
+HI253WriteCmosSensor(0x3e, 0xe6);
+HI253WriteCmosSensor(0x3f, 0xee);
+HI253WriteCmosSensor(0x40, 0xf5);
+HI253WriteCmosSensor(0x41, 0xfc);
+HI253WriteCmosSensor(0x42, 0xff);
+	HI253WriteCmosSensor(0x50, 0x00);
+	HI253WriteCmosSensor(0x51, 0x09);
+	HI253WriteCmosSensor(0x52, 0x1f);
+	HI253WriteCmosSensor(0x53, 0x37);
+	HI253WriteCmosSensor(0x54, 0x5b);
+	HI253WriteCmosSensor(0x55, 0x76);
+	HI253WriteCmosSensor(0x56, 0x8d);
+	HI253WriteCmosSensor(0x57, 0xa1);
+	HI253WriteCmosSensor(0x58, 0xb2);
+	HI253WriteCmosSensor(0x59, 0xbe);
+	HI253WriteCmosSensor(0x5a, 0xc9);
+	HI253WriteCmosSensor(0x5b, 0xd2);
+	HI253WriteCmosSensor(0x5c, 0xdb);
+	HI253WriteCmosSensor(0x5d, 0xe3);
+	HI253WriteCmosSensor(0x5e, 0xeb);
+	HI253WriteCmosSensor(0x5f, 0xf0);
+	HI253WriteCmosSensor(0x60, 0xf5);
+	HI253WriteCmosSensor(0x61, 0xf7);
+	HI253WriteCmosSensor(0x62, 0xf8);
+	HI253WriteCmosSensor(0x70, 0x00);
+	HI253WriteCmosSensor(0x71, 0x17);
+	HI253WriteCmosSensor(0x72, 0x2a);
+	HI253WriteCmosSensor(0x73, 0x3b);
+	HI253WriteCmosSensor(0x74, 0x53);
+	HI253WriteCmosSensor(0x75, 0x6c);
+	HI253WriteCmosSensor(0x76, 0x81);
+	HI253WriteCmosSensor(0x77, 0x94);
+	HI253WriteCmosSensor(0x78, 0xa4);
+	HI253WriteCmosSensor(0x79, 0xb3);
+	HI253WriteCmosSensor(0x7a, 0xc0);
+	HI253WriteCmosSensor(0x7b, 0xcb);
+	HI253WriteCmosSensor(0x7c, 0xd5);
+	HI253WriteCmosSensor(0x7d, 0xde);
+	HI253WriteCmosSensor(0x7e, 0xe6);
+	HI253WriteCmosSensor(0x7f, 0xee);
+	HI253WriteCmosSensor(0x80, 0xf4);
+	HI253WriteCmosSensor(0x81, 0xfa);
+	HI253WriteCmosSensor(0x82, 0xff);
+	
+	/////// PAGE 17 START ///////
+	HI253WriteCmosSensor(0x03, 0x17);
+	HI253WriteCmosSensor(0x10, 0xf7);
+	
+	/////// PAGE 20 START ///////
+	HI253WriteCmosSensor(0x03, 0x20);
+	HI253WriteCmosSensor(0x11, 0x1c);
+	HI253WriteCmosSensor(0x18, 0x30);
+	HI253WriteCmosSensor(0x1a, 0x08);
+	HI253WriteCmosSensor(0x20, 0x01); //05_lowtemp Y Mean off
+	HI253WriteCmosSensor(0x21, 0x30);
+	HI253WriteCmosSensor(0x22, 0x10);
+	HI253WriteCmosSensor(0x23, 0x00);
+	HI253WriteCmosSensor(0x24, 0x00); //Uniform Scene Off
+	HI253WriteCmosSensor(0x28, 0xe7);
+	HI253WriteCmosSensor(0x29, 0x0d); //20100305 ad->0d
+	HI253WriteCmosSensor(0x2a, 0xff);
+	HI253WriteCmosSensor(0x2b, 0x34); //f4->Adaptive off
+	HI253WriteCmosSensor(0x2c, 0xc3);
+	HI253WriteCmosSensor(0x2d, 0xcf);  //fe->AE Speed option
+	HI253WriteCmosSensor(0x2e, 0x33);
+	HI253WriteCmosSensor(0x30, 0x78); //f8
+	HI253WriteCmosSensor(0x32, 0x03);
+	HI253WriteCmosSensor(0x33, 0x2e);
+	HI253WriteCmosSensor(0x34, 0x30);
+	HI253WriteCmosSensor(0x35, 0xd4);
+	HI253WriteCmosSensor(0x36, 0xfe);
+	HI253WriteCmosSensor(0x37, 0x32);
+	HI253WriteCmosSensor(0x38, 0x04);
+	HI253WriteCmosSensor(0x39, 0x22); //AE_escapeC10
+	HI253WriteCmosSensor(0x3a, 0xde); //AE_escapeC11
+	HI253WriteCmosSensor(0x3b, 0x22); //AE_escapeC1
+	HI253WriteCmosSensor(0x3c, 0xde); //AE_escapeC2
+	HI253WriteCmosSensor(0x50, 0x45);
+	HI253WriteCmosSensor(0x51, 0x88);
+	HI253WriteCmosSensor(0x56, 0x03);
+	HI253WriteCmosSensor(0x57, 0xf7);
+	HI253WriteCmosSensor(0x58, 0x14);
+	HI253WriteCmosSensor(0x59, 0x88);
+	HI253WriteCmosSensor(0x5a, 0x04);
+	
+	//New Weight For Samsung
+	HI253WriteCmosSensor(0x60, 0xff);
+	HI253WriteCmosSensor(0x61, 0xff);
+	HI253WriteCmosSensor(0x62, 0xea);
+	HI253WriteCmosSensor(0x63, 0xab);
+	HI253WriteCmosSensor(0x64, 0xea);
+	HI253WriteCmosSensor(0x65, 0xab);
+	HI253WriteCmosSensor(0x66, 0xea);//eb
+	HI253WriteCmosSensor(0x67, 0x2b);//eb
+	HI253WriteCmosSensor(0x68, 0xe8);//eb
+	HI253WriteCmosSensor(0x69, 0x2b);//eb
+	HI253WriteCmosSensor(0x6a, 0xea);
+	HI253WriteCmosSensor(0x6b, 0xab);
+	HI253WriteCmosSensor(0x6c, 0xea);
+	HI253WriteCmosSensor(0x6d, 0xab);
+	HI253WriteCmosSensor(0x6e, 0xff);
+	HI253WriteCmosSensor(0x6f, 0xff);
+		
+    HI253WriteCmosSensor(0x70, 0x48); //6e
+	HI253WriteCmosSensor(0x71, 0x89); //00 //-4
+	
+	// haunting control
+	HI253WriteCmosSensor(0x76, 0x43);
+	HI253WriteCmosSensor(0x77, 0xe2); //04 //f2
+	HI253WriteCmosSensor(0x78, 0x23); //Yth1
+    HI253WriteCmosSensor(0x79, 0x46); //Yth2 //46
+	HI253WriteCmosSensor(0x7a, 0x23); //23
+	HI253WriteCmosSensor(0x7b, 0x22); //22
+	HI253WriteCmosSensor(0x7d, 0x23);
+	HI253WriteCmosSensor(0x83, 0x01); //EXP Normal 33.33 fps 
+	HI253WriteCmosSensor(0x84, 0x7a); 
+	HI253WriteCmosSensor(0x85, 0x00); 
+	HI253WriteCmosSensor(0x86, 0x02); //EXPMin 5859.38 fps
+	HI253WriteCmosSensor(0x87, 0x00); 
+	HI253WriteCmosSensor(0x88, 0x04); //EXP Max 10.00 fps 
+	HI253WriteCmosSensor(0x89, 0xec); 
+	HI253WriteCmosSensor(0x8a, 0x00); 
+	HI253WriteCmosSensor(0x8B, 0x7e); //EXP100 
+	HI253WriteCmosSensor(0x8C, 0x00); 
+	HI253WriteCmosSensor(0x8D, 0x69); //EXP120 
+	HI253WriteCmosSensor(0x8E, 0x00); 
+	HI253WriteCmosSensor(0x9c, 0x0e); //EXP Limit 488.28 fps 
+	HI253WriteCmosSensor(0x9d, 0x00); 
+	HI253WriteCmosSensor(0x9e, 0x02); //EXP Unit 
+	HI253WriteCmosSensor(0x9f, 0x00);      
+	
+	HI253WriteCmosSensor(0xb0, 0x18);
+	HI253WriteCmosSensor(0xb1, 0x14); //ADC 400->560
+	HI253WriteCmosSensor(0xb2, 0xb0); //d0
+	HI253WriteCmosSensor(0xb3, 0x18);
+	HI253WriteCmosSensor(0xb4, 0x1a);
+	HI253WriteCmosSensor(0xb5, 0x44);
+	HI253WriteCmosSensor(0xb6, 0x2f);
+	HI253WriteCmosSensor(0xb7, 0x28);
+	HI253WriteCmosSensor(0xb8, 0x25);
+	HI253WriteCmosSensor(0xb9, 0x22);
+	HI253WriteCmosSensor(0xba, 0x21);
+	HI253WriteCmosSensor(0xbb, 0x20);
+	HI253WriteCmosSensor(0xbc, 0x1f);
+	HI253WriteCmosSensor(0xbd, 0x1f);
+	HI253WriteCmosSensor(0xc0, 0x14);
+	HI253WriteCmosSensor(0xc1, 0x1f);
+	HI253WriteCmosSensor(0xc2, 0x1f);
+	HI253WriteCmosSensor(0xc3, 0x18); //2b
+	HI253WriteCmosSensor(0xc4, 0x10); //08
+	HI253WriteCmosSensor(0xc8, 0x80);
+	HI253WriteCmosSensor(0xc9, 0x40);
+	
+	/////// PAGE 22 START ///////
+	HI253WriteCmosSensor(0x03, 0x22);
+	HI253WriteCmosSensor(0x10, 0xfd);
+	HI253WriteCmosSensor(0x11, 0x2e);
+	HI253WriteCmosSensor(0x19, 0x01); // Low On //
+	HI253WriteCmosSensor(0x20, 0x30);
+	HI253WriteCmosSensor(0x21, 0x80);
+	HI253WriteCmosSensor(0x24, 0x01);
+	HI253WriteCmosSensor(0x30, 0x80);
+	HI253WriteCmosSensor(0x31, 0x80);
+	HI253WriteCmosSensor(0x38, 0x11);
+	HI253WriteCmosSensor(0x39, 0x34);
+	HI253WriteCmosSensor(0x40, 0xf7); //
+	HI253WriteCmosSensor(0x41, 0x55); //44
+	HI253WriteCmosSensor(0x42, 0x33); //43
+	HI253WriteCmosSensor(0x43, 0xf6);
+	HI253WriteCmosSensor(0x44, 0x55); //44
+	HI253WriteCmosSensor(0x45, 0x44); //33
+	HI253WriteCmosSensor(0x46, 0x00);
+	HI253WriteCmosSensor(0x50, 0xb2);
+	HI253WriteCmosSensor(0x51, 0x81);
+	HI253WriteCmosSensor(0x52, 0x98);
+HI253WriteCmosSensor(0x80, 0x30);//40
+HI253WriteCmosSensor(0x81, 0x20);
+HI253WriteCmosSensor(0x82, 0x3e);
+HI253WriteCmosSensor(0x83, 0x53);
+HI253WriteCmosSensor(0x84, 0x16);//1E
+HI253WriteCmosSensor(0x85, 0x5A);//52
+HI253WriteCmosSensor(0x86, 0x25);
+HI253WriteCmosSensor(0x87, 0x49);
+HI253WriteCmosSensor(0x88, 0x35);
+HI253WriteCmosSensor(0x89, 0x47);
+HI253WriteCmosSensor(0x8a, 0x28);
+HI253WriteCmosSensor(0x8b, 0x41);
+HI253WriteCmosSensor(0x8c, 0x39);
+HI253WriteCmosSensor(0x8d, 0x3f);
+HI253WriteCmosSensor(0x8e, 0x28);
+HI253WriteCmosSensor(0x8f, 0x53);
+HI253WriteCmosSensor(0x90, 0x52);
+HI253WriteCmosSensor(0x91, 0x50);
+HI253WriteCmosSensor(0x92, 0x4c);
+HI253WriteCmosSensor(0x93, 0x43);
+HI253WriteCmosSensor(0x94, 0x37);
+HI253WriteCmosSensor(0x95, 0x2a);
+HI253WriteCmosSensor(0x96, 0x24);
+HI253WriteCmosSensor(0x97, 0x20);
+HI253WriteCmosSensor(0x98, 0x1e);
+HI253WriteCmosSensor(0x99, 0x1f);
+HI253WriteCmosSensor(0x9a, 0x20);
+HI253WriteCmosSensor(0x9b, 0x88);
+HI253WriteCmosSensor(0x9c, 0x88);
+	HI253WriteCmosSensor(0x9d, 0x48);
+	HI253WriteCmosSensor(0x9e, 0x38);
+	HI253WriteCmosSensor(0x9f, 0x30);
+	HI253WriteCmosSensor(0xa0, 0x60);
+	HI253WriteCmosSensor(0xa1, 0x34);
+	HI253WriteCmosSensor(0xa2, 0x6f);
+	HI253WriteCmosSensor(0xa3, 0xff);
+	HI253WriteCmosSensor(0xa4, 0x14); //1500fps
+	HI253WriteCmosSensor(0xa5, 0x2c); // 700fps
+	HI253WriteCmosSensor(0xa6, 0xcf);
+	HI253WriteCmosSensor(0xad, 0x40);
+	HI253WriteCmosSensor(0xae, 0x4a);
+	HI253WriteCmosSensor(0xaf, 0x28);  // low temp Rgain
+	HI253WriteCmosSensor(0xb0, 0x26);  // low temp Rgain
+	HI253WriteCmosSensor(0xb1, 0x00); //0x20 -> 0x00 0405 modify
+	HI253WriteCmosSensor(0xb8, 0xa0); //a2: b-2, R+2  //b4 B-3, R+4 lowtemp
+	HI253WriteCmosSensor(0xb9, 0x00);
+	
+	/////// PAGE 20 ///////
+	HI253WriteCmosSensor(0x03, 0x20);
+	HI253WriteCmosSensor(0x10, 0x8c);
+	
+	// PAGE 20
+	HI253WriteCmosSensor(0x03, 0x20); //page 20
+	HI253WriteCmosSensor(0x10, 0x9c); //ae off
+	
+	// PAGE 22
+	HI253WriteCmosSensor(0x03, 0x22); //page 22
+	HI253WriteCmosSensor(0x10, 0xe9); //awb off
+	
+	// PAGE 0
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x0e, 0x03); //PLL On
+	HI253WriteCmosSensor(0x0e, 0x73); //PLLx2
+	HI253WriteCmosSensor(0x03, 0x00); // Dummy 750us
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00);
+	HI253WriteCmosSensor(0x03, 0x00); // Page 0
+	HI253WriteCmosSensor(0x01, 0xf0); // Sleep Off
+	
+	return ERROR_NONE;
+
+
+}
+
+
+void HI253InitSetting(void)
+{
+  /*[SENSOR_INITIALIZATION]
+    DISP_DATE = "2010-11-24 "
+    DISP_WIDTH = 800
+    DISP_HEIGHT = 600
+    DISP_FORMAT = YUV422
+    DISP_DATAORDER = YUYV
+    MCLK = 26.00
+    PLL = 2.00  
+    BEGIN */
+SENSORDB("[MINGJI]HI253InitSetting() calling;\n");
+HI253_Init_Cmds();
+#if 0
+HI253WriteCmosSensor(0x01, 0x79); //sleep on
+HI253WriteCmosSensor(0x08, 0x0f); //Hi-Z on
+HI253WriteCmosSensor(0x01, 0x78); //sleep off
+
+HI253WriteCmosSensor(0x03, 0x00); // Dummy 750us START
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x03, 0x00); // Dummy 750us END
+
+HI253WriteCmosSensor(0x0e, 0x03); //PLL On
+HI253WriteCmosSensor(0x0e, 0x73); //PLLx2
+
+HI253WriteCmosSensor(0x03, 0x00); // Dummy 750us START
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x03, 0x00); // Dummy 750us END
+
+HI253WriteCmosSensor(0x0e, 0x00); //PLL off
+HI253WriteCmosSensor(0x01, 0x71); //sleep on
+HI253WriteCmosSensor(0x08, 0x00); //Hi-Z off
+
+HI253WriteCmosSensor(0x01, 0x73);
+HI253WriteCmosSensor(0x01, 0x71);
+
+// PAGE 20
+HI253WriteCmosSensor(0x03, 0x20); //page 20
+HI253WriteCmosSensor(0x10, 0x1c); //ae off
+
+// PAGE 22
+HI253WriteCmosSensor(0x03, 0x22); //page 22
+HI253WriteCmosSensor(0x10, 0x69); //awb off
+
+
+//Initial Start
+/////// PAGE 0 START ///////
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x10, 0x11); // Sub1/2_Preview2 Mode_H binning//Pre off
+HI253WriteCmosSensor(0x11, 0x90); //93 mj 90 Don't change //0x93 mj 27 0x90
+HI253WriteCmosSensor(0x12, 0x00);
+
+HI253WriteCmosSensor(0x0b, 0xaa); // ESD Check Register
+HI253WriteCmosSensor(0x0c, 0xaa); // ESD Check Register
+HI253WriteCmosSensor(0x0d, 0xaa); // ESD Check Register
+
+HI253WriteCmosSensor(0x20, 0x00); // Windowing start point Y
+HI253WriteCmosSensor(0x21, 0x04);
+HI253WriteCmosSensor(0x22, 0x00); // Windowing start point X
+HI253WriteCmosSensor(0x23, 0x07);
+
+HI253WriteCmosSensor(0x24, 0x04);
+HI253WriteCmosSensor(0x25, 0xb0);
+HI253WriteCmosSensor(0x26, 0x06);
+HI253WriteCmosSensor(0x27, 0x40); // WINROW END
+
+HI253WriteCmosSensor(0x40, 0x01); //Hblank 408//360
+HI253WriteCmosSensor(0x41, 0x68); //0x68 mj 27
+HI253WriteCmosSensor(0x42, 0x00); //Vblank 100//20
+HI253WriteCmosSensor(0x43, 0x14);
+
+HI253WriteCmosSensor(0x45, 0x04);
+HI253WriteCmosSensor(0x46, 0x18);
+HI253WriteCmosSensor(0x47, 0xd8);
+
+//BLC
+HI253WriteCmosSensor(0x80, 0x2e);
+HI253WriteCmosSensor(0x81, 0x7e);
+HI253WriteCmosSensor(0x82, 0x90);
+HI253WriteCmosSensor(0x83, 0x00);
+HI253WriteCmosSensor(0x84, 0x0c);
+HI253WriteCmosSensor(0x85, 0x00);
+HI253WriteCmosSensor(0x90, 0x0a); //BLC_TIME_TH_ON
+HI253WriteCmosSensor(0x91, 0x0a); //BLC_TIME_TH_OFF 
+HI253WriteCmosSensor(0x92, 0x98); //BLC_AG_TH_ON
+HI253WriteCmosSensor(0x93, 0x90); //BLC_AG_TH_OFF
+HI253WriteCmosSensor(0x94, 0x75);
+HI253WriteCmosSensor(0x95, 0x70);
+HI253WriteCmosSensor(0x96, 0xdc);
+HI253WriteCmosSensor(0x97, 0xfe);
+HI253WriteCmosSensor(0x98, 0x38);
+
+//OutDoor  BLC
+HI253WriteCmosSensor(0x99, 0x43);
+HI253WriteCmosSensor(0x9a, 0x43);
+HI253WriteCmosSensor(0x9b, 0x43);
+HI253WriteCmosSensor(0x9c, 0x43);
+
+//Dark BLC
+HI253WriteCmosSensor(0xa0, 0x48);
+HI253WriteCmosSensor(0xa2, 0x48);
+HI253WriteCmosSensor(0xa4, 0x48);
+HI253WriteCmosSensor(0xa6, 0x48);//48//modify-2012-04-26
+
+//Normal BLC
+HI253WriteCmosSensor(0xa8, 0x43);
+HI253WriteCmosSensor(0xaa, 0x43);
+HI253WriteCmosSensor(0xac, 0x43);
+HI253WriteCmosSensor(0xae, 0x43);
+
+HI253WriteCmosSensor(0x03, 0x02); //Page 02
+HI253WriteCmosSensor(0x10, 0x00); //Mode_test
+HI253WriteCmosSensor(0x11, 0x00); //Mode_dead_test
+HI253WriteCmosSensor(0x12, 0x03); //pwr_ctl_ctl1
+HI253WriteCmosSensor(0x13, 0x03); //Mode_ana_test
+HI253WriteCmosSensor(0x14, 0x00); //mode_memory
+HI253WriteCmosSensor(0x16, 0x00); //dcdc_ctl1
+HI253WriteCmosSensor(0x17, 0x8c); //dcdc_ctl2
+HI253WriteCmosSensor(0x18, 0x4C); //analog_func1
+HI253WriteCmosSensor(0x19, 0x00); //analog_func2
+HI253WriteCmosSensor(0x1a, 0x39); //analog_func3
+HI253WriteCmosSensor(0x1b, 0x00); //analog_func4
+HI253WriteCmosSensor(0x1c, 0x09); //dcdc_ctl3
+HI253WriteCmosSensor(0x1d, 0x40); //dcdc_ctl4
+HI253WriteCmosSensor(0x1e, 0x30); //analog_func7
+HI253WriteCmosSensor(0x1f, 0x10); //analog_func8
+HI253WriteCmosSensor(0x20, 0x77); //pixel bias
+HI253WriteCmosSensor(0x21, 0xde); //adc,asp bias
+HI253WriteCmosSensor(0x22, 0xa7); //main,bus bias
+HI253WriteCmosSensor(0x23, 0x30); //clamp
+HI253WriteCmosSensor(0x24, 0x4a);		
+HI253WriteCmosSensor(0x25, 0x10);		
+HI253WriteCmosSensor(0x27, 0x3c);		
+HI253WriteCmosSensor(0x28, 0x00);		
+HI253WriteCmosSensor(0x29, 0x0c);		
+HI253WriteCmosSensor(0x2a, 0x80);		
+HI253WriteCmosSensor(0x2b, 0x80);		
+HI253WriteCmosSensor(0x2c, 0x02);		
+HI253WriteCmosSensor(0x2d, 0xa0);		
+HI253WriteCmosSensor(0x2e, 0x00); // 0x11->0x00 [20110809 update]
+HI253WriteCmosSensor(0x2f, 0x00);// 0xa1->0x00 [20110809 update]		
+HI253WriteCmosSensor(0x30, 0x05); //swap_ctl
+HI253WriteCmosSensor(0x31, 0x99);		
+HI253WriteCmosSensor(0x32, 0x00);		
+HI253WriteCmosSensor(0x33, 0x00);		
+HI253WriteCmosSensor(0x34, 0x22);		
+HI253WriteCmosSensor(0x38, 0x88);		
+HI253WriteCmosSensor(0x39, 0x88);		
+HI253WriteCmosSensor(0x50, 0x20);		
+HI253WriteCmosSensor(0x51, 0x03);		
+HI253WriteCmosSensor(0x52, 0x01);		
+HI253WriteCmosSensor(0x53, 0xc1);		
+HI253WriteCmosSensor(0x54, 0x10);		
+HI253WriteCmosSensor(0x55, 0x1c);		
+HI253WriteCmosSensor(0x56, 0x11);		
+HI253WriteCmosSensor(0x58, 0x10);		
+HI253WriteCmosSensor(0x59, 0x0e);		
+HI253WriteCmosSensor(0x5d, 0xa2);		
+HI253WriteCmosSensor(0x5e, 0x5a);		
+HI253WriteCmosSensor(0x60, 0x87);		
+HI253WriteCmosSensor(0x61, 0x99);		
+HI253WriteCmosSensor(0x62, 0x88);		
+HI253WriteCmosSensor(0x63, 0x97);		
+HI253WriteCmosSensor(0x64, 0x88);		
+HI253WriteCmosSensor(0x65, 0x97);		
+HI253WriteCmosSensor(0x67, 0x0c);		
+HI253WriteCmosSensor(0x68, 0x0c);		
+HI253WriteCmosSensor(0x69, 0x0c);		
+HI253WriteCmosSensor(0x6a, 0xb4);		
+HI253WriteCmosSensor(0x6b, 0xc4);		
+HI253WriteCmosSensor(0x6c, 0xb5);		
+HI253WriteCmosSensor(0x6d, 0xc2);		
+HI253WriteCmosSensor(0x6e, 0xb5);		
+HI253WriteCmosSensor(0x6f, 0xc0);		
+HI253WriteCmosSensor(0x70, 0xb6);		
+HI253WriteCmosSensor(0x71, 0xb8);		
+HI253WriteCmosSensor(0x72, 0x89);		
+HI253WriteCmosSensor(0x73, 0x96);		
+HI253WriteCmosSensor(0x74, 0x89);		
+HI253WriteCmosSensor(0x75, 0x96);		
+HI253WriteCmosSensor(0x76, 0x89);		
+HI253WriteCmosSensor(0x77, 0x96);		
+HI253WriteCmosSensor(0x7c, 0x85);		
+HI253WriteCmosSensor(0x7d, 0xaf);		
+HI253WriteCmosSensor(0x80, 0x01);		
+HI253WriteCmosSensor(0x81, 0x7f);		
+HI253WriteCmosSensor(0x82, 0x13); //rx_on1_read
+HI253WriteCmosSensor(0x83, 0x24);		
+HI253WriteCmosSensor(0x84, 0x7d);
+HI253WriteCmosSensor(0x85, 0x81);
+HI253WriteCmosSensor(0x86, 0x7d);
+HI253WriteCmosSensor(0x87, 0x81);		
+HI253WriteCmosSensor(0x88, 0xab);		
+HI253WriteCmosSensor(0x89, 0xbc);		
+HI253WriteCmosSensor(0x8a, 0xac);		
+HI253WriteCmosSensor(0x8b, 0xba);		
+HI253WriteCmosSensor(0x8c, 0xad);		
+HI253WriteCmosSensor(0x8d, 0xb8);		
+HI253WriteCmosSensor(0x8e, 0xae);		
+HI253WriteCmosSensor(0x8f, 0xb2);		
+HI253WriteCmosSensor(0x90, 0xb3);		
+HI253WriteCmosSensor(0x91, 0xb7);		
+HI253WriteCmosSensor(0x92, 0x48);		
+HI253WriteCmosSensor(0x93, 0x54);		
+HI253WriteCmosSensor(0x94, 0x7d);
+HI253WriteCmosSensor(0x95, 0x81);
+HI253WriteCmosSensor(0x96, 0x7d);
+HI253WriteCmosSensor(0x97, 0x81);
+HI253WriteCmosSensor(0xa0, 0x02);
+HI253WriteCmosSensor(0xa1, 0x7b);
+HI253WriteCmosSensor(0xa2, 0x02);
+HI253WriteCmosSensor(0xa3, 0x7b);
+HI253WriteCmosSensor(0xa4, 0x7b);
+HI253WriteCmosSensor(0xa5, 0x02);
+HI253WriteCmosSensor(0xa6, 0x7b);
+HI253WriteCmosSensor(0xa7, 0x02);
+HI253WriteCmosSensor(0xa8, 0x85);
+HI253WriteCmosSensor(0xa9, 0x8c);
+HI253WriteCmosSensor(0xaa, 0x85);		
+HI253WriteCmosSensor(0xab, 0x8c);
+HI253WriteCmosSensor(0xac, 0x10); //Rx_pwr_off1_read
+HI253WriteCmosSensor(0xad, 0x16); //Rx_pwr_on1_read
+HI253WriteCmosSensor(0xae, 0x10); //Rx_pwr_off2_read
+HI253WriteCmosSensor(0xaf, 0x16); //Rx_pwr_on1_read
+HI253WriteCmosSensor(0xb0, 0x99);
+HI253WriteCmosSensor(0xb1, 0xa3);
+HI253WriteCmosSensor(0xb2, 0xa4);
+HI253WriteCmosSensor(0xb3, 0xae);
+HI253WriteCmosSensor(0xb4, 0x9b);
+HI253WriteCmosSensor(0xb5, 0xa2);
+HI253WriteCmosSensor(0xb6, 0xa6);
+HI253WriteCmosSensor(0xb7, 0xac);
+HI253WriteCmosSensor(0xb8, 0x9b);
+HI253WriteCmosSensor(0xb9, 0x9f);
+HI253WriteCmosSensor(0xba, 0xa6);
+HI253WriteCmosSensor(0xbb, 0xaa);
+HI253WriteCmosSensor(0xbc, 0x9b);
+HI253WriteCmosSensor(0xbd, 0x9f);
+HI253WriteCmosSensor(0xbe, 0xa6);
+HI253WriteCmosSensor(0xbf, 0xaa);		
+HI253WriteCmosSensor(0xc4, 0x2c);		
+HI253WriteCmosSensor(0xc5, 0x43);		
+HI253WriteCmosSensor(0xc6, 0x63);		
+HI253WriteCmosSensor(0xc7, 0x79);		
+HI253WriteCmosSensor(0xc8, 0x2d);		
+HI253WriteCmosSensor(0xc9, 0x42);		
+HI253WriteCmosSensor(0xca, 0x2d);		
+HI253WriteCmosSensor(0xcb, 0x42);		
+HI253WriteCmosSensor(0xcc, 0x64);		
+HI253WriteCmosSensor(0xcd, 0x78);		
+HI253WriteCmosSensor(0xce, 0x64);		
+HI253WriteCmosSensor(0xcf, 0x78);		
+HI253WriteCmosSensor(0xd0, 0x0a);		
+HI253WriteCmosSensor(0xd1, 0x09);		
+HI253WriteCmosSensor(0xd2, 0x20);		
+HI253WriteCmosSensor(0xd3, 0x00);	
+	
+HI253WriteCmosSensor(0xd4, 0x0a);		
+HI253WriteCmosSensor(0xd5, 0x0a);		
+HI253WriteCmosSensor(0xd6, 0x98);		
+HI253WriteCmosSensor(0xd7, 0x90);
+		
+HI253WriteCmosSensor(0xe0, 0xc4);		
+HI253WriteCmosSensor(0xe1, 0xc4);		
+HI253WriteCmosSensor(0xe2, 0xc4);		
+HI253WriteCmosSensor(0xe3, 0xc4);		
+HI253WriteCmosSensor(0xe4, 0x00);		
+HI253WriteCmosSensor(0xe8, 0x80);		
+HI253WriteCmosSensor(0xe9, 0x40);		
+HI253WriteCmosSensor(0xea, 0x7f);		
+HI253WriteCmosSensor(0xf0, 0x01); //sram1_cfg
+HI253WriteCmosSensor(0xf1, 0x01); //sram2_cfg
+HI253WriteCmosSensor(0xf2, 0x01); //sram3_cfg
+HI253WriteCmosSensor(0xf3, 0x01); //sram4_cfg
+HI253WriteCmosSensor(0xf4, 0x01); //sram5_cfg
+
+/////// PAGE 3 ///////
+HI253WriteCmosSensor(0x03, 0x03);
+HI253WriteCmosSensor(0x10, 0x10);
+
+/////// PAGE 10 START ///////
+HI253WriteCmosSensor(0x03, 0x10);
+HI253WriteCmosSensor(0x10, 0x01); // CrYCbY // For Demoset 0x03
+HI253WriteCmosSensor(0x12, 0x30);
+HI253WriteCmosSensor(0x13, 0x0a); // contrast on
+HI253WriteCmosSensor(0x20, 0x00);
+
+HI253WriteCmosSensor(0x30, 0x00);
+HI253WriteCmosSensor(0x31, 0x00);
+HI253WriteCmosSensor(0x32, 0x00);
+HI253WriteCmosSensor(0x33, 0x00);
+
+HI253WriteCmosSensor(0x34, 0x30);
+HI253WriteCmosSensor(0x35, 0x00);
+HI253WriteCmosSensor(0x36, 0x00);
+HI253WriteCmosSensor(0x38, 0x00);
+HI253WriteCmosSensor(0x3e, 0x58);
   HI253WriteCmosSensor(0x3f, 0x02); // 0x02 for preview and 0x00 for capture
+	//HI253WriteCmosSensor(0x40, 0x80); // YOFS
   HI253WriteCmosSensor(0x40, 0x85); // YOFS modify brightness
   HI253WriteCmosSensor(0x41, 0x00); // DYOFS
+	HI253WriteCmosSensor(0x48, 0x90);
 
-  //Saturation;
-  HI253WriteCmosSensor(0x60, 0x6f); // SATCTL
-  HI253WriteCmosSensor(0x61, 0x76); // SATB
-  HI253WriteCmosSensor(0x62, 0x76); // SATR
-  HI253WriteCmosSensor(0x63, 0x30); // AGSAT
+	HI253WriteCmosSensor(0x60, 0x67); // SATCTL//2012-4-26-modify
+	HI253WriteCmosSensor(0x61, 0x89); // SATB//2012-4-26-modify
+	HI253WriteCmosSensor(0x62, 0x82); // SATR//2012-4-26-modify//82
+	HI253WriteCmosSensor(0x63, 0x60); // AGSAT
   HI253WriteCmosSensor(0x64, 0x41);
   HI253WriteCmosSensor(0x66, 0x33); // SATTIMETH
   HI253WriteCmosSensor(0x67, 0x00); // SATOUTDEL
@@ -380,11 +1508,14 @@
   HI253WriteCmosSensor(0x6b, 0x80); // UNEGSAT
   HI253WriteCmosSensor(0x6c, 0x80); // VPOSSAT
   HI253WriteCmosSensor(0x6d, 0xa0); // VNEGSAT
-  HI253WriteCmosSensor(0x76, 0x01); // white protection ON
+	HI253WriteCmosSensor(0x75, 0x80); //sat-over control
+	HI253WriteCmosSensor(0x76, 0x11); // white protection ON
+	HI253WriteCmosSensor(0x77, 0x15); //sat_wht_radio 1x
   HI253WriteCmosSensor(0x74, 0x66);
   HI253WriteCmosSensor(0x79, 0x06);
 
-  HI253SetPage(0x11);
+
+	HI253WriteCmosSensor(0x03, 0x11); // Page 11
   HI253WriteCmosSensor(0x10, 0x3f); // DLPFCTL1
   HI253WriteCmosSensor(0x11, 0x40);
   HI253WriteCmosSensor(0x12, 0xba);
@@ -407,31 +1538,33 @@
   //Out1 D-LPF th
   HI253WriteCmosSensor(0x36, 0x70); // OUT1YBOUNDH
   HI253WriteCmosSensor(0x37, 0x18); // OUT1YBOUNDL
-  HI253WriteCmosSensor(0x38, 0x65); // OUT1RATIO
+	HI253WriteCmosSensor(0x38, 0x58); // OUT1RATIO
   HI253WriteCmosSensor(0x39, 0x09); // OUT1THH
   HI253WriteCmosSensor(0x3a, 0x06); // OUT1THM
   HI253WriteCmosSensor(0x3b, 0x04); // OUT1THL
 
   //Indoor D-LPF th
-  HI253WriteCmosSensor(0x3c, 0x80); // INYBOUNDH
+	HI253WriteCmosSensor(0x3c, 0x80); // INYBOUNDH//80
   HI253WriteCmosSensor(0x3d, 0x18); // INYBOUNDL
-  HI253WriteCmosSensor(0x3e, 0x80); // INRATIO
-  HI253WriteCmosSensor(0x3f, 0x0c); // INTHH
+	HI253WriteCmosSensor(0x3e, 0xa0); // INRATIO
+	HI253WriteCmosSensor(0x3f, 0x0c); // INTHH//0c
   HI253WriteCmosSensor(0x40, 0x09); // INTHM
-  HI253WriteCmosSensor(0x41, 0x06); // INTHL
+	HI253WriteCmosSensor(0x41, 0x06); // INTHL//06
 
-  HI253WriteCmosSensor(0x42, 0x80); // DARK1YBOUNDH
+	HI253WriteCmosSensor(0x42, 0x80); // DARK1YBOUNDH//80
   HI253WriteCmosSensor(0x43, 0x18); // DARK1YBOUNDL
-  HI253WriteCmosSensor(0x44, 0x80); // DARK1RATIO
-  HI253WriteCmosSensor(0x45, 0x12); // DARK1THH
+	HI253WriteCmosSensor(0x44, 0xa0); // DARK1RATIO
+	HI253WriteCmosSensor(0x45, 0x12); // DARK1THH//12
   HI253WriteCmosSensor(0x46, 0x10); // DARK1THM
-  HI253WriteCmosSensor(0x47, 0x10); // DARK1THL
-  HI253WriteCmosSensor(0x48, 0x90); // DARK2YBOUNDH
+	HI253WriteCmosSensor(0x47, 0x10); // DARK1THL//10
+	
+	HI253WriteCmosSensor(0x48, 0x90); // DARK2YBOUNDH//90
   HI253WriteCmosSensor(0x49, 0x40); // DARK2YBOUNDL
   HI253WriteCmosSensor(0x4a, 0x80); // DARK2RATIO
-  HI253WriteCmosSensor(0x4b, 0x13); // DARK2THH
+	HI253WriteCmosSensor(0x4b, 0x13); // DARK2THH//13
   HI253WriteCmosSensor(0x4c, 0x10); // DARK2THM
-  HI253WriteCmosSensor(0x4d, 0x11); // DARK2THL
+	HI253WriteCmosSensor(0x4d, 0x11); // DARK2THL//11
+	
   HI253WriteCmosSensor(0x4e, 0x80); // DARK3YBOUNDH
   HI253WriteCmosSensor(0x4f, 0x30); // DARK3YBOUNDL
   HI253WriteCmosSensor(0x50, 0x80); // DARK3RATIO
@@ -451,7 +1584,7 @@
   HI253WriteCmosSensor(0x62, 0x50);
   HI253WriteCmosSensor(0x70, 0x06);
 
-  HI253SetPage(0x12); 
+	HI253WriteCmosSensor(0x03, 0x12); // Page 12
   HI253WriteCmosSensor(0x20, 0x00); // YCLPFCTL1 0x00 for preview and 0x0f for capture
   HI253WriteCmosSensor(0x21, 0x00); // YCLPFCTL2 0x00 for preview and 0x0f for capture
   HI253WriteCmosSensor(0x25, 0x30);
@@ -488,25 +1621,25 @@
   HI253WriteCmosSensor(0x4c, 0xb0); // YCINTHH
   HI253WriteCmosSensor(0x4d, 0x40); // YCINTHL
   HI253WriteCmosSensor(0x4e, 0x90); // YCINSTDH
-  HI253WriteCmosSensor(0x4f, 0x90); // YCINSTDM
+	HI253WriteCmosSensor(0x4f, 0xa0); // YCINSTDM
   HI253WriteCmosSensor(0x50, 0xe6); // YCINSTDL
   HI253WriteCmosSensor(0x51, 0x80); // YCINRAT
 
   //Dark1 th
-  HI253WriteCmosSensor(0x52, 0xb0); // YCDARK1THH
-  HI253WriteCmosSensor(0x53, 0x60); // YCDARK1THL
-  HI253WriteCmosSensor(0x54, 0xc0); // YCDARK1STDH
+	HI253WriteCmosSensor(0x52, 0x00); // YCDARK1THH
+	HI253WriteCmosSensor(0x53, 0x50); // YCDARK1THL
+	HI253WriteCmosSensor(0x54, 0xd4); // YCDARK1STDH
   HI253WriteCmosSensor(0x55, 0xc0); // YCDARK1STDM
-  HI253WriteCmosSensor(0x56, 0xc0); // YCDARK1STDL
-  HI253WriteCmosSensor(0x57, 0x80); // YCDARK1RAT
+	HI253WriteCmosSensor(0x56, 0x70); // YCDARK1STDL
+	HI253WriteCmosSensor(0x57, 0xec); // YCDARK1RAT
 
   //Dark2 th
   HI253WriteCmosSensor(0x58, 0x90); // YCDARK2THH
   HI253WriteCmosSensor(0x59, 0x40); // YCDARK2THL
   HI253WriteCmosSensor(0x5a, 0xd0); // YCDARK2STDH
-  HI253WriteCmosSensor(0x5b, 0xd0); // YCDARK2STDM
-  HI253WriteCmosSensor(0x5c, 0xe0); // YCDARK2STDL
-  HI253WriteCmosSensor(0x5d, 0x80); // YCDARK2RAT
+	HI253WriteCmosSensor(0x5b, 0xe0); // YCDARK2STDM
+	HI253WriteCmosSensor(0x5c, 0xf0); // YCDARK2STDL
+	HI253WriteCmosSensor(0x5d, 0xc0); // YCDARK2RAT
 
   //Dark3 th
   HI253WriteCmosSensor(0x5e, 0x88); // YCDARK3THH
@@ -545,158 +1678,164 @@
   HI253WriteCmosSensor(0xD6, 0xff);
   HI253WriteCmosSensor(0xD7, 0x18);
 
-  HI253SetPage(0x13); 
-  HI253WriteCmosSensor(0x10, 0xcb); // EDGECTL1
-  HI253WriteCmosSensor(0x11, 0x7b); // EDGECTL2
-  HI253WriteCmosSensor(0x12, 0x07); // EDGECTL3
-  HI253WriteCmosSensor(0x14, 0x00); // EDGECTL5
-
-  HI253WriteCmosSensor(0x20, 0x15); // EDGENGAIN
-  HI253WriteCmosSensor(0x21, 0x13); // EDGEPGAIN
-  HI253WriteCmosSensor(0x22, 0x33);
-  HI253WriteCmosSensor(0x23, 0x04); // EDGEHCLIP1TH
-  HI253WriteCmosSensor(0x24, 0x09); // EDGEHCLIP2TH
-  HI253WriteCmosSensor(0x25, 0x08); // EDGELCLIPTH
-  HI253WriteCmosSensor(0x26, 0x18); // EDGELCLIPLMT
-  HI253WriteCmosSensor(0x27, 0x30);
-  HI253WriteCmosSensor(0x29, 0x12); // EDGETIMETH
-  HI253WriteCmosSensor(0x2a, 0x50); // EDGEAGTH
-
-  //Low clip th
-  HI253WriteCmosSensor(0x2b, 0x06);
-  HI253WriteCmosSensor(0x2c, 0x06);
-  HI253WriteCmosSensor(0x25, 0x08);
-  HI253WriteCmosSensor(0x2d, 0x0c);
-  HI253WriteCmosSensor(0x2e, 0x12);
-  HI253WriteCmosSensor(0x2f, 0x12);
+       /////// PAGE 13 START ///////
+HI253WriteCmosSensor(0x03, 0x13);
+//Edge
+HI253WriteCmosSensor(0x10, 0xcb);
+HI253WriteCmosSensor(0x11, 0x7b);
+HI253WriteCmosSensor(0x12, 0x07);
+HI253WriteCmosSensor(0x14, 0x00);
+
+HI253WriteCmosSensor(0x20, 0x15);
+HI253WriteCmosSensor(0x21, 0x13);
+HI253WriteCmosSensor(0x22, 0x33);
+HI253WriteCmosSensor(0x23, 0x05);
+HI253WriteCmosSensor(0x24, 0x19);//modify-2012-04-26
+
+HI253WriteCmosSensor(0x25, 0x0a);
+
+HI253WriteCmosSensor(0x26, 0x18);
+HI253WriteCmosSensor(0x27, 0x30);
+HI253WriteCmosSensor(0x29, 0x12);
+HI253WriteCmosSensor(0x2a, 0x50);
+
+//Low clip th
+HI253WriteCmosSensor(0x2b, 0x00); //Out2 02
+HI253WriteCmosSensor(0x2c, 0x00); //Out1 02 //01
+HI253WriteCmosSensor(0x25, 0x06);
+HI253WriteCmosSensor(0x2d, 0x0c);
+HI253WriteCmosSensor(0x2e, 0x12);
+HI253WriteCmosSensor(0x2f, 0x12);
+
+//Out2 Edge
+HI253WriteCmosSensor(0x50, 0x18); //0x10 //0x16
+HI253WriteCmosSensor(0x51, 0x1c); //0x14 //0x1a
+HI253WriteCmosSensor(0x52, 0x1a); //0x12 //0x18
+HI253WriteCmosSensor(0x53, 0x14); //0x0c //0x12
+HI253WriteCmosSensor(0x54, 0x17); //0x0f //0x15
+HI253WriteCmosSensor(0x55, 0x14); //0x0c //0x12
+
+//Out1 Edge          //Edge
+HI253WriteCmosSensor(0x56, 0x18); //0x10 //0x16//28
+HI253WriteCmosSensor(0x57, 0x25); //0x13 //0x1a
+HI253WriteCmosSensor(0x58, 0x10); //0x12 //0x18//20
+HI253WriteCmosSensor(0x59, 0x15); //0x0c //0x12
+HI253WriteCmosSensor(0x5a, 0x25); //0x0f //0x15//2012-4-26-modify
+HI253WriteCmosSensor(0x5b, 0x18); //0x0c //0x12//28
+
+//Indoor Edge
+HI253WriteCmosSensor(0x5c, 0x0b);//28
+HI253WriteCmosSensor(0x5d, 0x30);//modify-2012-04-26
+HI253WriteCmosSensor(0x5e, 0x0a);//20
+HI253WriteCmosSensor(0x5f, 0x09);//0x20
+HI253WriteCmosSensor(0x60, 0x38);//0x09//modify-2012-04-26
+HI253WriteCmosSensor(0x61, 0x08);//0x08//20
+
+//Dark1 Edge
+HI253WriteCmosSensor(0x62, 0x08);//08
+HI253WriteCmosSensor(0x63, 0x28);//modify-2012-04-26
+HI253WriteCmosSensor(0x64, 0x08);//08
+HI253WriteCmosSensor(0x65, 0x08);//0x06//0e
+HI253WriteCmosSensor(0x66, 0x2e);//0x06//modify-2012-04-26
+HI253WriteCmosSensor(0x67, 0x08);//0x06//0e//18
+
+//Dark2 Edge
+HI253WriteCmosSensor(0x68, 0x07);
+HI253WriteCmosSensor(0x69, 0x07);
+HI253WriteCmosSensor(0x6a, 0x07);
+HI253WriteCmosSensor(0x6b, 0x05);
+HI253WriteCmosSensor(0x6c, 0x05);
+HI253WriteCmosSensor(0x6d, 0x05);
+
+//Dark3 Edge
+HI253WriteCmosSensor(0x6e, 0x07);
+HI253WriteCmosSensor(0x6f, 0x07);
+HI253WriteCmosSensor(0x70, 0x07);
+HI253WriteCmosSensor(0x71, 0x05);
+HI253WriteCmosSensor(0x72, 0x05);
+HI253WriteCmosSensor(0x73, 0x05);
+
+//2DY
+HI253WriteCmosSensor(0x80, 0xfd);
+HI253WriteCmosSensor(0x81, 0x1f);
+HI253WriteCmosSensor(0x82, 0x05);
+HI253WriteCmosSensor(0x83, 0x31);
+
+HI253WriteCmosSensor(0x90, 0x05);
+HI253WriteCmosSensor(0x91, 0x05);
+HI253WriteCmosSensor(0x92, 0x33);
+HI253WriteCmosSensor(0x93, 0x30);
+HI253WriteCmosSensor(0x94, 0x03);
+HI253WriteCmosSensor(0x95, 0x14);
+HI253WriteCmosSensor(0x97, 0x20);
+HI253WriteCmosSensor(0x99, 0x20);
+
+HI253WriteCmosSensor(0xa0, 0x01);
+HI253WriteCmosSensor(0xa1, 0x02);
+HI253WriteCmosSensor(0xa2, 0x01);
+HI253WriteCmosSensor(0xa3, 0x02);
+HI253WriteCmosSensor(0xa4, 0x05);
+HI253WriteCmosSensor(0xa5, 0x05);
+HI253WriteCmosSensor(0xa6, 0x07);
+HI253WriteCmosSensor(0xa7, 0x08);
+HI253WriteCmosSensor(0xa8, 0x07);
+HI253WriteCmosSensor(0xa9, 0x08);
+HI253WriteCmosSensor(0xaa, 0x07);
+HI253WriteCmosSensor(0xab, 0x08);
+
+//Out2 
+HI253WriteCmosSensor(0xb0, 0x22);
+HI253WriteCmosSensor(0xb1, 0x2a);
+HI253WriteCmosSensor(0xb2, 0x28);
+HI253WriteCmosSensor(0xb3, 0x22);
+HI253WriteCmosSensor(0xb4, 0x2a);
+HI253WriteCmosSensor(0xb5, 0x28);
+
+//Out1 
+HI253WriteCmosSensor(0xb6, 0x22);
+HI253WriteCmosSensor(0xb7, 0x3a);
+HI253WriteCmosSensor(0xb8, 0x28);
+HI253WriteCmosSensor(0xb9, 0x22);
+HI253WriteCmosSensor(0xba, 0x3a);
+HI253WriteCmosSensor(0xbb, 0x28);
+
+//Indoor 
+HI253WriteCmosSensor(0xbc, 0x25);
+HI253WriteCmosSensor(0xbd, 0x3a);
+HI253WriteCmosSensor(0xbe, 0x27);
+HI253WriteCmosSensor(0xbf, 0x25);
+HI253WriteCmosSensor(0xc0, 0x3a);
+HI253WriteCmosSensor(0xc1, 0x27);
+
+//Dark1
+HI253WriteCmosSensor(0xc2, 0x1e);
+HI253WriteCmosSensor(0xc3, 0x24);
+HI253WriteCmosSensor(0xc4, 0x20);
+HI253WriteCmosSensor(0xc5, 0x1e);
+HI253WriteCmosSensor(0xc6, 0x24);
+HI253WriteCmosSensor(0xc7, 0x20);
+
+//Dark2
+HI253WriteCmosSensor(0xc8, 0x18);
+HI253WriteCmosSensor(0xc9, 0x20);
+HI253WriteCmosSensor(0xca, 0x1e);
+HI253WriteCmosSensor(0xcb, 0x18);
+HI253WriteCmosSensor(0xcc, 0x20);
+HI253WriteCmosSensor(0xcd, 0x1e);
+
+//Dark3 
+HI253WriteCmosSensor(0xce, 0x18);
+HI253WriteCmosSensor(0xcf, 0x20);
+HI253WriteCmosSensor(0xd0, 0x1e);
+HI253WriteCmosSensor(0xd1, 0x18);
+HI253WriteCmosSensor(0xd2, 0x20);
+HI253WriteCmosSensor(0xd3, 0x1e);
 
-  //Out2 Edge
-  HI253WriteCmosSensor(0x50, 0x10);
-  HI253WriteCmosSensor(0x51, 0x14);
-  HI253WriteCmosSensor(0x52, 0x10);
-  HI253WriteCmosSensor(0x53, 0x0c);
-  HI253WriteCmosSensor(0x54, 0x0f);
-  HI253WriteCmosSensor(0x55, 0x0c);
-
-  //Out1 Edge
-  HI253WriteCmosSensor(0x56, 0x10);
-  HI253WriteCmosSensor(0x57, 0x13);
-  HI253WriteCmosSensor(0x58, 0x10);
-  HI253WriteCmosSensor(0x59, 0x0c);
-  HI253WriteCmosSensor(0x5a, 0x0f);
-  HI253WriteCmosSensor(0x5b, 0x0c);
-
-  //Indoor Edg 
-  HI253WriteCmosSensor(0x5c, 0x0a);
-  HI253WriteCmosSensor(0x5d, 0x0b);
-  HI253WriteCmosSensor(0x5e, 0x0a);
-  HI253WriteCmosSensor(0x5f, 0x08);
-  HI253WriteCmosSensor(0x60, 0x09);
-  HI253WriteCmosSensor(0x61, 0x08);
-
-  //Dark1 Edge
-  HI253WriteCmosSensor(0x62, 0x08);
-  HI253WriteCmosSensor(0x63, 0x08);
-  HI253WriteCmosSensor(0x64, 0x08);
-  HI253WriteCmosSensor(0x65, 0x06);
-  HI253WriteCmosSensor(0x66, 0x06);
-  HI253WriteCmosSensor(0x67, 0x06);
-
-  //Dark2 Edge
-  HI253WriteCmosSensor(0x68, 0x07);
-  HI253WriteCmosSensor(0x69, 0x07);
-  HI253WriteCmosSensor(0x6a, 0x07);
-  HI253WriteCmosSensor(0x6b, 0x05);
-  HI253WriteCmosSensor(0x6c, 0x05);
-  HI253WriteCmosSensor(0x6d, 0x05);
-
-  //Dark3 Edge
-  HI253WriteCmosSensor(0x6e, 0x07);
-  HI253WriteCmosSensor(0x6f, 0x07);
-  HI253WriteCmosSensor(0x70, 0x07);
-  HI253WriteCmosSensor(0x71, 0x05);
-  HI253WriteCmosSensor(0x72, 0x05);
-  HI253WriteCmosSensor(0x73, 0x05);
-
-  //2DY 
-  HI253WriteCmosSensor(0x80, 0x00); // EDGE2DCTL1 00 for preview, must turn on 2DY 0xfd when capture
-  HI253WriteCmosSensor(0x81, 0x1f); // EDGE2DCTL2
-  HI253WriteCmosSensor(0x82, 0x05); // EDGE2DCTL3
-  HI253WriteCmosSensor(0x83, 0x01); // EDGE2DCTL4
-
-  HI253WriteCmosSensor(0x90, 0x05); // EDGE2DNGAIN
-  HI253WriteCmosSensor(0x91, 0x05); // EDGE2DPGAIN
-  HI253WriteCmosSensor(0x92, 0x33); // EDGE2DLCLIPLMT
-  HI253WriteCmosSensor(0x93, 0x30);
-  HI253WriteCmosSensor(0x94, 0x03); // EDGE2DHCLIP1TH
-  HI253WriteCmosSensor(0x95, 0x14); // EDGE2DHCLIP2TH
-  HI253WriteCmosSensor(0x97, 0x30);
-  HI253WriteCmosSensor(0x99, 0x30);
-
-  HI253WriteCmosSensor(0xa0, 0x04); // EDGE2DLCOUT2N
-  HI253WriteCmosSensor(0xa1, 0x05); // EDGE2DLCOUT2P
-  HI253WriteCmosSensor(0xa2, 0x04); // EDGE2DLCOUT1N
-  HI253WriteCmosSensor(0xa3, 0x05); // EDGE2DLCOUT1P
-  HI253WriteCmosSensor(0xa4, 0x07); // EDGE2DLCINN
-  HI253WriteCmosSensor(0xa5, 0x08); // EDGE2DLCINP
-  HI253WriteCmosSensor(0xa6, 0x07); // EDGE2DLCD1N
-  HI253WriteCmosSensor(0xa7, 0x08); // EDGE2DLCD1P
-  HI253WriteCmosSensor(0xa8, 0x07); // EDGE2DLCD2N
-  HI253WriteCmosSensor(0xa9, 0x08); // EDGE2DLCD2P
-  HI253WriteCmosSensor(0xaa, 0x07); // EDGE2DLCD3N
-  HI253WriteCmosSensor(0xab, 0x08); // EDGE2DLCD3P
-
-  //Out2
-  HI253WriteCmosSensor(0xb0, 0x22);
-  HI253WriteCmosSensor(0xb1, 0x2a);
-  HI253WriteCmosSensor(0xb2, 0x28);
-  HI253WriteCmosSensor(0xb3, 0x22);
-  HI253WriteCmosSensor(0xb4, 0x2a);
-  HI253WriteCmosSensor(0xb5, 0x28);
-
-  //Out1
-  HI253WriteCmosSensor(0xb6, 0x22);
-  HI253WriteCmosSensor(0xb7, 0x2a);
-  HI253WriteCmosSensor(0xb8, 0x28);
-  HI253WriteCmosSensor(0xb9, 0x22);
-  HI253WriteCmosSensor(0xba, 0x2a);
-  HI253WriteCmosSensor(0xbb, 0x28);
-
-  HI253WriteCmosSensor(0xbc, 0x17);
-  HI253WriteCmosSensor(0xbd, 0x17);
-  HI253WriteCmosSensor(0xbe, 0x17);
-  HI253WriteCmosSensor(0xbf, 0x17);
-  HI253WriteCmosSensor(0xc0, 0x17);
-  HI253WriteCmosSensor(0xc1, 0x17);
-
-  //Dark1
-  HI253WriteCmosSensor(0xc2, 0x1e);
-  HI253WriteCmosSensor(0xc3, 0x12);
-  HI253WriteCmosSensor(0xc4, 0x10);
-  HI253WriteCmosSensor(0xc5, 0x1e);
-  HI253WriteCmosSensor(0xc6, 0x12);
-  HI253WriteCmosSensor(0xc7, 0x10);
-
-  //Dark2
-  HI253WriteCmosSensor(0xc8, 0x18);
-  HI253WriteCmosSensor(0xc9, 0x05);
-  HI253WriteCmosSensor(0xca, 0x05);
-  HI253WriteCmosSensor(0xcb, 0x18);
-  HI253WriteCmosSensor(0xcc, 0x05);
-  HI253WriteCmosSensor(0xcd, 0x05);
 
-  //Dark3
-  HI253WriteCmosSensor(0xce, 0x18);
-  HI253WriteCmosSensor(0xcf, 0x05);
-  HI253WriteCmosSensor(0xd0, 0x05);
-  HI253WriteCmosSensor(0xd1, 0x18);
-  HI253WriteCmosSensor(0xd2, 0x05);
-  HI253WriteCmosSensor(0xd3, 0x05);
-
-  HI253SetPage(0x14);
+	HI253WriteCmosSensor(0x03, 0x14); // Page 14
   HI253WriteCmosSensor(0x10, 0x11); // LENSCTL1
-  HI253WriteCmosSensor(0x20, 0x40); // XCEN
-  HI253WriteCmosSensor(0x21, 0x80); // YCEN
+	HI253WriteCmosSensor(0x20, 0x20); // XCEN
+	HI253WriteCmosSensor(0x21, 0x90); // YCEN
   HI253WriteCmosSensor(0x22, 0x80); // LENSRGAIN
   HI253WriteCmosSensor(0x23, 0x80); // LENSGGAIN
   HI253WriteCmosSensor(0x24, 0x80); // LENSBGAIN
@@ -707,12 +1846,12 @@
   HI253WriteCmosSensor(0x33, 0x00);
   HI253WriteCmosSensor(0x34, 0x90);
 
-  HI253WriteCmosSensor(0x40, 0x65); // LENSRP0
-  HI253WriteCmosSensor(0x50, 0x42); // LENSGrP0
-  HI253WriteCmosSensor(0x60, 0x3a); // LENSBP0
-  HI253WriteCmosSensor(0x70, 0x42); // LENSGbP0
+	HI253WriteCmosSensor(0x40, 0x42); // LENSRP0
+	HI253WriteCmosSensor(0x50, 0x34); // LENSGrP0
+	HI253WriteCmosSensor(0x60, 0x29); // LENSBP0
+	HI253WriteCmosSensor(0x70, 0x34); // LENSGbP0
 
-  HI253SetPage(0x15); 
+	HI253WriteCmosSensor(0x03, 0x15); // Page 15 
   HI253WriteCmosSensor(0x10, 0x0f); // CMCCTL
   HI253WriteCmosSensor(0x14, 0x52); // CMCOFSGH
   HI253WriteCmosSensor(0x15, 0x42); // CMCOFSGM
@@ -759,7 +1898,7 @@
   HI253WriteCmosSensor(0x89, 0x00);
   HI253WriteCmosSensor(0x8a, 0x00);
 
-  HI253SetPage(0x16); 
+	HI253WriteCmosSensor(0x03, 0x16); // Page 16
   HI253WriteCmosSensor(0x10, 0x31); // GMACTL
   HI253WriteCmosSensor(0x18, 0x37);
   HI253WriteCmosSensor(0x19, 0x36);
@@ -769,8 +1908,8 @@
   HI253WriteCmosSensor(0x1d, 0xfe);
 
   HI253WriteCmosSensor(0x30, 0x00); // GGMA0
-  HI253WriteCmosSensor(0x31, 0x06); // GGMA1
-  HI253WriteCmosSensor(0x32, 0x1d); // GGMA2
+	HI253WriteCmosSensor(0x31, 0x08); // GGMA1
+	HI253WriteCmosSensor(0x32, 0x1f); // GGMA2
   HI253WriteCmosSensor(0x33, 0x33); // GGMA3
   HI253WriteCmosSensor(0x34, 0x53); // GGMA4
   HI253WriteCmosSensor(0x35, 0x6c); // GGMA5
@@ -784,9 +1923,9 @@
   HI253WriteCmosSensor(0x3d, 0xde); // GGMA13
   HI253WriteCmosSensor(0x3e, 0xe6); // GGMA14
   HI253WriteCmosSensor(0x3f, 0xee); // GGMA15
-  HI253WriteCmosSensor(0x40, 0xf5); // GGMA16
-  HI253WriteCmosSensor(0x41, 0xfc); // GGMA17
-  HI253WriteCmosSensor(0x42, 0xff); // GGMA18
+	HI253WriteCmosSensor(0x40, 0xf3); // GGMA16
+	HI253WriteCmosSensor(0x41, 0xf8); // GGMA17 
+	HI253WriteCmosSensor(0x42, 0xfb); // GGMA18 //ff
 
   HI253WriteCmosSensor(0x50, 0x00); // RGMA0
   HI253WriteCmosSensor(0x51, 0x03); // RGMA1
@@ -801,12 +1940,12 @@
   HI253WriteCmosSensor(0x5a, 0xc9); // RGMA10
   HI253WriteCmosSensor(0x5b, 0xd2); // RGMA11
   HI253WriteCmosSensor(0x5c, 0xdb); // RGMA12
-  HI253WriteCmosSensor(0x5d, 0xe3); // RGMA13
-  HI253WriteCmosSensor(0x5e, 0xeb); // RGMA14
-  HI253WriteCmosSensor(0x5f, 0xf0); // RGMA15
-  HI253WriteCmosSensor(0x60, 0xf5); // RGMA16
-  HI253WriteCmosSensor(0x61, 0xf7); // RGMA17
-  HI253WriteCmosSensor(0x62, 0xf8); // RGMA18
+	HI253WriteCmosSensor(0x5d, 0xe2); // RGMA13//e3
+	HI253WriteCmosSensor(0x5e, 0xe7); // RGMA14//eb
+	HI253WriteCmosSensor(0x5f, 0xeb); // RGMA15//f0
+	HI253WriteCmosSensor(0x60, 0xef); // RGMA16//f5
+	HI253WriteCmosSensor(0x61, 0xf0); // RGMA17//f7
+	HI253WriteCmosSensor(0x62, 0xf2); // RGMA18//f8
 
   HI253WriteCmosSensor(0x70, 0x00); // BGMA0
   HI253WriteCmosSensor(0x71, 0x08); // BGMA1
@@ -827,49 +1966,74 @@
   HI253WriteCmosSensor(0x80, 0xf4); // BGMA16
   HI253WriteCmosSensor(0x81, 0xfa); // BGMA17
   HI253WriteCmosSensor(0x82, 0xff); // BGMA18
-
-  HI253SetPage(0x17); 
-  HI253WriteCmosSensor(0xc4, 0x68); // FLK200
-  HI253WriteCmosSensor(0xc5, 0x56); // FLK240
-
-  HI253SetPage(0x20); 
-  HI253WriteCmosSensor(0x11, 0x1c);
-  HI253WriteCmosSensor(0x20, 0x01); // AEFRAMECTL lowtemp off
-  HI253WriteCmosSensor(0x21, 0x30);
-  HI253WriteCmosSensor(0x22, 0x10);
-  HI253WriteCmosSensor(0x23, 0x00);
-  HI253WriteCmosSensor(0x24, 0x04);
-
-  HI253WriteCmosSensor(0x28, 0xff);
-  HI253WriteCmosSensor(0x29, 0xad);
-
-  //MTK set up anti banding -- > 1/100s   
-  HI253WriteCmosSensor(0x2a, 0xf0);
-  HI253WriteCmosSensor(0x2b, 0x34);
-  HI253WriteCmosSensor(0x2c, 0xc3);
-  HI253WriteCmosSensor(0x2d, 0x5f);
-  HI253WriteCmosSensor(0x2e, 0x33);
-  HI253WriteCmosSensor(0x30, 0x78);
-  HI253WriteCmosSensor(0x32, 0x03);
-  HI253WriteCmosSensor(0x33, 0x2e);
-  HI253WriteCmosSensor(0x34, 0x30);
-  HI253WriteCmosSensor(0x35, 0xd4);
-  HI253WriteCmosSensor(0x36, 0xfe);
-  HI253WriteCmosSensor(0x37, 0x32);
-  HI253WriteCmosSensor(0x38, 0x04);
-  HI253WriteCmosSensor(0x3b, 0x22);
-  HI253WriteCmosSensor(0x3c, 0xef);
-  HI253WriteCmosSensor(0x47, 0xf0);
-
-  //Y_Frame TH
-  HI253WriteCmosSensor(0x50, 0x45);
-  HI253WriteCmosSensor(0x51, 0x88);
-
-  HI253WriteCmosSensor(0x56, 0x10);
-  HI253WriteCmosSensor(0x57, 0xb7);
-  HI253WriteCmosSensor(0x58, 0x14);
-  HI253WriteCmosSensor(0x59, 0x88);
-  HI253WriteCmosSensor(0x5a, 0x04);
+/*
+HI253WriteCmosSensor(0x70, 0x00); // new gamma for low noise
+HI253WriteCmosSensor(0x71, 0x07);
+HI253WriteCmosSensor(0x72, 0x0c);
+HI253WriteCmosSensor(0x73, 0x18);
+HI253WriteCmosSensor(0x74, 0x31);
+HI253WriteCmosSensor(0x75, 0x4d);
+HI253WriteCmosSensor(0x76, 0x69);
+HI253WriteCmosSensor(0x77, 0x83);
+HI253WriteCmosSensor(0x78, 0x9b);
+HI253WriteCmosSensor(0x79, 0xb1);
+HI253WriteCmosSensor(0x7a, 0xc3);
+HI253WriteCmosSensor(0x7b, 0xd2);
+HI253WriteCmosSensor(0x7c, 0xde);
+HI253WriteCmosSensor(0x7d, 0xe8);
+HI253WriteCmosSensor(0x7e, 0xf0);
+HI253WriteCmosSensor(0x7f, 0xf5);
+HI253WriteCmosSensor(0x80, 0xfa);
+HI253WriteCmosSensor(0x81, 0xfd);
+HI253WriteCmosSensor(0x82, 0xff);
+*/
+
+/////// PAGE 17 START ///////
+HI253WriteCmosSensor(0x03, 0x17);
+HI253WriteCmosSensor(0x10, 0xf7);
+
+/////// PAGE 20 START ///////
+HI253WriteCmosSensor(0x03, 0x20);
+HI253WriteCmosSensor(0x11, 0x1c);
+HI253WriteCmosSensor(0x18, 0x30);
+HI253WriteCmosSensor(0x1a, 0x08);
+HI253WriteCmosSensor(0x20, 0x01); //05_lowtemp Y Mean off
+HI253WriteCmosSensor(0x21, 0x30);
+HI253WriteCmosSensor(0x22, 0x10);
+HI253WriteCmosSensor(0x23, 0x00);
+HI253WriteCmosSensor(0x24, 0x00); //Uniform Scene Off
+
+HI253WriteCmosSensor(0x28, 0xe7);
+HI253WriteCmosSensor(0x29, 0x0d); //20100305 ad->0d
+HI253WriteCmosSensor(0x2a, 0xff);
+HI253WriteCmosSensor(0x2b, 0x34); //f4->Adaptive off
+
+HI253WriteCmosSensor(0x2c, 0xc3);
+HI253WriteCmosSensor(0x2d, 0xcf);  //fe->AE Speed option
+HI253WriteCmosSensor(0x2e, 0x33);
+HI253WriteCmosSensor(0x30, 0x78); //f8
+HI253WriteCmosSensor(0x32, 0x03);
+HI253WriteCmosSensor(0x33, 0x2e);
+HI253WriteCmosSensor(0x34, 0x30);
+HI253WriteCmosSensor(0x35, 0xd4);
+HI253WriteCmosSensor(0x36, 0xfe);
+HI253WriteCmosSensor(0x37, 0x32);
+HI253WriteCmosSensor(0x38, 0x04);
+
+HI253WriteCmosSensor(0x39, 0x22); //AE_escapeC10
+HI253WriteCmosSensor(0x3a, 0xde); //AE_escapeC11
+
+HI253WriteCmosSensor(0x3b, 0x22); //AE_escapeC1
+HI253WriteCmosSensor(0x3c, 0xde); //AE_escapeC2
+
+HI253WriteCmosSensor(0x50, 0x45);
+HI253WriteCmosSensor(0x51, 0x88);
+
+HI253WriteCmosSensor(0x56, 0x03);
+HI253WriteCmosSensor(0x57, 0xf7);
+HI253WriteCmosSensor(0x58, 0x14);
+HI253WriteCmosSensor(0x59, 0x88);
+HI253WriteCmosSensor(0x5a, 0x04);
 
   HI253WriteCmosSensor(0x60, 0x55); // AEWGT1
   HI253WriteCmosSensor(0x61, 0x55); // AEWGT2
@@ -887,81 +2051,81 @@
   HI253WriteCmosSensor(0x6d, 0xa9); // AEWGT14
   HI253WriteCmosSensor(0x6e, 0x55); // AEWGT15
   HI253WriteCmosSensor(0x6f, 0x55); // AEWGT16
-  HI253WriteCmosSensor(0x70, 0x46); // YLVL
-  HI253WriteCmosSensor(0x71, 0xBb);
-
-  // haunting control  
-  HI253WriteCmosSensor(0x76, 0x21);
-  HI253WriteCmosSensor(0x77, 0xBC); //02},
-  HI253WriteCmosSensor(0x78, 0x34); //22}, // YTH1
-  HI253WriteCmosSensor(0x79, 0x3a); //2a}, // YTH2HI
 
+HI253WriteCmosSensor(0x70, 0x46); //6e//2012-4-26-modify
+HI253WriteCmosSensor(0x71, 0x89); //00 //-4
 
-  HI253WriteCmosSensor(0x7a, 0x23);
-  HI253WriteCmosSensor(0x7b, 0x22);
-  HI253WriteCmosSensor(0x7d, 0x23);
-  HI253WriteCmosSensor(0x83, 0x01); //EXP Normal 33.33 fps 
-  HI253WriteCmosSensor(0x84, 0x7c); 
-  HI253WriteCmosSensor(0x85, 0x40); 
-  HI253WriteCmosSensor(0x86, 0x01); //EXPMin 10416.67 fps
-  HI253WriteCmosSensor(0x87, 0x38); 
-  HI253WriteCmosSensor(0x88, 0x04); //EXP Max 10.00 fps 
-  HI253WriteCmosSensor(0x89, 0xf3); 
-  HI253WriteCmosSensor(0x8a, 0x80); 
-  HI253WriteCmosSensor(0x8B, 0x7e); //EXP100 
-  HI253WriteCmosSensor(0x8C, 0xc0); 
-  HI253WriteCmosSensor(0x8D, 0x69); //EXP120 
-  HI253WriteCmosSensor(0x8E, 0x6c); 
-  HI253WriteCmosSensor(0x91, 0x05); 
-  HI253WriteCmosSensor(0x92, 0xe9); 
-  HI253WriteCmosSensor(0x93, 0xac); 
-  HI253WriteCmosSensor(0x94, 0x04); 
-  HI253WriteCmosSensor(0x95, 0x32); 
-  HI253WriteCmosSensor(0x96, 0x38); 
-  HI253WriteCmosSensor(0x98, 0xdc); // EXPOUT1 DC 9d out target th
-  HI253WriteCmosSensor(0x99, 0x45); // EXPOUT2
-  HI253WriteCmosSensor(0x9a, 0x0d);
-  HI253WriteCmosSensor(0x9b, 0xde);
-
-  HI253WriteCmosSensor(0x9c, 0x07); //EXP Limit 1736.11 fps 
-  HI253WriteCmosSensor(0x9d, 0x50); 
-  HI253WriteCmosSensor(0x9e, 0x01); //EXP Unit 
-  HI253WriteCmosSensor(0x9f, 0x38); 
-  HI253WriteCmosSensor(0xa0, 0x03);
-  HI253WriteCmosSensor(0xa1, 0xa9);
-  HI253WriteCmosSensor(0xa2, 0x80);
-  HI253WriteCmosSensor(0xb0, 0x1d); // AG
-  HI253WriteCmosSensor(0xb1, 0x1a); // AGMIN
-  HI253WriteCmosSensor(0xb2, 0x80); // AGMAX
-  HI253WriteCmosSensor(0xb3, 0x20); // AGLVLH //1a
-  HI253WriteCmosSensor(0xb4, 0x1a); // AGTH1
-  HI253WriteCmosSensor(0xb5, 0x44); // AGTH2
-  HI253WriteCmosSensor(0xb6, 0x2f); // AGBTH1
-  HI253WriteCmosSensor(0xb7, 0x28); // AGBTH2
-  HI253WriteCmosSensor(0xb8, 0x25); // AGBTH3
-  HI253WriteCmosSensor(0xb9, 0x22); // AGBTH4
-  HI253WriteCmosSensor(0xba, 0x21); // AGBTH5
-  HI253WriteCmosSensor(0xbb, 0x20); // AGBTH6
-  HI253WriteCmosSensor(0xbc, 0x1f); // AGBTH7
-  HI253WriteCmosSensor(0xbd, 0x1f); // AGBTH8
-  HI253WriteCmosSensor(0xc0, 0x30); // AGSKY
-  HI253WriteCmosSensor(0xc1, 0x20);
-  HI253WriteCmosSensor(0xc2, 0x20);
-  HI253WriteCmosSensor(0xc3, 0x20);
-  HI253WriteCmosSensor(0xc4, 0x08); // AGTIMETH
-  HI253WriteCmosSensor(0xc8, 0x80); // DGMAX
-  HI253WriteCmosSensor(0xc9, 0x40); // DGMIN   
-
-  HI253SetPage(0x22); 
-  HI253WriteCmosSensor(0x10, 0xfd); // AWBCTL1
-  HI253WriteCmosSensor(0x11, 0x2e); // AWBCTL2
-  HI253WriteCmosSensor(0x19, 0x01); 
+// haunting control
+HI253WriteCmosSensor(0x76, 0x43);
+HI253WriteCmosSensor(0x77, 0xe2); //04 //f2
+
+HI253WriteCmosSensor(0x78, 0x23); //Yth1
+HI253WriteCmosSensor(0x79, 0x46); //Yth2 //46
+HI253WriteCmosSensor(0x7a, 0x23); //23
+HI253WriteCmosSensor(0x7b, 0x22); //22
+HI253WriteCmosSensor(0x7d, 0x23);
+
+HI253WriteCmosSensor(0x83, 0x01); //EXP Normal 33.33 fps 
+HI253WriteCmosSensor(0x84, 0x7c); 
+HI253WriteCmosSensor(0x85, 0xdc); 
+
+HI253WriteCmosSensor(0x86, 0x01); //EXPMin 5859.38 fps
+HI253WriteCmosSensor(0x87, 0xf4); 
+
+HI253WriteCmosSensor(0x88, 0x04); //EXP Max 10.00 fps 
+HI253WriteCmosSensor(0x89, 0xf5); 
+HI253WriteCmosSensor(0x8a, 0x88); 
+
+HI253WriteCmosSensor(0x8B, 0x7e); //EXP100 
+HI253WriteCmosSensor(0x8C, 0xf4); 
+HI253WriteCmosSensor(0x8D, 0x69); //EXP120 
+HI253WriteCmosSensor(0x8E, 0x78); 
+
+HI253WriteCmosSensor(0x9c, 0x0f); //EXP Limit 488.28 fps 
+HI253WriteCmosSensor(0x9d, 0xa0); 
+HI253WriteCmosSensor(0x9e, 0x01); //EXP Unit 
+HI253WriteCmosSensor(0x9f, 0xf4); 
+
+//AE_Middle Time option
+//HI253WriteCmosSensor(0xa0, 0x03);
+//HI253WriteCmosSensor(0xa1, 0xa9);
+//HI253WriteCmosSensor(0xa2, 0x80);
+
+HI253WriteCmosSensor(0xb0, 0x16);
+HI253WriteCmosSensor(0xb1, 0x14); //ADC 400->560
+HI253WriteCmosSensor(0xb2, 0xa0); 
+HI253WriteCmosSensor(0xb3, 0x18);
+HI253WriteCmosSensor(0xb4, 0x1a);
+HI253WriteCmosSensor(0xb5, 0x44);
+HI253WriteCmosSensor(0xb6, 0x2f);
+HI253WriteCmosSensor(0xb7, 0x28);
+HI253WriteCmosSensor(0xb8, 0x25);
+HI253WriteCmosSensor(0xb9, 0x22);
+HI253WriteCmosSensor(0xba, 0x21);
+HI253WriteCmosSensor(0xbb, 0x20);
+HI253WriteCmosSensor(0xbc, 0x1f);
+HI253WriteCmosSensor(0xbd, 0x1f);
+
+HI253WriteCmosSensor(0xc0, 0x14);
+HI253WriteCmosSensor(0xc1, 0x1f);
+HI253WriteCmosSensor(0xc2, 0x1f);
+HI253WriteCmosSensor(0xc3, 0x18); //2b
+HI253WriteCmosSensor(0xc4, 0x10); //08
+
+HI253WriteCmosSensor(0xc8, 0x80);
+HI253WriteCmosSensor(0xc9, 0x40);
+
+/////// PAGE 22 START ///////
+HI253WriteCmosSensor(0x03, 0x22);
+HI253WriteCmosSensor(0x10, 0xfd);
+HI253WriteCmosSensor(0x11, 0x2e);
+HI253WriteCmosSensor(0x19, 0x01); // Low On //
   HI253WriteCmosSensor(0x20, 0x30);
   HI253WriteCmosSensor(0x21, 0x80);
   HI253WriteCmosSensor(0x23, 0x08);
   HI253WriteCmosSensor(0x24, 0x01);
 
-  HI253WriteCmosSensor(0x30, 0x80); // ULVL
+	HI253WriteCmosSensor(0x30, 0x7e); // ULVL
   HI253WriteCmosSensor(0x31, 0x80); // VLVL
   HI253WriteCmosSensor(0x38, 0x11); // UVTH1
   HI253WriteCmosSensor(0x39, 0x34); // UVTH2
@@ -982,21 +2146,20 @@
   HI253WriteCmosSensor(0x80, 0x38); // RGAIN
   HI253WriteCmosSensor(0x81, 0x20); // GGAIN
   HI253WriteCmosSensor(0x82, 0x38); // BGAIN
-
   HI253WriteCmosSensor(0x83, 0x5e); // RMAX
-  HI253WriteCmosSensor(0x84, 0x20); // RMIN
-  HI253WriteCmosSensor(0x85, 0x53); // BMAX
-  HI253WriteCmosSensor(0x86, 0x15); // BMIN
-
-  HI253WriteCmosSensor(0x87, 0x54); // RMAXM
-  HI253WriteCmosSensor(0x88, 0x20); // RMINM
-  HI253WriteCmosSensor(0x89, 0x3f); // BMAXM 
-  HI253WriteCmosSensor(0x8a, 0x1c); // BMINM
-
-  HI253WriteCmosSensor(0x8b, 0x54); // RMAXB 
-  HI253WriteCmosSensor(0x8c, 0x3f); // RMINB
-  HI253WriteCmosSensor(0x8d, 0x24); // BMAXB
-  HI253WriteCmosSensor(0x8e, 0x1c); // BMINB
+	HI253WriteCmosSensor(0x84, 0x1e); // RMIN//20
+	HI253WriteCmosSensor(0x85, 0x5e); // BMAX//53
+	HI253WriteCmosSensor(0x86, 0x22); // BMIN//15
+
+	HI253WriteCmosSensor(0x87, 0x40); // RMAXM//54
+	HI253WriteCmosSensor(0x88, 0x30); // RMINM//20
+	HI253WriteCmosSensor(0x89, 0x3f); // BMAXM //3f
+	HI253WriteCmosSensor(0x8a, 0x28); // BMINM//1c
+
+	HI253WriteCmosSensor(0x8b, 0x40); // RMAXB //54
+	HI253WriteCmosSensor(0x8c, 0x33); // RMINB//3f
+	HI253WriteCmosSensor(0x8d, 0x39); // BMAXB//24
+	HI253WriteCmosSensor(0x8e, 0x30); // BMINB//1c
 
   HI253WriteCmosSensor(0x8f, 0x60); // BGAINPARA1
   HI253WriteCmosSensor(0x90, 0x5f); // BGAINPARA2
@@ -1011,8 +2174,8 @@
   HI253WriteCmosSensor(0x99, 0x1C); // BGAINPARA11
   HI253WriteCmosSensor(0x9a, 0x19); // BGAINPARA12
 
-  HI253WriteCmosSensor(0x9b, 0x88); // BGAINBND1
-  HI253WriteCmosSensor(0x9c, 0x88); // BGAINBND2
+	HI253WriteCmosSensor(0x9b, 0x77); // BGAINBND1//88
+	HI253WriteCmosSensor(0x9c, 0x77); // BGAINBND2//88
   HI253WriteCmosSensor(0x9d, 0x48); // RGAINTH1
   HI253WriteCmosSensor(0x9e, 0x38); // RGAINTH2
   HI253WriteCmosSensor(0x9f, 0x30); // RGAINTH3
@@ -1022,9 +2185,9 @@
   HI253WriteCmosSensor(0xa2, 0xaf); // RDELTA2
   HI253WriteCmosSensor(0xa3, 0xf7); // BDELTA2
 
-  HI253WriteCmosSensor(0xa4, 0x10); // AWBEXPLMT1
-  HI253WriteCmosSensor(0xa5, 0x50); // AWBEXPLMT2
-  HI253WriteCmosSensor(0xa6, 0xc4); // AWBEXPLMT3
+	HI253WriteCmosSensor(0xa4, 0x14); // AWBEXPLMT1//10
+	HI253WriteCmosSensor(0xa5, 0x2c); // AWBEXPLMT2//50
+	HI253WriteCmosSensor(0xa6, 0xcf); // AWBEXPLMT3//c4
 
   HI253WriteCmosSensor(0xad, 0x40);
   HI253WriteCmosSensor(0xae, 0x4a);
@@ -1035,67 +2198,59 @@
   HI253WriteCmosSensor(0xb1, 0x20);
   HI253WriteCmosSensor(0xb4, 0xff);
   HI253WriteCmosSensor(0xb8, 0x6b);
-  HI253WriteCmosSensor(0xb9, 0x00);
+	HI253WriteCmosSensor(0xb9, 0x09);//0x00
 
-  HI253SetPage(0x24); 
-  HI253WriteCmosSensor(0x10, 0x01); // AFCTL1
-  HI253WriteCmosSensor(0x18, 0x06);
-  HI253WriteCmosSensor(0x30, 0x06);
-  HI253WriteCmosSensor(0x31, 0x90);
-  HI253WriteCmosSensor(0x32, 0x25);
-  HI253WriteCmosSensor(0x33, 0xa2);
-  HI253WriteCmosSensor(0x34, 0x26);
-  HI253WriteCmosSensor(0x35, 0x58);
-  HI253WriteCmosSensor(0x36, 0x60);
-  HI253WriteCmosSensor(0x37, 0x00);
-  HI253WriteCmosSensor(0x38, 0x50);
-  HI253WriteCmosSensor(0x39, 0x00);
-
-  HI253SetPage(0x20); 
-  HI253WriteCmosSensor(0x10, 0x9c); // AE ON 50Hz
-  HI253SetPage(0x22); 
-  HI253WriteCmosSensor(0x10, 0xe9); // AWB ON
-
-  HI253SetPage(0x00); 
-  HI253WriteCmosSensor(0x0e, 0x03); // PLL
-  HI253WriteCmosSensor(0x0e, 0x73); // PLL ON x2
+// PAGE 20
+HI253WriteCmosSensor(0x03, 0x20); //page 20
+HI253WriteCmosSensor(0x10, 0x9c); //ae off
+
+// PAGE 22
+HI253WriteCmosSensor(0x03, 0x22); //page 22
+HI253WriteCmosSensor(0x10, 0xe9); //awb off
+
+// PAGE 0
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x0e, 0x03); //PLL On
+HI253WriteCmosSensor(0x0e, 0x73); //PLLx2
+
+HI253WriteCmosSensor(0x03, 0x00); // Dummy 750us
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x03, 0x00);
+HI253WriteCmosSensor(0x03, 0x00);
 
-  HI253SetPage(0x00); // Dummy 750us START
-  HI253SetPage(0x00);
-  HI253SetPage(0x00);
-  HI253SetPage(0x00);
-  HI253SetPage(0x00);
-  HI253SetPage(0x00);
-  HI253SetPage(0x00);
-  HI253SetPage(0x00);
-  HI253SetPage(0x00);
-  HI253SetPage(0x00); // Dummy 750us END
+HI253WriteCmosSensor(0x03, 0x00); // Page 0
+HI253WriteCmosSensor(0x01, 0xf0); // Sleep Off 0xf8->0x50 for solve green line issue
 
-  HI253SetPage(0x00); 
-  HI253WriteCmosSensor(0x01, 0xf8); // Sleep OFF
+*/
+  #endif
   /*[END]*/
 }
 
 void HI253InitPara(void)
 {
-	spin_lock(&hi253_drv_lock);
+  SENSORDB("[MINGJI]HI253InitPara() calling;\n");
   HI253Status.NightMode = KAL_FALSE;
   HI253Status.ZoomFactor = 0;
   HI253Status.Banding = AE_FLICKER_MODE_50HZ;
-  HI253Status.PvShutter = 0x17c40;
+  HI253Status.PvShutter = 0x17cdc;
   HI253Status.MaxFrameRate = HI253_MAX_FPS;
   HI253Status.MiniFrameRate = HI253_FPS(10);
-  HI253Status.PvDummyPixels = 424;
-  HI253Status.PvDummyLines = 62;
+  HI253Status.PvDummyPixels = 360;
+  HI253Status.PvDummyLines = 20;
   HI253Status.CapDummyPixels = 360;
-  HI253Status.CapDummyLines = 52; /* 10 FPS, 104 for 9.6 FPS*/
+  HI253Status.CapDummyLines =20; /* 10 FPS, 104 for 9.6 FPS*/
   HI253Status.PvOpClk = 26;
   HI253Status.CapOpClk = 26;  
   HI253Status.VDOCTL2 = 0x90;
   HI253Status.ISPCTL3 = 0x30;
   HI253Status.AECTL1 = 0x9c;
   HI253Status.AWBCTL1 = 0xe9;
-  	spin_unlock(&hi253_drv_lock);
 }
 
 /*************************************************************************
@@ -1117,31 +2272,22 @@
 *************************************************************************/
 static void HI253SetMirror(kal_uint16 ImageMirror)
 {
-	spin_lock(&hi253_drv_lock);
+  SENSORDB("[MINGJI]HI253SetMirror() calling;\n");
   HI253Status.VDOCTL2 &= 0xfc;   
-  spin_unlock(&hi253_drv_lock);
   switch (ImageMirror)
   {
     case IMAGE_H_MIRROR:
-		spin_lock(&hi253_drv_lock);
-      HI253Status.VDOCTL2 |= 0x01;
-	  spin_unlock(&hi253_drv_lock);
+      HI253Status.VDOCTL2 |= 0x02;
       break;
     case IMAGE_V_MIRROR:
-		spin_lock(&hi253_drv_lock);
-      HI253Status.VDOCTL2 |= 0x02; 
-	  spin_unlock(&hi253_drv_lock);
+      HI253Status.VDOCTL2 |= 0x01; 
       break;
     case IMAGE_HV_MIRROR:
-		spin_lock(&hi253_drv_lock);
-      HI253Status.VDOCTL2 |= 0x03;
-	  spin_unlock(&hi253_drv_lock);
+      HI253Status.VDOCTL2 |= 0x00;
       break;
     case IMAGE_NORMAL:
     default:
-		spin_lock(&hi253_drv_lock);
-      HI253Status.VDOCTL2 |= 0x00; 
-	  spin_unlock(&hi253_drv_lock);
+      HI253Status.VDOCTL2 |= 0x03; 
   }
   HI253SetPage(0x00);
   HI253WriteCmosSensor(0x11,HI253Status.VDOCTL2);  
@@ -1149,19 +2295,17 @@
 
 static void HI253SetAeMode(kal_bool AeEnable)
 {
+  SENSORDB("[MINGJI]HI253SetAeMode() calling;\n");
+
   SENSORDB("[HI253]HI253SetAeMode AeEnable:%d;\n",AeEnable);
 
   if (AeEnable == KAL_TRUE)
   {
-  	spin_lock(&hi253_drv_lock);
     HI253Status.AECTL1 |= 0x80;
-	spin_unlock(&hi253_drv_lock);
   }
   else
   {
-  	spin_lock(&hi253_drv_lock);
     HI253Status.AECTL1 &= (~0x80);
-	spin_unlock(&hi253_drv_lock);
   }
   HI253SetPage(0x20);
   HI253WriteCmosSensor(0x10,HI253Status.AECTL1);  
@@ -1170,18 +2314,16 @@
 
 static void HI253SetAwbMode(kal_bool AwbEnable)
 {
+  SENSORDB("[MINGJI]HI253SetAwbMode() calling;\n");
+
   SENSORDB("[HI253]HI253SetAwbMode AwbEnable:%d;\n",AwbEnable);
   if (AwbEnable == KAL_TRUE)
   {
-  	spin_lock(&hi253_drv_lock);
     HI253Status.AWBCTL1 |= 0x80;
-	spin_unlock(&hi253_drv_lock);
   }
   else
   {
-  	spin_lock(&hi253_drv_lock);
     HI253Status.AWBCTL1 &= (~0x80);
-	spin_unlock(&hi253_drv_lock);
   }
   HI253SetPage(0x22);
   HI253WriteCmosSensor(0x10,HI253Status.AWBCTL1);  
@@ -1205,61 +2347,221 @@
 *************************************************************************/
 void HI253NightMode(kal_bool Enable)
 {
-  kal_uint32 EXPMAX, EXPTIME, BLC_TIME_TH_ONOFF;
+	SENSORDB("[MINGJI]HI253NightMode() calling;\n");
+	kal_uint32 EXPMAX, EXPTIME, BLC_TIME_TH_ONOFF,HI253_OPCLK,Clock_Divider=1;
   kal_uint32 LineLength,BandingValue;
   SENSORDB("[HI253]HI253NightMode Enable:%d;\n",Enable);
+
+	/*Night mode for video preview,mingji add*/
+	if(Enable)
+		HI253Status.NightMode = KAL_TRUE;
+	else
+		HI253Status.NightMode = KAL_FALSE;
+
   /* Night mode only for camera preview */
   if (HI253Status.MaxFrameRate == HI253Status.MiniFrameRate)  return ;
-  spin_lock(&hi253_drv_lock);
-  HI253Status.MiniFrameRate = Enable ? HI253_FPS(5) : HI253_FPS(10);
-  spin_unlock(&hi253_drv_lock);
-  LineLength = HI253_PV_PERIOD_PIXEL_NUMS + HI253Status.PvDummyPixels;
-  BandingValue = (HI253Status.Banding == AE_FLICKER_MODE_50HZ) ? 100 : 120;
   
-  EXPTIME = (HI253Status.PvOpClk * 1000000 / LineLength / BandingValue) * BandingValue * LineLength * HI253_FRAME_RATE_UNIT / 8 / HI253Status.MaxFrameRate;
-  EXPMAX = (HI253Status.PvOpClk * 1000000 / LineLength / BandingValue) * BandingValue * LineLength * HI253_FRAME_RATE_UNIT / 8 / HI253Status.MiniFrameRate;
-  BLC_TIME_TH_ONOFF =  BandingValue * HI253_FRAME_RATE_UNIT / HI253Status.MiniFrameRate;
+	if(Enable)
+	{
+		if (HI253Status.Banding == AE_FLICKER_MODE_50HZ) 
+		{
+		       SENSORDB("[HI253]HI253NightMode Enable AE_FLICKER_MODE_50HZ\n");
+			HI253WriteCmosSensor(0x03,0x00); 	
+			HI253_Sleep_Mode = (HI253ReadCmosSensor(0x01) & 0xfe);
+			HI253_Sleep_Mode |= 0x01;
+			HI253WriteCmosSensor(0x01, HI253_Sleep_Mode);
+
+			HI253WriteCmosSensor(0x03, 0x20);
+			HI253WriteCmosSensor(0x10, 0x1c);
+
+			HI253WriteCmosSensor(0x03, 0x20);
+			HI253WriteCmosSensor(0x18, 0x38);
+
+			HI253WriteCmosSensor(0x83, 0x01);//0x015f00
+			HI253WriteCmosSensor(0x84, 0x7c);
+			HI253WriteCmosSensor(0x85, 0xdc);
+
+			HI253WriteCmosSensor(0x86, 0x01);//0x0200
+			HI253WriteCmosSensor(0x87, 0xf4);
+
+			HI253WriteCmosSensor(0x88, 0x09);//5fps//2012.03.12
+			HI253WriteCmosSensor(0x89, 0xeb);
+			HI253WriteCmosSensor(0x8a, 0x10);
+
+			HI253WriteCmosSensor(0x8b, 0x7e);
+			HI253WriteCmosSensor(0x8c, 0xf4);
+			HI253WriteCmosSensor(0x8d, 0x69);
+			HI253WriteCmosSensor(0x8e, 0x78);
+
+			HI253WriteCmosSensor(0x9c, 0x0f);
+			HI253WriteCmosSensor(0x9d, 0xa0);
+			HI253WriteCmosSensor(0x9e, 0x01);
+			HI253WriteCmosSensor(0x9f, 0xf4);
+
+			HI253WriteCmosSensor(0x03,0x00); 	
+			HI253_Sleep_Mode = (HI253ReadCmosSensor(0x01) & 0xfe);
+			HI253_Sleep_Mode |= 0x00;
+			HI253WriteCmosSensor(0x01, HI253_Sleep_Mode);
+
+			HI253WriteCmosSensor(0x03, 0x20);
+			HI253WriteCmosSensor(0x10, 0x9c);
+
+			HI253WriteCmosSensor(0x18, 0x30);
+			Sleep(10);
+  	 	}
+		else
+		{
+			SENSORDB("[HI253]HI253NightMode Enable AE_FLICKER_MODE_60HZ\n");
+			HI253WriteCmosSensor(0x03,0x00); 	
+			HI253_Sleep_Mode = (HI253ReadCmosSensor(0x01) & 0xfe);
+			HI253_Sleep_Mode |= 0x01;
+			HI253WriteCmosSensor(0x01, HI253_Sleep_Mode);
+
+			HI253WriteCmosSensor(0x03, 0x20);
+			HI253WriteCmosSensor(0x10, 0x1c);
+
+			HI253WriteCmosSensor(0x03, 0x20);
+			HI253WriteCmosSensor(0x18, 0x38);
+
+			HI253WriteCmosSensor(0x83, 0x01);//0x015f00
+			HI253WriteCmosSensor(0x84, 0xa5);
+			HI253WriteCmosSensor(0x85, 0xe0);
+
+			HI253WriteCmosSensor(0x86, 0x01);//0x0200
+			HI253WriteCmosSensor(0x87, 0xf4);
+
+			HI253WriteCmosSensor(0x88, 0x09);//0x09d800
+			HI253WriteCmosSensor(0x89, 0xe3);
+			HI253WriteCmosSensor(0x8a, 0x40);
+
+			HI253WriteCmosSensor(0x8b, 0x7e);
+			HI253WriteCmosSensor(0x8c, 0xf4);
+			HI253WriteCmosSensor(0x8d, 0x69);
+			HI253WriteCmosSensor(0x8e, 0x78);
+
+			HI253WriteCmosSensor(0x9c, 0x0f);
+			HI253WriteCmosSensor(0x9d, 0xa0);
+			HI253WriteCmosSensor(0x9e, 0x01);
+			HI253WriteCmosSensor(0x9f, 0xf4);
+
+
+			HI253WriteCmosSensor(0x03,0x00); 	
+			HI253_Sleep_Mode = (HI253ReadCmosSensor(0x01) & 0xfe);
+			HI253_Sleep_Mode |= 0x00;
+			HI253WriteCmosSensor(0x01, HI253_Sleep_Mode);
+
+			HI253WriteCmosSensor(0x03, 0x20);
+			HI253WriteCmosSensor(0x10, 0x8c);
+
+			HI253WriteCmosSensor(0x18, 0x30);
+			Sleep(10);
+	 	}
+		
+		/*mingji add for improve the brightness in preview*/
+		//HI253WriteCmosSensor(0x03, 0x10);
+		//HI253WriteCmosSensor(0x41, 0x30);		
+  	}
+  	else
+  	{
+		 if (HI253Status.Banding == AE_FLICKER_MODE_50HZ) 
+		 {
+			SENSORDB("[HI253]HI253NightMode Disable AE_FLICKER_MODE_50HZ\n");
+			HI253WriteCmosSensor(0x03,0x00); 	
+			HI253_Sleep_Mode = (HI253ReadCmosSensor(0x01) & 0xfe);
+			HI253_Sleep_Mode |= 0x01;
+			HI253WriteCmosSensor(0x01, HI253_Sleep_Mode);
+
+			HI253WriteCmosSensor(0x03, 0x20);
+			HI253WriteCmosSensor(0x10, 0x1c);
+
+			HI253WriteCmosSensor(0x03, 0x20);
+			HI253WriteCmosSensor(0x18, 0x38);
+
+			HI253WriteCmosSensor(0x83, 0x01); //0x017a00
+			HI253WriteCmosSensor(0x84, 0x7c);
+			HI253WriteCmosSensor(0x85, 0xdc);
+
+			HI253WriteCmosSensor(0x86, 0x01); //0x0200
+			HI253WriteCmosSensor(0x87, 0xf4);
 
-  SENSORDB("[HI253]LineLenght:%d,BandingValue:%d;MiniFrameRaet:%d\n",LineLength,BandingValue,HI253Status.MiniFrameRate);
-  SENSORDB("[HI253]EXPTIME:%d; EXPMAX:%d; BLC_TIME_TH_ONOFF:%d;\n",EXPTIME,EXPMAX,BLC_TIME_TH_ONOFF);
-  SENSORDB("[HI253]VDOCTL2:%x; AECTL1:%x; \n",HI253Status.VDOCTL2,HI253Status.AECTL1);
+			HI253WriteCmosSensor(0x88, 0x04); //0x05e800//06
+			HI253WriteCmosSensor(0x89, 0xf5); //cc mj
+			HI253WriteCmosSensor(0x8a, 0x88); //3c mj
 
-  HI253SetPage(0x00);
-  HI253WriteCmosSensor(0x01, 0xf9); // Sleep ON
-  spin_lock(&hi253_drv_lock);
-  HI253Status.VDOCTL2 &= 0xfb;   
-  spin_unlock(&hi253_drv_lock);
-  HI253WriteCmosSensor(0x11,HI253Status.VDOCTL2);  // Fixed frame rate OFF  
-  HI253WriteCmosSensor(0x90, BLC_TIME_TH_ONOFF); // BLC_TIME_TH_ON
-  HI253WriteCmosSensor(0x91, BLC_TIME_TH_ONOFF); // BLC_TIME_TH_OFF
-  HI253WriteCmosSensor(0x92, 0x78); // BLC_AG_TH_ON
-  HI253WriteCmosSensor(0x93, 0x70); // BLC_AG_TH_OFF
-  HI253SetPage(0x02); 
-  HI253WriteCmosSensor(0xd4, BLC_TIME_TH_ONOFF); // DCDC_TIME_TH_ON
-  HI253WriteCmosSensor(0xd5, BLC_TIME_TH_ONOFF); // DCDC_TIME_TH_OFF
-  HI253WriteCmosSensor(0xd6, 0x78); // DCDC_AG_TH_ON
-  HI253WriteCmosSensor(0xd7, 0x70); // DCDC_AG_TH_OFF
-  HI253SetPage(0x20);
-  spin_lock(&hi253_drv_lock);
-  HI253Status.AECTL1 &= (~0x80);  
-  spin_unlock(&hi253_drv_lock);
-  HI253WriteCmosSensor(0x10,HI253Status.AECTL1);// AE ON BIT 7    
-  HI253WriteCmosSensor(0x18, 0x38); // AE Reset ON
-  HI253WriteCmosSensor(0x11, 0x1c); // 0x35 for fixed frame rate
-  HI253WriteCmosSensor(0x2a, 0xf0); // 0x35 for fixed frame rate
-  HI253WriteCmosSensor(0x2b, 0x34); // 0x35 for fixed frame rate, 0x34 for dynamic frame rate  
-  HI253WriteCmosSensor(0x83, (EXPTIME>>16)&(0xff)); // EXPTIMEH max fps
-  HI253WriteCmosSensor(0x84, (EXPTIME>>8)&(0xff)); // EXPTIMEM
-  HI253WriteCmosSensor(0x85, (EXPTIME>>0)&(0xff)); // EXPTIMEL
-  HI253WriteCmosSensor(0x88, (EXPMAX>>16)&(0xff)); // EXPMAXH min fps init 0x04f380
-  HI253WriteCmosSensor(0x89, (EXPMAX>>8)&(0xff)); // EXPMAXM
-  HI253WriteCmosSensor(0x8a, (EXPMAX>>0)&(0xff)); // EXPMAXL
-  HI253WriteCmosSensor(0x01, 0xf8); // Sleep OFF  
-  spin_lock(&hi253_drv_lock);
-  HI253Status.AECTL1 |= 0x80;   
-  spin_unlock(&hi253_drv_lock);
-  HI253WriteCmosSensor(0x10,HI253Status.AECTL1);// AE ON BIT 7    
-  HI253WriteCmosSensor(0x18, 0x30); // AE Reset OFF
+			HI253WriteCmosSensor(0x8b, 0x7e);
+			HI253WriteCmosSensor(0x8c, 0xf4);
+			HI253WriteCmosSensor(0x8d, 0x69);
+			HI253WriteCmosSensor(0x8e, 0x78);
+
+			HI253WriteCmosSensor(0x9c, 0x0f);
+			HI253WriteCmosSensor(0x9d, 0xa0);
+			HI253WriteCmosSensor(0x9e, 0x01);
+			HI253WriteCmosSensor(0x9f, 0xf4);
+
+			HI253WriteCmosSensor(0x03,0x00); 	
+			HI253_Sleep_Mode = (HI253ReadCmosSensor(0x01) & 0xfe);
+			HI253_Sleep_Mode |= 0x00;
+			HI253WriteCmosSensor(0x01, HI253_Sleep_Mode);
+
+			HI253WriteCmosSensor(0x03, 0x20);
+			HI253WriteCmosSensor(0x10, 0x9c);
+
+			HI253WriteCmosSensor(0x18, 0x30);
+
+			Sleep(10);
+  	 	}
+	 	else
+	 	{
+		 	SENSORDB("[HI253]HI253NightMode Disable AE_FLICKER_MODE_60HZ\n");
+			HI253WriteCmosSensor(0x03,0x00); 	
+			HI253_Sleep_Mode = (HI253ReadCmosSensor(0x01) & 0xfe);
+			HI253_Sleep_Mode |= 0x01;
+			HI253WriteCmosSensor(0x01, HI253_Sleep_Mode);
+
+			HI253WriteCmosSensor(0x03, 0x20);
+			HI253WriteCmosSensor(0x10, 0x1c);
+
+			HI253WriteCmosSensor(0x03, 0x20);
+			HI253WriteCmosSensor(0x18, 0x38);
+
+			HI253WriteCmosSensor(0x83, 0x01); //0x017a00
+			HI253WriteCmosSensor(0x84, 0xa5);
+			HI253WriteCmosSensor(0x85, 0xe0);
+
+			HI253WriteCmosSensor(0x86, 0x01); //0x0200
+			HI253WriteCmosSensor(0x87, 0xf4);
+
+			HI253WriteCmosSensor(0x88, 0x04); //0x05e800//06
+			HI253WriteCmosSensor(0x89, 0xf1); //cc mj
+			HI253WriteCmosSensor(0x8a, 0xa0); //3c mj
+
+			HI253WriteCmosSensor(0x8b, 0x7e);
+			HI253WriteCmosSensor(0x8c, 0xf4);
+			HI253WriteCmosSensor(0x8d, 0x69);
+			HI253WriteCmosSensor(0x8e, 0x78);
+
+			HI253WriteCmosSensor(0x9c, 0x0f);
+			HI253WriteCmosSensor(0x9d, 0xa0);
+			HI253WriteCmosSensor(0x9e, 0x01);
+			HI253WriteCmosSensor(0x9f, 0xf4);
+
+			HI253WriteCmosSensor(0x03,0x00); 	
+			HI253_Sleep_Mode = (HI253ReadCmosSensor(0x01) & 0xfe);
+			HI253_Sleep_Mode |= 0x00;
+			HI253WriteCmosSensor(0x01, HI253_Sleep_Mode);
+
+			HI253WriteCmosSensor(0x03, 0x20);
+			HI253WriteCmosSensor(0x10, 0x8c);
+
+			HI253WriteCmosSensor(0x18, 0x30);
+
+			Sleep(10);
+	 	}
+
+		/*mingji add for set the default brightness in preview*/
+		//HI253WriteCmosSensor(0x03, 0x10);
+		//HI253WriteCmosSensor(0x41, 0x12);
+  	}
 } /* HI253NightMode */
 
 
@@ -1281,6 +2583,8 @@
 *************************************************************************/
 UINT32 HI253Open(void)
 {
+  SENSORDB("[MINGJI]HI253Open() calling;\n");
+
   kal_uint16 SensorId = 0;
   //1 software reset sensor and wait (to sensor)
   HI253SetPage(0x00);
@@ -1321,6 +2625,8 @@
 *************************************************************************/
 UINT32 HI253GetSensorID(UINT32 *sensorID) 
 {
+	SENSORDB("[MINGJI]HI253GetSensorID() calling;\n");
+
 	//1 software reset sensor and wait (to sensor)
 	HI253SetPage(0x00);
 	HI253WriteCmosSensor(0x01,0xf1);
@@ -1333,7 +2639,7 @@
 	
 	if(*sensorID != HI253_SENSOR_ID)
 	{
-        *sensorID = 0xFFFFFFFF; 
+		*sensorID =0xffffffff;
 	  return ERROR_SENSOR_CONNECT_FAIL;
 	}
 	return ERROR_NONE;
@@ -1357,6 +2663,7 @@
 *************************************************************************/
 UINT32 HI253Close(void)
 {
+  SENSORDB("[MINGJI]HI253Close() calling;\n");
   return ERROR_NONE;
 } /* HI253Close() */
 
@@ -1377,30 +2684,31 @@
 * GLOBALS AFFECTED
 *
 *************************************************************************/
+kal_bool Normalcap =KAL_TRUE ;
+
 UINT32 HI253Preview(MSDK_SENSOR_EXPOSURE_WINDOW_STRUCT *image_window,
                       MSDK_SENSOR_CONFIG_STRUCT *sensor_config_data)
 {
-  kal_uint32 LineLength, EXP100, EXP120, EXPMIN, EXPUNIT; 
+  SENSORDB("[MINGJI]HI253Preview() calling;\n");
+
+  kal_uint32 LineLength, EXP100, EXP120, EXPMIN, EXPUNIT,HI253_OPCLK,Clock_Divider=1; 
 
   SENSORDB("\n\n\n\n\n\n");
   SENSORDB("[HI253]HI253Preview\n");
   /* For change max frame rate only need modify HI253Status.MaxFrameRate */
-  spin_lock(&hi253_drv_lock);
   HI253Status.MaxFrameRate = HI253_MAX_FPS;
-  spin_unlock(&hi253_drv_lock);
-  HI253SetMirror(IMAGE_NORMAL);
+  HI253SetMirror(IMAGE_HV_MIRROR);
 
-	spin_lock(&hi253_drv_lock);
-  HI253Status.PvDummyPixels = 424;
-  spin_unlock(&hi253_drv_lock);
+  HI253Status.PvDummyPixels = 360;
   LineLength = HI253_PV_PERIOD_PIXEL_NUMS + HI253Status.PvDummyPixels;
-  spin_lock(&hi253_drv_lock);
   HI253Status.MiniFrameRate = HI253_FPS(10);  
-  HI253Status.PvDummyLines = HI253Status.PvOpClk * 1000000 * HI253_FRAME_RATE_UNIT / LineLength / HI253Status.MaxFrameRate -  HI253_PV_PERIOD_LINE_NUMS; 
-  spin_unlock(&hi253_drv_lock);
+
+  HI253_OPCLK = HI253Status.PvOpClk*100000*2*1/Clock_Divider*1/2;
+  HI253Status.PvDummyLines =  HI253_OPCLK * 1000000 * HI253_FRAME_RATE_UNIT / LineLength / HI253Status.MaxFrameRate -  HI253_PV_PERIOD_LINE_NUMS; 
   
   HI253SetPage(0x00); 
-  HI253WriteCmosSensor(0x10, 0x13); 
+  HI253WriteCmosSensor(0x10, 0x11);//2012.03.12 
+  HI253WriteCmosSensor(0x11, 0x90); 
   HI253WriteCmosSensor(0x12, 0x04); 
   HI253WriteCmosSensor(0x20, 0x00); // WINROWH
   HI253WriteCmosSensor(0x21, 0x04); // WINROWL
@@ -1408,42 +2716,44 @@
   HI253WriteCmosSensor(0x23, 0x07); // WINCOLL
   
   HI253WriteCmosSensor(0x3f, 0x00);
-  HI253WriteCmosSensor(0x40, (HI253Status.PvDummyPixels>>8)&0xff);
-  HI253WriteCmosSensor(0x41, (HI253Status.PvDummyPixels>>0)&0xff);
-  HI253WriteCmosSensor(0x42, (HI253Status.PvDummyLines>>8)&0xff);
-  HI253WriteCmosSensor(0x43, (HI253Status.PvDummyLines>>0)&0xff); 
+  HI253WriteCmosSensor(0x40, 0x01);
+  HI253WriteCmosSensor(0x41, 0x68);
+  HI253WriteCmosSensor(0x42, 0x00);
+  HI253WriteCmosSensor(0x43, 0x14); 
+  //HI253WriteCmosSensor(0x40, (HI253Status.PvDummyPixels>>8)&0xff);
+  //HI253WriteCmosSensor(0x41, (HI253Status.PvDummyPixels>>0)&0xff);
+  //HI253WriteCmosSensor(0x42, (HI253Status.PvDummyLines>>8)&0xff);
+  //HI253WriteCmosSensor(0x43, (HI253Status.PvDummyLines>>0)&0xff); 
   HI253WriteCmosSensor(0x3f, 0x02);
 
   HI253SetPage(0x12);
-  HI253WriteCmosSensor(0x20, 0x00);
-  HI253WriteCmosSensor(0x21, 0x00);
-  HI253WriteCmosSensor(0x90, 0x00);  
+  HI253WriteCmosSensor(0x20, 0x0f);
+  HI253WriteCmosSensor(0x21, 0x0f);
+  HI253WriteCmosSensor(0x90, 0x5d);  
   HI253SetPage(0x13);
-  HI253WriteCmosSensor(0x80, 0x00);
-
-  EXP100 = (HI253Status.PvOpClk * 1000000 / LineLength) * LineLength / 100 / 8; 
-  EXP120 = (HI253Status.PvOpClk * 1000000 / LineLength) * LineLength / 120 / 8; 
-  EXPMIN = EXPUNIT = LineLength / 4; 
-
-  SENSORDB("[HI253]DummyPixel:%d DummyLine:%d; LineLenght:%d,Plck:%d\n",HI253Status.PvDummyPixels,HI253Status.PvDummyLines,LineLength,HI253Status.PvOpClk);
-  SENSORDB("[HI253]EXP100:%d EXP120:%d;\n",EXP100,EXP120);
+  HI253WriteCmosSensor(0x80, 0xFD);
 
   HI253SetPage(0x20);
-  HI253WriteCmosSensor(0x83, (HI253Status.PvShutter >> 16) & 0xFF);
-  HI253WriteCmosSensor(0x84, (HI253Status.PvShutter >> 8) & 0xFF);
-  HI253WriteCmosSensor(0x85, HI253Status.PvShutter & 0xFF);  
-  HI253WriteCmosSensor(0x86, (EXPMIN>>8)&0xff);//EXPMIN
-  HI253WriteCmosSensor(0x87, (EXPMIN>>0)&0xff);
-  HI253WriteCmosSensor(0x8b, (EXP100>>8)&0xff);//EXP100
-  HI253WriteCmosSensor(0x8c, (EXP100>>0)&0xff);
-  HI253WriteCmosSensor(0x8d, (EXP120>>8)&0xff);//EXP120
-  HI253WriteCmosSensor(0x8e, (EXP120>>0)&0xff);
-  HI253WriteCmosSensor(0x9c, (HI253_PV_EXPOSURE_LIMITATION>>8)&0xff);
-  HI253WriteCmosSensor(0x9d, (HI253_PV_EXPOSURE_LIMITATION>>0)&0xff);  
-  HI253WriteCmosSensor(0x9e, (EXPUNIT>>8)&0xff);//EXP Unit
-  HI253WriteCmosSensor(0x9f, (EXPUNIT>>0)&0xff);
-  
-  HI253SetAeMode(KAL_TRUE);
+    HI253WriteCmosSensor(0x2a, 0xf0); // 0x35 for fixed frame rate 0x03 0xf0
+  HI253WriteCmosSensor(0x2b, 0x34); // 0x35 for fixed frame rate, 0x34 for dynamic frame rate  0x34
+  //HI253WriteCmosSensor(0x83, 0x01);
+  // HI253WriteCmosSensor(0x84, 0xda);
+  //HI253WriteCmosSensor(0x85, 0x9c);  
+  HI253WriteCmosSensor(0x86, 0x01);//EXPMIN
+  HI253WriteCmosSensor(0x87, 0xf4);
+  HI253WriteCmosSensor(0x8b, 0x7e);//EXP100
+  HI253WriteCmosSensor(0x8c, 0xf4);
+  HI253WriteCmosSensor(0x8d, 0x69);//EXP120
+  HI253WriteCmosSensor(0x8e, 0x78);
+  HI253WriteCmosSensor(0x9c, 0x0f);
+  HI253WriteCmosSensor(0x9d, 0xa0);  
+  HI253WriteCmosSensor(0x9e, 0x01);//EXP Unit
+  HI253WriteCmosSensor(0x9f, 0xf4);
+  
+  //HI253SetAeMode(KAL_TRUE);
+  HI253WriteCmosSensor(0x03, 0x20);//EXP Unit
+  HI253WriteCmosSensor(0x10, 0x9c);
+  Normalcap =KAL_TRUE ;
   HI253SetAwbMode(KAL_TRUE);
   
   return ERROR_NONE;
@@ -1452,9 +2762,10 @@
 UINT32 HI253Capture(MSDK_SENSOR_EXPOSURE_WINDOW_STRUCT *image_window,
                       MSDK_SENSOR_CONFIG_STRUCT *sensor_config_data)
 {
-  kal_uint32 LineLength, EXP100, EXP120, EXPMIN, EXPUNIT, CapShutter; 
+  SENSORDB("[MINGJI]HI253Capture() calling;\n");
+
+  kal_uint32 LineLength, EXP100, EXP120, EXPMIN, EXPUNIT, CapShutter,HI253_OPCLK,Clock_Divider=1; 
   kal_uint8 ClockDivider;
-  kal_uint32 temp;
   SENSORDB("\n\n\n\n\n\n");
   SENSORDB("[HI253]HI253Capture!!!!!!!!!!!!!\n");
   SENSORDB("[HI253]Image Target Width: %d; Height: %d\n",image_window->ImageTargetWidth, image_window->ImageTargetHeight);
@@ -1463,14 +2774,17 @@
     return ERROR_NONE;    /* Less than PV Mode */
 
   HI253WriteCmosSensor(0x01, 0xf9); // Sleep ON
-  HI253SetAeMode(KAL_FALSE);
+  //HI253SetAeMode(KAL_FALSE);
+  HI253WriteCmosSensor(0x03,0x20);
+  HI253WriteCmosSensor(0x10,0x1c);  
   HI253SetAwbMode(KAL_FALSE);
 
+  if(Normalcap==KAL_TRUE)
+  	{
   HI253SetPage(0x20);
-  temp=(HI253ReadCmosSensor(0x80) << 16)|(HI253ReadCmosSensor(0x81) << 8)|HI253ReadCmosSensor(0x82);
-  spin_lock(&hi253_drv_lock);
-  HI253Status.PvShutter = temp;  
-  spin_unlock(&hi253_drv_lock);
+          HI253Status.PvShutter = (HI253ReadCmosSensor(0x80) << 16)|(HI253ReadCmosSensor(0x81) << 8)|HI253ReadCmosSensor(0x82);
+          Normalcap =KAL_FALSE;
+  	}
 
   // 1600*1200   
   HI253SetPage(0x00);  
@@ -1478,37 +2792,68 @@
   HI253WriteCmosSensor(0x3f,0x00);  
   HI253SetPage(0x12); 
   HI253WriteCmosSensor(0x20, 0x0f);
-  HI253WriteCmosSensor(0x21, 0x0f);
+  	HI253WriteCmosSensor(0x21, 0x0f);//modify-2012-07-12
   HI253WriteCmosSensor(0x90, 0x5d);    
   HI253SetPage(0x13);
   HI253WriteCmosSensor(0x80, 0xfd);   
+  	HI253WriteCmosSensor(0x24, 0x12);//modify-2012-07-12
+  	HI253WriteCmosSensor(0x26, 0x18);
+ 	//Out1 Edge  
+	HI253WriteCmosSensor(0x56, 0x18);
+	HI253WriteCmosSensor(0x57, 0x1c);////1C
+	HI253WriteCmosSensor(0x58, 0x1b);
+	HI253WriteCmosSensor(0x59, 0x15);
+	HI253WriteCmosSensor(0x5a, 0x18);//18
+	HI253WriteCmosSensor(0x5b, 0x15);
+	
+	//Indoor Edge
+	HI253WriteCmosSensor(0x5c, 0x0b);
+	HI253WriteCmosSensor(0x5d, 0x15);//0C
+	HI253WriteCmosSensor(0x5e, 0x0a);
+	HI253WriteCmosSensor(0x5f, 0x08);
+	HI253WriteCmosSensor(0x60, 0x15);//09
+	HI253WriteCmosSensor(0x61, 0x08);
+	
+	//Dark1 Edge
+	HI253WriteCmosSensor(0x62, 0x08);
+	HI253WriteCmosSensor(0x63, 0x10);//08
+	HI253WriteCmosSensor(0x64, 0x08);
+	HI253WriteCmosSensor(0x65, 0x06);
+	HI253WriteCmosSensor(0x66, 0x10);//16
+	HI253WriteCmosSensor(0x67, 0x06);
   /*capture 1600*1200 start x, y*/
   HI253SetPage(0x00);
-  HI253WriteCmosSensor(0x20, 0x00); // WINROWH
+  	HI253WriteCmosSensor(0x20, 0x00); // WINROWH//modify-2012-07-12
   HI253WriteCmosSensor(0x21, 0x0f); // WINROWL
   HI253WriteCmosSensor(0x22, 0x00); // WINCOLH
   HI253WriteCmosSensor(0x23, 0x19); // WINCOLL
-  spin_lock(&hi253_drv_lock);
+
   HI253Status.CapDummyPixels = 360;
-  HI253Status.CapDummyLines = 52; /* 10 FPS, 104 for 9.6 FPS*/
-  spin_unlock(&hi253_drv_lock);
+  HI253Status.CapDummyLines = 20; /* 10 FPS, 104 for 9.6 FPS*/
+
   LineLength = HI253_FULL_PERIOD_PIXEL_NUMS + HI253Status.CapDummyPixels;
-  spin_lock(&hi253_drv_lock);
   HI253Status.CapOpClk = 26;  
-  spin_unlock(&hi253_drv_lock);
-  EXP100 = (HI253Status.CapOpClk * 1000000 / LineLength) * LineLength / 100 / 8; 
-  EXP120 = (HI253Status.CapOpClk * 1000000 / LineLength) * LineLength / 120 / 8; 
+
+ // HI253_OPCLK =HI253Status.CapOpClk*100000*5/2*1/Clock_Divider*1/2;
+  HI253_OPCLK =HI253Status.CapOpClk*100000*2*1/2*1/2;
+  EXP100 = (HI253_OPCLK  * 1000000 / LineLength / 100) * LineLength / 8; 
+  EXP120 = (HI253_OPCLK  * 1000000 / LineLength/ 120) * LineLength  / 8; 
   EXPMIN = EXPUNIT = LineLength / 4; 
   
   HI253SetPage(0x20);
   HI253WriteCmosSensor(0x86, (EXPMIN>>8)&0xff);//EXPMIN
   HI253WriteCmosSensor(0x87, (EXPMIN>>0)&0xff);
+
+  //HI253WriteCmosSensor(0x88, 0x0c);////2012.03.12
+  //HI253WriteCmosSensor(0x89, 0x5c);
+  //HI253WriteCmosSensor(0x8a, 0x10);//Add
+  
   HI253WriteCmosSensor(0x8b, (EXP100>>8)&0xff);//EXP100
   HI253WriteCmosSensor(0x8c, (EXP100>>0)&0xff);
   HI253WriteCmosSensor(0x8d, (EXP120>>8)&0xff);//EXP120
   HI253WriteCmosSensor(0x8e, (EXP120>>0)&0xff);  
-  HI253WriteCmosSensor(0x9c, (HI253_FULL_EXPOSURE_LIMITATION>>8)&0xff);
-  HI253WriteCmosSensor(0x9d, (HI253_FULL_EXPOSURE_LIMITATION>>0)&0xff);  
+  HI253WriteCmosSensor(0x9c, 0x0f);
+  HI253WriteCmosSensor(0x9d, 0xa0);  
   HI253WriteCmosSensor(0x9e, (EXPUNIT>>8)&0xff);//EXP Unit
   HI253WriteCmosSensor(0x9f, (EXPUNIT>>0)&0xff);
 
@@ -1524,7 +2869,7 @@
   }
   else
   {
-    ClockDivider = 0; //OpCLock 26M
+    ClockDivider = 1; //OpCLock 26M
   }
   SENSORDB("[HI253]ClockDivider: %d \n",ClockDivider);
   HI253WriteCmosSensor(0x12, 0x04|ClockDivider);
@@ -1536,11 +2881,15 @@
   HI253WriteCmosSensor(0x84, (CapShutter >> 8) & 0xFF);
   HI253WriteCmosSensor(0x85, CapShutter & 0xFF);  
   HI253WriteCmosSensor(0x01, 0xf8); // Sleep OFF  
+  //HI253SetPage(0x13);
+  //printk("HI253Capture %d",HI253ReadCmosSensor(0x80));
   return ERROR_NONE;
 } /* HI253Capture() */
 
 UINT32 HI253GetResolution(MSDK_SENSOR_RESOLUTION_INFO_STRUCT *pSensorResolution)
 {
+  SENSORDB("[MINGJI]HI253GetResolution() calling;\n");
+
   pSensorResolution->SensorFullWidth = HI253_FULL_WIDTH;
   pSensorResolution->SensorFullHeight = HI253_FULL_HEIGHT;
   pSensorResolution->SensorPreviewWidth = HI253_PV_WIDTH;
@@ -1552,6 +2901,8 @@
                     MSDK_SENSOR_INFO_STRUCT *pSensorInfo,
                     MSDK_SENSOR_CONFIG_STRUCT *pSensorConfigData)
 {
+  SENSORDB("[MINGJI]HI253GetInfo() calling;\n");
+
   pSensorInfo->SensorPreviewResolutionX=HI253_PV_WIDTH;
   pSensorInfo->SensorPreviewResolutionY=HI253_PV_HEIGHT;
   pSensorInfo->SensorFullResolutionX=HI253_FULL_WIDTH;
@@ -1563,7 +2914,7 @@
   pSensorInfo->SensorWebCamCaptureFrameRate=15;
   pSensorInfo->SensorResetActiveHigh=FALSE;
   pSensorInfo->SensorResetDelayCount=1;
-  pSensorInfo->SensorOutputDataFormat=SENSOR_OUTPUT_FORMAT_YUYV; // back for 16 SENSOR_OUTPUT_FORMAT_UYVY;
+  pSensorInfo->SensorOutputDataFormat=SENSOR_OUTPUT_FORMAT_VYUY; // back for 16 SENSOR_OUTPUT_FORMAT_UYVY;
   pSensorInfo->SensorClockPolarity=SENSOR_CLOCK_POLARITY_LOW;
   pSensorInfo->SensorClockFallingPolarity=SENSOR_CLOCK_POLARITY_LOW;
   pSensorInfo->SensorHsyncPolarity = SENSOR_CLOCK_POLARITY_LOW;
@@ -1626,6 +2977,8 @@
 UINT32 HI253Control(MSDK_SCENARIO_ID_ENUM ScenarioId, MSDK_SENSOR_EXPOSURE_WINDOW_STRUCT *pImageWindow,
                     MSDK_SENSOR_CONFIG_STRUCT *pSensorConfigData)
 {
+  SENSORDB("[MINGJI]HI253Control() calling;\n");
+
   switch (ScenarioId)
   {
   case MSDK_SCENARIO_ID_CAMERA_PREVIEW:
@@ -1646,6 +2999,8 @@
 
 BOOL HI253SetWb(UINT16 Para)
 {
+  SENSORDB("[MINGJI]HI253SetWb() calling;\n");
+
   SENSORDB("[HI253]HI253SetWb Para:%d;\n",Para);
   switch (Para)
   {
@@ -1653,57 +3008,62 @@
       HI253SetAwbMode(KAL_FALSE);
       break;                     
     case AWB_MODE_AUTO:
-      HI253SetAwbMode(KAL_TRUE);
+        HI253WriteCmosSensor(0x03, 0x22);			
+		HI253WriteCmosSensor(0x11, 0x2e);		
+		HI253WriteCmosSensor(0x83, 0x5e);
+		HI253WriteCmosSensor(0x84, 0x12);
+		HI253WriteCmosSensor(0x85, 0x5e);
+		HI253WriteCmosSensor(0x86, 0x22);
       break;
     case AWB_MODE_CLOUDY_DAYLIGHT: //cloudy
-      HI253SetAwbMode(KAL_FALSE);
-      HI253WriteCmosSensor(0x80, 0x49);
-      HI253WriteCmosSensor(0x81, 0x20);
-      HI253WriteCmosSensor(0x82, 0x24);
-      HI253WriteCmosSensor(0x83, 0x50);
-      HI253WriteCmosSensor(0x84, 0x45);
-      HI253WriteCmosSensor(0x85, 0x24);
-      HI253WriteCmosSensor(0x86, 0x1e);
+        HI253WriteCmosSensor(0x03, 0x22);
+		HI253WriteCmosSensor(0x11, 0x28);
+		HI253WriteCmosSensor(0x80, 0x71);
+		HI253WriteCmosSensor(0x82, 0x2b);
+		HI253WriteCmosSensor(0x83, 0x72);
+		HI253WriteCmosSensor(0x84, 0x70);
+		HI253WriteCmosSensor(0x85, 0x2b);
+		HI253WriteCmosSensor(0x86, 0x28);
       break;
     case AWB_MODE_DAYLIGHT: //sunny
-      HI253SetAwbMode(KAL_FALSE);
-      HI253WriteCmosSensor(0x80, 0x45);
-      HI253WriteCmosSensor(0x81, 0x20);
-      HI253WriteCmosSensor(0x82, 0x27);
-      HI253WriteCmosSensor(0x83, 0x44);
-      HI253WriteCmosSensor(0x84, 0x3f);
-      HI253WriteCmosSensor(0x85, 0x29);
+        HI253WriteCmosSensor(0x03, 0x22);
+		HI253WriteCmosSensor(0x11, 0x28);		  
+		HI253WriteCmosSensor(0x80, 0x59);
+		HI253WriteCmosSensor(0x82, 0x29);
+		HI253WriteCmosSensor(0x83, 0x60);
+		HI253WriteCmosSensor(0x84, 0x50);
+		HI253WriteCmosSensor(0x85, 0x2f);
       HI253WriteCmosSensor(0x86, 0x23);
       break;
     case AWB_MODE_INCANDESCENT: //office
-      HI253SetAwbMode(KAL_FALSE);
-      HI253WriteCmosSensor(0x80, 0x33);
-      HI253WriteCmosSensor(0x81, 0x20);
-      HI253WriteCmosSensor(0x82, 0x3d);
+        HI253WriteCmosSensor(0x03, 0x22);
+		HI253WriteCmosSensor(0x11, 0x28);		  
+		HI253WriteCmosSensor(0x80, 0x29);
+		HI253WriteCmosSensor(0x82, 0x54);
       HI253WriteCmosSensor(0x83, 0x2e);
-      HI253WriteCmosSensor(0x84, 0x24);
-      HI253WriteCmosSensor(0x85, 0x43);
-      HI253WriteCmosSensor(0x86, 0x3d);
+		HI253WriteCmosSensor(0x84, 0x23);
+		HI253WriteCmosSensor(0x85, 0x58);
+		HI253WriteCmosSensor(0x86, 0x4f);
       break;
     case AWB_MODE_TUNGSTEN: //home
-      HI253SetAwbMode(KAL_FALSE);
-      HI253WriteCmosSensor(0x80, 0x25);
+        HI253WriteCmosSensor(0x03, 0x22);
+		HI253WriteCmosSensor(0x80, 0x24);
       HI253WriteCmosSensor(0x81, 0x20);
-      HI253WriteCmosSensor(0x82, 0x44);
-      HI253WriteCmosSensor(0x83, 0x22);
-      HI253WriteCmosSensor(0x84, 0x1e);
-      HI253WriteCmosSensor(0x85, 0x50);
-      HI253WriteCmosSensor(0x86, 0x45);
+		HI253WriteCmosSensor(0x82, 0x58);
+		HI253WriteCmosSensor(0x83, 0x27);
+		HI253WriteCmosSensor(0x84, 0x22);
+		HI253WriteCmosSensor(0x85, 0x58);
+		HI253WriteCmosSensor(0x86, 0x52);
       break;
     case AWB_MODE_FLUORESCENT:
-      HI253SetAwbMode(KAL_FALSE);
-      HI253WriteCmosSensor(0x80, 0x45);
-      HI253WriteCmosSensor(0x81, 0x20);
-      HI253WriteCmosSensor(0x82, 0x2f);
-      HI253WriteCmosSensor(0x83, 0x38);
-      HI253WriteCmosSensor(0x84, 0x32);
-      HI253WriteCmosSensor(0x85, 0x39);
-      HI253WriteCmosSensor(0x86, 0x33);
+        HI253WriteCmosSensor(0x03, 0x22);
+		HI253WriteCmosSensor(0x11, 0x28);
+		HI253WriteCmosSensor(0x80, 0x41);
+		HI253WriteCmosSensor(0x82, 0x42);
+		HI253WriteCmosSensor(0x83, 0x44);
+		HI253WriteCmosSensor(0x84, 0x34);
+		HI253WriteCmosSensor(0x85, 0x46);
+		HI253WriteCmosSensor(0x86, 0x3a);
     default:
       return KAL_FALSE;
   }
@@ -1712,80 +3072,111 @@
 
 BOOL HI253SetEffect(UINT16 Para)
 {
+  SENSORDB("[MINGJI]HI253SetEffect() calling;\n");
+
   SENSORDB("[HI253]HI253SetEffect Para:%d;\n",Para);
   switch (Para)
   {
     case MEFFECT_OFF:
-      HI253SetPage(0x10);  
+        HI253WriteCmosSensor(0x03, 0x10);
       HI253WriteCmosSensor(0x11, 0x03);
       HI253WriteCmosSensor(0x12, 0x30);
-      HI253WriteCmosSensor(0x13, 0x00);
-      HI253WriteCmosSensor(0x40, 0x00);
+		HI253WriteCmosSensor(0x13, 0x0a);
+		HI253WriteCmosSensor(0x44, 0x80);
+		HI253WriteCmosSensor(0x45, 0x80);
+		HI253WriteCmosSensor(0x4a, 0x80);
       break;
     case MEFFECT_SEPIA:
-      HI253SetPage(0x10);  
+        HI253WriteCmosSensor(0x03, 0x10);
       HI253WriteCmosSensor(0x11, 0x03);
-      HI253WriteCmosSensor(0x12, 0x23);
-      HI253WriteCmosSensor(0x13, 0x00);
-      HI253WriteCmosSensor(0x40, 0x00);
+		HI253WriteCmosSensor(0x12, 0x33);
+		HI253WriteCmosSensor(0x13, 0x02);
       HI253WriteCmosSensor(0x44, 0x70);
       HI253WriteCmosSensor(0x45, 0x98);
-      HI253WriteCmosSensor(0x47, 0x7f);
-      HI253WriteCmosSensor(0x03, 0x13);
-      HI253WriteCmosSensor(0x20, 0x07);
-      HI253WriteCmosSensor(0x21, 0x07);
+		HI253WriteCmosSensor(0x4a, 0x80);
+
       break;
     case MEFFECT_NEGATIVE://----datasheet
-      HI253SetPage(0x10);  
+        HI253WriteCmosSensor(0x03, 0x10);
       HI253WriteCmosSensor(0x11, 0x03);
-      HI253WriteCmosSensor(0x12, 0x28);
-      HI253WriteCmosSensor(0x13, 0x00);
-      HI253WriteCmosSensor(0x40, 0x00);
-      HI253WriteCmosSensor(0x44, 0x80);
-      HI253WriteCmosSensor(0x45, 0x80);
-      HI253WriteCmosSensor(0x47, 0x7f);
-      HI253WriteCmosSensor(0x03, 0x13);
-      HI253WriteCmosSensor(0x20, 0x07);
-      HI253WriteCmosSensor(0x21, 0x07);
+		HI253WriteCmosSensor(0x12, 0x38);
+		HI253WriteCmosSensor(0x13, 0x02);
+		HI253WriteCmosSensor(0x14, 0x00);
+		HI253WriteCmosSensor(0x4a, 0x80);
       break;
     case MEFFECT_SEPIAGREEN://----datasheet aqua
-      HI253SetPage(0x10);  
+        HI253WriteCmosSensor(0x03, 0x10);
       HI253WriteCmosSensor(0x11, 0x03);
-      HI253WriteCmosSensor(0x12, 0x23);
-      HI253WriteCmosSensor(0x13, 0x00);
-      HI253WriteCmosSensor(0x40, 0x00);
-      HI253WriteCmosSensor(0x44, 0x80);
-      HI253WriteCmosSensor(0x45, 0x04);
-      HI253WriteCmosSensor(0x47, 0x7f);
-      HI253WriteCmosSensor(0x03, 0x13);
-      HI253WriteCmosSensor(0x20, 0x07);
-      HI253WriteCmosSensor(0x21, 0x07);
+		HI253WriteCmosSensor(0x12, 0x33);
+		HI253WriteCmosSensor(0x13, 0x02);
+		HI253WriteCmosSensor(0x44, 0x30);
+		HI253WriteCmosSensor(0x45, 0x50);
+		HI253WriteCmosSensor(0x4a, 0x80);
       break;
     case MEFFECT_SEPIABLUE:
-      HI253SetPage(0x10);  
+        HI253WriteCmosSensor(0x03, 0x10);
       HI253WriteCmosSensor(0x11, 0x03);
-      HI253WriteCmosSensor(0x12, 0x23);
-      HI253WriteCmosSensor(0x13, 0x00);
-      HI253WriteCmosSensor(0x40, 0x00);
+		HI253WriteCmosSensor(0x12, 0x33);
+		HI253WriteCmosSensor(0x13, 0x02);
       HI253WriteCmosSensor(0x44, 0xb0);
       HI253WriteCmosSensor(0x45, 0x40);
-      HI253WriteCmosSensor(0x47, 0x7f);
-      HI253WriteCmosSensor(0x03, 0x13);
-      HI253WriteCmosSensor(0x20, 0x07);
-      HI253WriteCmosSensor(0x21, 0x07);
+		HI253WriteCmosSensor(0x4a, 0x80);
       break;
     case MEFFECT_MONO: //----datasheet black & white
-      HI253SetPage(0x10);  
+        HI253WriteCmosSensor(0x03, 0x10);
+		HI253WriteCmosSensor(0x11, 0x03);
+		HI253WriteCmosSensor(0x12, 0x33);
+		HI253WriteCmosSensor(0x13, 0x02);
+		HI253WriteCmosSensor(0x44, 0x80);
+		HI253WriteCmosSensor(0x45, 0x80);
+		HI253WriteCmosSensor(0x4a, 0x80);
+		break; 
+case MEFFECT_SOLARIZE:
+		HI253WriteCmosSensor(0x03, 0x10);
+		HI253WriteCmosSensor(0x11, 0x03);
+		HI253WriteCmosSensor(0x12, 0x30);
+		HI253WriteCmosSensor(0x13, 0x0a);
+		HI253WriteCmosSensor(0x44, 0x80);
+		HI253WriteCmosSensor(0x45, 0x80);
+		HI253WriteCmosSensor(0x4a, 0xf0);
+
+		break;
+case MEFFECT_AQUA:
+		HI253WriteCmosSensor(0x03, 0x10);
       HI253WriteCmosSensor(0x11, 0x03);
-      HI253WriteCmosSensor(0x12, 0x23);
+		HI253WriteCmosSensor(0x12, 0x33);
       HI253WriteCmosSensor(0x13, 0x00);
-      HI253WriteCmosSensor(0x40, 0x00);
+		HI253WriteCmosSensor(0x44, 0x80);
+		HI253WriteCmosSensor(0x45, 0x04);
+		HI253WriteCmosSensor(0x4a, 0x80);
+		break; 
+case MEFFFECT_BLACKBOARD:
+HI253WriteCmosSensor(0x03, 0x10);
+		HI253WriteCmosSensor(0x11, 0x13);
+		HI253WriteCmosSensor(0x12, 0x30);
+		HI253WriteCmosSensor(0x13, 0x0a);
       HI253WriteCmosSensor(0x44, 0x80);
       HI253WriteCmosSensor(0x45, 0x80);
-      HI253WriteCmosSensor(0x47, 0x7f);
-      HI253WriteCmosSensor(0x03, 0x13);
-      HI253WriteCmosSensor(0x20, 0x07);
-      HI253WriteCmosSensor(0x21, 0x07);
+		HI253WriteCmosSensor(0x4a, 0x80);
+		break;
+case MEFFECT_POSTERIZE:
+		HI253WriteCmosSensor(0x03, 0x10);
+		HI253WriteCmosSensor(0x11, 0x0b);
+		HI253WriteCmosSensor(0x12, 0x30);
+		HI253WriteCmosSensor(0x13, 0x00);
+		HI253WriteCmosSensor(0x44, 0x80);
+		HI253WriteCmosSensor(0x45, 0x80);
+		HI253WriteCmosSensor(0x4a, 0x80);
+
+		break;
+case MEFFECT_WHITEBOARD:
+		HI253WriteCmosSensor(0x03, 0x10);
+		HI253WriteCmosSensor(0x11, 0x13);
+		HI253WriteCmosSensor(0x12, 0x38);
+		HI253WriteCmosSensor(0x13, 0x0a);
+		HI253WriteCmosSensor(0x44, 0x80);
+		HI253WriteCmosSensor(0x45, 0x80);
+		HI253WriteCmosSensor(0x4a, 0x80);
       break;
     default:
       return KAL_FALSE;
@@ -1796,35 +3187,55 @@
 
 BOOL HI253SetBanding(UINT16 Para)
 {
+	SENSORDB("[MINGJI]HI253SetBanding() calling;\n");
+
   SENSORDB("[HI253]HI253SetBanding Para:%d;\n",Para);
-  spin_lock(&hi253_drv_lock);
   HI253Status.Banding = Para;
-  spin_unlock(&hi253_drv_lock);
   if (HI253Status.Banding == AE_FLICKER_MODE_50HZ) 
   	{
-  	spin_lock(&hi253_drv_lock);
     HI253Status.AECTL1 |= 0x10;
-	spin_unlock(&hi253_drv_lock);
+		HI253SetPage(0x20); 
+		HI253WriteCmosSensor(0x18, 0x38); 
+		
+		HI253WriteCmosSensor(0x83, 0x01); 
+		HI253WriteCmosSensor(0x84, 0x7c);
+		HI253WriteCmosSensor(0x85, 0xdc);
+
+
+		HI253WriteCmosSensor(0x10,HI253Status.AECTL1);
+
+		HI253WriteCmosSensor(0x18, 0x30); 
+
+		//HI253Status.AECTL1 |= 0x10;
   	}
   else
   	{
-  	spin_lock(&hi253_drv_lock);
     HI253Status.AECTL1 &= (~0x10); 
-	spin_unlock(&hi253_drv_lock);
-  	}
-  
   HI253SetPage(0x20);  
+		HI253WriteCmosSensor(0x18, 0x38); 
+
+		HI253WriteCmosSensor(0x83, 0x01);  
+		HI253WriteCmosSensor(0x84, 0xa5);
+		HI253WriteCmosSensor(0x85, 0xe0);
+
+
   HI253WriteCmosSensor(0x10,HI253Status.AECTL1);
+		HI253WriteCmosSensor(0x18, 0x30); 
+
+		//HI253Status.AECTL1 &= (~0x10); 
+	}
+	//HI253SetPage(0x20);  
+	//HI253WriteCmosSensor(0x10,HI253Status.AECTL1);
   return TRUE;
 } /* HI253SetBanding */
 
 BOOL HI253SetExposure(UINT16 Para)
 {
+  SENSORDB("[MINGJI]HI253SetExposure() calling;\n");
+
   SENSORDB("[HI253]HI253SetExposure Para:%d;\n",Para);
   HI253SetPage(0x10);  
-  spin_lock(&hi253_drv_lock);
   HI253Status.ISPCTL3 |= 0x10;
-  spin_unlock(&hi253_drv_lock);
   HI253WriteCmosSensor(0x12,HI253Status.ISPCTL3);//make sure the Yoffset control is opened.
   
   switch (Para)
@@ -1842,7 +3253,7 @@
       HI253WriteCmosSensor(0x40,0x98);
       break;
     case AE_EV_COMP_00:                /* EV 0 */
-      HI253WriteCmosSensor(0x40,0x85);
+      HI253WriteCmosSensor(0x40,0x84);
       break;
     case AE_EV_COMP_03:              /* EV +0.5 */
       HI253WriteCmosSensor(0x40,0x18);
@@ -1864,6 +3275,8 @@
 
 UINT32 HI253YUVSensorSetting(FEATURE_ID Cmd, UINT32 Para)
 {
+  SENSORDB("[MINGJI]HI253YUVSensorSetting() calling;\n");
+
   switch (Cmd) {
     case FID_SCENE_MODE:
       if (Para == SCENE_MODE_OFF)
@@ -1888,7 +3301,7 @@
       HI253SetBanding(Para);
       break;
     case FID_AE_SCENE_MODE: 
-      if (Para == AE_MODE_OFF) 
+ /*     if (Para == AE_MODE_OFF) 
       {
         HI253SetAeMode(KAL_FALSE);
       }
@@ -1896,12 +3309,11 @@
       {
         HI253SetAeMode(KAL_TRUE);
       }
+      */
       break; 
     case FID_ZOOM_FACTOR:
       SENSORDB("[HI253]ZoomFactor :%d;\n",Para);
-	  spin_lock(&hi253_drv_lock);
       HI253Status.ZoomFactor = Para;
-	  spin_unlock(&hi253_drv_lock);
       break;
     default:
       break;
@@ -1911,71 +3323,278 @@
 
 UINT32 HI253YUVSetVideoMode(UINT16 FrameRate)
 {
-  kal_uint32 EXPFIX, BLC_TIME_TH_ONOFF;
-  kal_uint32 LineLength,BandingValue;
+  SENSORDB("[MINGJI]HI253YUVSetVideoMode() calling;\n");
   
+  kal_uint32 EXPFIX, EXPTIME,EXPMAX,BLC_TIME_TH_ONOFF,HI253_OPCLK,Clock_Divider=1;
+  kal_uint32 LineLength,BandingValue;
+  kal_uint32 temp_INT_cal;
+  kal_uint32 HI253_EXP100,HI253_EXP120;
   SENSORDB("[HI253]HI253YUVSetVideoMode FrameRate:%d;\n",FrameRate);
   if (FrameRate * HI253_FRAME_RATE_UNIT > HI253_MAX_FPS)
     return -1;
-  spin_lock(&hi253_drv_lock);
+
   HI253Status.MaxFrameRate = HI253Status.MiniFrameRate = FrameRate * HI253_FRAME_RATE_UNIT;
-  spin_unlock(&hi253_drv_lock);
   LineLength = HI253_PV_PERIOD_PIXEL_NUMS + HI253Status.PvDummyPixels;
   BandingValue = (HI253Status.Banding == AE_FLICKER_MODE_50HZ) ? 100 : 120;
+/*
+  if(HI253Status.Banding == AE_FLICKER_MODE_50HZ)
+  	{
+  		HI253WriteCmosSensor(0x03, 0x20);
+  		HI253_EXP100 = (HI253ReadCmosSensor(0x8b)<<8) | (HI253ReadCmosSensor(0x8c));
+  		temp_INT_cal = 100*10/HI253Status.MaxFrameRate;//note: INT(100Hz/frameRate)
+		EXPTIME = HI253_EXP100*temp_INT_cal;
+
+		temp_INT_cal = 100*10/HI253Status.MiniFrameRate;//note: INT(100Hz/frameRate)
+		EXPMAX = HI253_EXP100*temp_INT_cal;
+  	}
+  else
+  	{
+  		HI253WriteCmosSensor(0x03, 0x20);
+  		HI253_EXP120 = (HI253ReadCmosSensor(0x8b)<<8) | (HI253ReadCmosSensor(0x8c));
+  		temp_INT_cal = 120*10/HI253Status.MaxFrameRate;//note: INT(100Hz/frameRate)
+		EXPTIME = HI253_EXP120*temp_INT_cal;
+
+		temp_INT_cal = 120*10/HI253Status.MiniFrameRate;//note: INT(100Hz/frameRate)
+		EXPMAX = HI253_EXP120*temp_INT_cal;
+  	}
   
-  EXPFIX = (HI253Status.PvOpClk * 1000000 / LineLength / BandingValue) * BandingValue * LineLength * HI253_FRAME_RATE_UNIT / 8 / HI253Status.MiniFrameRate;
+  HI253_OPCLK = HI253Status.PvOpClk*100000*5/2*1/Clock_Divider*1/2;
+  temp_INT_cal = (HI253_OPCLK *1*10/ HI253Status.MaxFrameRate)/ LineLength;
+  EXPFIX = temp_INT_cal*LineLength/8;	
+  //EXPFIX = ( HI253_OPCLK* 1000000 / LineLength / BandingValue)/ 8 * LineLength* (BandingValue  * HI253_FRAME_RATE_UNIT  / HI253Status.MiniFrameRate);
   
   BLC_TIME_TH_ONOFF =  BandingValue * HI253_FRAME_RATE_UNIT / HI253Status.MiniFrameRate;
 
   SENSORDB("[HI253]LineLenght:%d,BandingValue:%d\n",LineLength,BandingValue);
-  SENSORDB("[HI253]EXPFIX:%d BLC_TIME_TH_ONOFF:%d\n;",EXPFIX,BLC_TIME_TH_ONOFF);
+  SENSORDB("[HI253]EXPFIX:%d BLC_TIME_TH_ONOFF:%d\n",EXPFIX,BLC_TIME_TH_ONOFF);
 
   HI253SetPage(0x00);
   HI253WriteCmosSensor(0x01, 0xf9); // Sleep ON
-  spin_lock(&hi253_drv_lock);
   HI253Status.VDOCTL2 |= 0x04;   
-  spin_unlock(&hi253_drv_lock);
-  HI253WriteCmosSensor(0x11,HI253Status.VDOCTL2);  // Fixed frame rate OFF    
+  SENSORDB("[HI253]HI253Status.VDOCTL2==%d\n",HI253Status.VDOCTL2);
+  HI253WriteCmosSensor(0x11, 0x94);  // Fixed frame rate OFF   HI253Status.VDOCTL2 //0x94
   HI253WriteCmosSensor(0x90, BLC_TIME_TH_ONOFF); // BLC_TIME_TH_ON
   HI253WriteCmosSensor(0x91, BLC_TIME_TH_ONOFF); // BLC_TIME_TH_OFF
-  HI253WriteCmosSensor(0x92, 0x78); // BLC_AG_TH_ON
-  HI253WriteCmosSensor(0x93, 0x70); // BLC_AG_TH_OFF
+  HI253WriteCmosSensor(0x92, 0xd8); // BLC_AG_TH_ON  //0x78 mj 0xd8
+  HI253WriteCmosSensor(0x93, 0xd0); // BLC_AG_TH_OFF //0x70 mj 0xd0
   HI253WriteCmosSensor(0x03, 0x02); // Page 2
   HI253WriteCmosSensor(0xd4, BLC_TIME_TH_ONOFF); // DCDC_TIME_TH_ON
   HI253WriteCmosSensor(0xd5, BLC_TIME_TH_ONOFF); // DCDC_TIME_TH_OFF
-  HI253WriteCmosSensor(0xd6, 0x78); // DCDC_AG_TH_ON
-  HI253WriteCmosSensor(0xd7, 0x70); // DCDC_AG_TH_OFF
+  HI253WriteCmosSensor(0xd6, 0xd8); // DCDC_AG_TH_ON //0x78 mj 0xd8
+  HI253WriteCmosSensor(0xd7, 0xd0); // DCDC_AG_TH_OFF //0x70 mj 0xd0
   
   HI253SetPage(0x20);
-  spin_lock(&hi253_drv_lock);
   HI253Status.AECTL1 &= (~0x80);
-  spin_unlock(&hi253_drv_lock);
   HI253WriteCmosSensor(0x10,HI253Status.AECTL1);// AE ON BIT 7    
   HI253WriteCmosSensor(0x18, 0x38); // AE Reset ON
-  HI253WriteCmosSensor(0x11, 0x00); // 0x35 for fixed frame rate
-  HI253WriteCmosSensor(0x2a, 0x03); // 0x35 for fixed frame rate
-  HI253WriteCmosSensor(0x2b, 0x35); // 0x35 for fixed frame rate, 0x34 for dynamic frame rate  
-  HI253WriteCmosSensor(0x83, (EXPFIX>>16)&(0xff)); // EXPTIMEH max fps
-  HI253WriteCmosSensor(0x84, (EXPFIX>>8)&(0xff)); // EXPTIMEM
-  HI253WriteCmosSensor(0x85, (EXPFIX>>0)&(0xff)); // EXPTIMEL
-  HI253WriteCmosSensor(0x88, (EXPFIX>>16)&(0xff)); // EXPMAXH min fps
-  HI253WriteCmosSensor(0x89, (EXPFIX>>8)&(0xff)); // EXPMAXM
-  HI253WriteCmosSensor(0x8a, (EXPFIX>>0)&(0xff)); // EXPMAXL
+  HI253WriteCmosSensor(0x11, 0x1c); // 0x35 for fixed frame rate 0x00 0x1c
+  HI253WriteCmosSensor(0x2a, 0xf0); // 0x35 for fixed frame rate 0x03 0xf0
+  HI253WriteCmosSensor(0x2b, 0x35); // 0x35 for fixed frame rate, 0x34 for dynamic frame rate  0x34
+  HI253WriteCmosSensor(0x83, (EXPTIME>>16)&(0xff)); // EXPTIMEH max fps
+  HI253WriteCmosSensor(0x84, (EXPTIME>>8)&(0xff)); // EXPTIMEM
+  HI253WriteCmosSensor(0x85, (EXPTIME>>0)&(0xff)); // EXPTIMEL
+  HI253WriteCmosSensor(0x88, (EXPMAX>>16)&(0xff)); // EXPMAXH min fps
+  HI253WriteCmosSensor(0x89, (EXPMAX>>8)&(0xff)); // EXPMAXM
+  HI253WriteCmosSensor(0x8a, (EXPMAX>>0)&(0xff)); // EXPMAXL
   HI253WriteCmosSensor(0x91, (EXPFIX>>16)&(0xff)); // EXPMAXH min fps
   HI253WriteCmosSensor(0x92, (EXPFIX>>8)&(0xff)); // EXPMAXM
   HI253WriteCmosSensor(0x93, (EXPFIX>>0)&(0xff)); // EXPMAXL  
   HI253WriteCmosSensor(0x01, 0xf8); // Sleep OFF
-  spin_lock(&hi253_drv_lock);
   HI253Status.AECTL1 |= 0x80;
-  spin_unlock(&hi253_drv_lock);
   HI253WriteCmosSensor(0x10,HI253Status.AECTL1);// AE ON BIT 7    
   HI253WriteCmosSensor(0x18, 0x30); // AE Reset OFF  
+  
+
+*/
+#if 0  //The customer need auto/night mode frameRate is 30fps/15fps for video preview when the value equals 1.
+  HI253WriteCmosSensor(0x03, 0x00);  
+  HI253WriteCmosSensor(0x10, 0x13); 
+
+  if(HI253Status.NightMode== KAL_TRUE)
+  {
+	SENSORDB("[HI253]HI253YUVSetVideoMode NightMode\n");
+	HI253SetPage(0x00);
+	HI253WriteCmosSensor(0x01, 0xf9); // Sleep ON
+	HI253Status.VDOCTL2 |= 0x04;   
+	HI253WriteCmosSensor(0x11, 0x94);  // Fixed frame rate OFF   HI253Status.VDOCTL2 
+	HI253WriteCmosSensor(0x90, 0x0a); // BLC_TIME_TH_ON
+	HI253WriteCmosSensor(0x91, 0x0a); // BLC_TIME_TH_OFF
+	HI253WriteCmosSensor(0x92, 0x99); // BLC_AG_TH_ON  //0xd8 mj 0x78
+	HI253WriteCmosSensor(0x93, 0x91); // BLC_AG_TH_OFF //0xd0 mj 0x70
+	HI253WriteCmosSensor(0x03, 0x02); // Page 2
+	HI253WriteCmosSensor(0xd4, 0x0a); // DCDC_TIME_TH_ON
+	HI253WriteCmosSensor(0xd5, 0x0a); // DCDC_TIME_TH_OFF
+	HI253WriteCmosSensor(0xd6, 0x99); // DCDC_AG_TH_ON //0xd8 mj 0x78
+	HI253WriteCmosSensor(0xd7, 0x91); // DCDC_AG_TH_OFF //0xd8 mj 0x70
+
+	HI253SetPage(0x20);
+	HI253Status.AECTL1 &= (~0x80);
+	HI253WriteCmosSensor(0x10,HI253Status.AECTL1);// AE ON BIT 7    
+	HI253WriteCmosSensor(0x18, 0x38); // AE Reset ON
+	HI253WriteCmosSensor(0x11, 0x1c); // 0x35 for fixed frame rate 0x00 0x1c
+	HI253WriteCmosSensor(0x2a, 0xf0); // 0x35 for fixed frame rate 0x03 0xf0
+	HI253WriteCmosSensor(0x2b, 0x35); // 0x35 for fixed frame rate, 0x34 for dynamic frame rate  0x34
+	HI253WriteCmosSensor(0x83, 0x01); // EXPTIMEH max fps
+	HI253WriteCmosSensor(0x84, 0xdb); // EXPTIMEM
+	HI253WriteCmosSensor(0x85, 0x38); // EXPTIMEL
+	HI253WriteCmosSensor(0x86, 0x01); 
+	HI253WriteCmosSensor(0x87, 0x28); 
+	HI253WriteCmosSensor(0x88, 0x03); // EXPMAXH min fps
+	HI253WriteCmosSensor(0x89, 0xb6); // EXPMAXM
+	HI253WriteCmosSensor(0x8a, 0x70); // EXPMAXL
+	HI253WriteCmosSensor(0x8b, 0x9e); 
+	HI253WriteCmosSensor(0x8c, 0x68); 
+	HI253WriteCmosSensor(0x8d, 0x83); 
+	HI253WriteCmosSensor(0x8e, 0xd0); 
+	HI253WriteCmosSensor(0x91, 0x04); // EXPMAXH min fps
+	HI253WriteCmosSensor(0x92, 0x21); // EXPMAXM
+	HI253WriteCmosSensor(0x93, 0x64); // EXPMAXL  
+	HI253WriteCmosSensor(0x9c, 0x10); 
+	HI253WriteCmosSensor(0x9d, 0x30); 
+	HI253WriteCmosSensor(0x9e, 0x01); 
+	HI253WriteCmosSensor(0x9f, 0x28); 
+	HI253WriteCmosSensor(0x01, 0xf8); // Sleep OFF
+	HI253Status.AECTL1 |= 0x80;
+	HI253WriteCmosSensor(0x10,HI253Status.AECTL1);// AE ON BIT 7    
+	HI253WriteCmosSensor(0x18, 0x30); // AE Reset OFF  
+  }
+  else
+  {
+  	SENSORDB("[HI253]HI253YUVSetVideoMode Auto\n");
+	HI253SetPage(0x00);
+	HI253WriteCmosSensor(0x01, 0xf9); // Sleep ON
+	HI253Status.VDOCTL2 |= 0x04;   
+	HI253WriteCmosSensor(0x11,0x94);  // Fixed frame rate OFF   HI253Status.VDOCTL2 
+	HI253WriteCmosSensor(0x90, 0x03); // BLC_TIME_TH_ON
+	HI253WriteCmosSensor(0x91, 0x03); // BLC_TIME_TH_OFF
+	HI253WriteCmosSensor(0x92, 0x99); // BLC_AG_TH_ON  //0xd8 mj 0x78
+	HI253WriteCmosSensor(0x93, 0x91); // BLC_AG_TH_OFF //0xd0 mj 0x70
+	HI253WriteCmosSensor(0x03, 0x02); // Page 2
+	HI253WriteCmosSensor(0xd4, 0x03); // DCDC_TIME_TH_ON
+	HI253WriteCmosSensor(0xd5, 0x03); // DCDC_TIME_TH_OFF
+	HI253WriteCmosSensor(0xd6, 0x99); // DCDC_AG_TH_ON //0xd8 mj 0x78
+	HI253WriteCmosSensor(0xd7, 0x91); // DCDC_AG_TH_OFF //0xd8 mj 0x70
+
+	HI253SetPage(0x20);
+	HI253Status.AECTL1 &= (~0x80);
+	HI253WriteCmosSensor(0x10,HI253Status.AECTL1);// AE ON BIT 7    
+	HI253WriteCmosSensor(0x18, 0x38); // AE Reset ON
+	HI253WriteCmosSensor(0x11, 0x1c); // 0x35 for fixed frame rate 0x00 0x1c
+	HI253WriteCmosSensor(0x2a, 0xf0); // 0x35 for fixed frame rate 0x03 0xf0
+	HI253WriteCmosSensor(0x2b, 0x35); // 0x35 for fixed frame rate, 0x34 for dynamic frame rate  0x34
+	HI253WriteCmosSensor(0x83, 0x01); // EXPTIMEH max fps
+	HI253WriteCmosSensor(0x84, 0xdb); // EXPTIMEM
+	HI253WriteCmosSensor(0x85, 0x38); // EXPTIMEL
+	HI253WriteCmosSensor(0x86, 0x01); 
+	HI253WriteCmosSensor(0x87, 0x28); 
+	HI253WriteCmosSensor(0x88, 0x01); // EXPMAXH min fps
+	HI253WriteCmosSensor(0x89, 0xdb); // EXPMAXM
+	HI253WriteCmosSensor(0x8a, 0x38); // EXPMAXL
+	HI253WriteCmosSensor(0x8b, 0x9e); 
+	HI253WriteCmosSensor(0x8c, 0x68); 
+	HI253WriteCmosSensor(0x8d, 0x83); 
+	HI253WriteCmosSensor(0x8e, 0xd0); 
+	HI253WriteCmosSensor(0x91, 0x02); // EXPMAXH min fps
+	HI253WriteCmosSensor(0x92, 0x10); // EXPMAXM
+	HI253WriteCmosSensor(0x93, 0x68); // EXPMAXL  
+	HI253WriteCmosSensor(0x9c, 0x09); 
+	HI253WriteCmosSensor(0x9d, 0x40); 
+	HI253WriteCmosSensor(0x9e, 0x01); 
+	HI253WriteCmosSensor(0x9f, 0x28); 
+	HI253WriteCmosSensor(0x01, 0xf8); // Sleep OFF
+	HI253Status.AECTL1 |= 0x80;
+	HI253WriteCmosSensor(0x10,HI253Status.AECTL1);// AE ON BIT 7    
+	HI253WriteCmosSensor(0x18, 0x30); // AE Reset OFF  
+  }
+
+#else //The default auto/night mode frameRate is 15fps/7.5fps for video preview 
+
+  if(HI253Status.NightMode== KAL_TRUE)
+  {  HI253WriteCmosSensor(0x03, 0x00);  
+     HI253WriteCmosSensor(0x10, 0x10); 
+	HI253SetPage(0x00);
+	HI253WriteCmosSensor(0x01, 0xf9); // Sleep ON
+	HI253Status.VDOCTL2 |= 0x04;   
+	HI253WriteCmosSensor(0x11, 0x94);  // Fixed frame rate OFF   HI253Status.VDOCTL2 
+	HI253WriteCmosSensor(0x90, 0x0C); // BLC_TIME_TH_ON
+	HI253WriteCmosSensor(0x91, 0x0C); // BLC_TIME_TH_OFF
+	HI253WriteCmosSensor(0x92, 0x98); // BLC_AG_TH_ON  //0xd8 mj 0x78
+	HI253WriteCmosSensor(0x93, 0x90); // BLC_AG_TH_OFF //0xd0 mj 0x70
+	HI253WriteCmosSensor(0x03, 0x02); // Page 2
+	HI253WriteCmosSensor(0xd4, 0x0C); // DCDC_TIME_TH_ON
+	HI253WriteCmosSensor(0xd5, 0x0C); // DCDC_TIME_TH_OFF
+	HI253WriteCmosSensor(0xd6, 0x98); // DCDC_AG_TH_ON //0xd8 mj 0x78
+	HI253WriteCmosSensor(0xd7, 0x90); // DCDC_AG_TH_OFF //0xd8 mj 0x70
+
+	HI253SetPage(0x20);
+	HI253Status.AECTL1 &= (~0x80);
+	HI253WriteCmosSensor(0x10,HI253Status.AECTL1);// AE ON BIT 7    
+	HI253WriteCmosSensor(0x18, 0x38); // AE Reset ON
+	HI253WriteCmosSensor(0x11, 0x1c); // 0x35 for fixed frame rate 0x00 0x1c
+	HI253WriteCmosSensor(0x2a, 0x03); // 0x35 for fixed frame rate 0x03 0xf0
+	HI253WriteCmosSensor(0x2b, 0x34); // 0x35 for fixed frame rate, 0x34 for dynamic frame rate  0x34
+	HI253WriteCmosSensor(0x83, 0x01); // EXPTIMEH max fps
+	HI253WriteCmosSensor(0x84, 0x7c); // EXPTIMEM
+	HI253WriteCmosSensor(0x85, 0xdc); // EXPTIMEL
+	HI253WriteCmosSensor(0x88, 0x05); // EXPMAXH min fps
+	HI253WriteCmosSensor(0x89, 0xf3); // EXPMAXM
+	HI253WriteCmosSensor(0x8a, 0x70); // EXPMAXL
+	HI253WriteCmosSensor(0x91, 0x06); // EXPMAXH min fps
+	HI253WriteCmosSensor(0x92, 0x32); // EXPMAXM
+	HI253WriteCmosSensor(0x93, 0xea); // EXPMAXL  
+	HI253WriteCmosSensor(0x01, 0xf8); // Sleep OFF
+	HI253Status.AECTL1 |= 0x80;
+	HI253WriteCmosSensor(0x10,HI253Status.AECTL1);// AE ON BIT 7    
+	HI253WriteCmosSensor(0x18, 0x30); // AE Reset OFF  
+  }
+  else
+  {
+	HI253SetPage(0x00);
+	HI253WriteCmosSensor(0x01, 0xf9); // Sleep ON
+	HI253Status.VDOCTL2 |= 0x04; 
+  
+    HI253WriteCmosSensor(0x10, 0x11); 
+	HI253WriteCmosSensor(0x11,0x94);  // Fixed frame rate OFF   HI253Status.VDOCTL2 
+	HI253WriteCmosSensor(0x90, 0x06); // BLC_TIME_TH_ON
+	HI253WriteCmosSensor(0x91, 0x06); // BLC_TIME_TH_OFF
+	HI253WriteCmosSensor(0x92, 0x98); // BLC_AG_TH_ON  //0xd8 mj 0x78
+	HI253WriteCmosSensor(0x93, 0x90); // BLC_AG_TH_OFF //0xd0 mj 0x70
+	HI253WriteCmosSensor(0x03, 0x02); // Page 2
+	HI253WriteCmosSensor(0xd4, 0x06); // DCDC_TIME_TH_ON
+	HI253WriteCmosSensor(0xd5, 0x06); // DCDC_TIME_TH_OFF
+	HI253WriteCmosSensor(0xd6, 0x98); // DCDC_AG_TH_ON //0xd8 mj 0x78
+	HI253WriteCmosSensor(0xd7, 0x90); // DCDC_AG_TH_OFF //0xd8 mj 0x70
+
+	HI253SetPage(0x20);
+	HI253Status.AECTL1 &= (~0x80);
+	HI253WriteCmosSensor(0x10,HI253Status.AECTL1);// AE ON BIT 7    
+	HI253WriteCmosSensor(0x18, 0x38); // AE Reset ON
+	HI253WriteCmosSensor(0x11, 0x1c); // 0x35 for fixed frame rate 0x00 0x1c
+	HI253WriteCmosSensor(0x2a, 0x03); // 0x35 for fixed frame rate 0x03 0xf0
+	HI253WriteCmosSensor(0x2b, 0x34); // 0x35 for fixed frame rate, 0x34 for dynamic frame rate  0x34
+	HI253WriteCmosSensor(0x83, 0x01); // EXPTIMEH max fps
+	HI253WriteCmosSensor(0x84, 0x7c); // EXPTIMEM
+	HI253WriteCmosSensor(0x85, 0xdc); // EXPTIMEL
+	HI253WriteCmosSensor(0x88, 0x02); // EXPMAXH min fps
+	HI253WriteCmosSensor(0x89, 0xf9); // EXPMAXM
+	HI253WriteCmosSensor(0x8a, 0xb8); // EXPMAXL
+	HI253WriteCmosSensor(0x91, 0x03); // EXPMAXH min fps
+	HI253WriteCmosSensor(0x92, 0x4d); // EXPMAXM
+	HI253WriteCmosSensor(0x93, 0xb4); // EXPMAXL  
+	HI253WriteCmosSensor(0x01, 0xf8); // Sleep OFF
+	HI253Status.AECTL1 |= 0x80;
+	HI253WriteCmosSensor(0x10,HI253Status.AECTL1);// AE ON BIT 7    
+	HI253WriteCmosSensor(0x18, 0x30); // AE Reset OFF  
+  }
+#endif
   return TRUE;
 }
 
 UINT32 HI253FeatureControl(MSDK_SENSOR_FEATURE_ENUM FeatureId,
                         UINT8 *pFeaturePara,UINT32 *pFeatureParaLen)
 {
+  SENSORDB("[MINGJI]HI253FeatureControl() calling;\n");
+
   UINT16 *pFeatureReturnPara16=(UINT16 *) pFeaturePara;
   UINT16 *pFeatureData16=(UINT16 *) pFeaturePara;
   UINT32 *pFeatureReturnPara32=(UINT32 *) pFeaturePara;
@@ -2059,6 +3678,8 @@
 
 UINT32 HI253_YUV_SensorInit(PSENSOR_FUNCTION_STRUCT *pfFunc)
 {
+  SENSORDB("[MINGJI]HI253_YUV_SensorInit() calling;\n");
+
   static SENSOR_FUNCTION_STRUCT SensorFuncHI253=
   {
     HI253Open,
@@ -2075,3 +3696,6 @@
 
   return ERROR_NONE;
 } /* SensorInit() */
+
+
+
diff -rubN hi253_yuv/hi253yuv_Sensor.h hi253_yuv.iq255/hi253yuv_Sensor.h
--- hi253_yuv/hi253yuv_Sensor.h	2012-12-28 07:07:00.000000000 +0200
+++ hi253_yuv.iq255/hi253yuv_Sensor.h	2012-05-02 21:05:52.000000000 +0300
@@ -1,3 +1,36 @@
+/* Copyright Statement:
+ *
+ * This software/firmware and related documentation ("MediaTek Software") are
+ * protected under relevant copyright laws. The information contained herein
+ * is confidential and proprietary to MediaTek Inc. and/or its licensors.
+ * Without the prior written permission of MediaTek inc. and/or its licensors,
+ * any reproduction, modification, use or disclosure of MediaTek Software,
+ * and information contained herein, in whole or in part, shall be strictly prohibited.
+ */
+/* MediaTek Inc. (C) 2010. All rights reserved.
+ *
+ * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
+ * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
+ * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
+ * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
+ * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
+ * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
+ * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
+ * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
+ * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
+ * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
+ * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
+ * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
+ * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
+ * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
+ * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
+ * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
+ *
+ * The following software/firmware and/or related documentation ("MediaTek Software")
+ * have been modified by MediaTek Inc. All revisions are subject to any receiver's
+ * applicable license agreements with MediaTek Inc. */
 /*****************************************************************************
  *
  * Filename:

--- leds.c1	2013-07-27 17:41:23.000000000 +0300
+++ leds.c	2013-08-04 18:21:55.000000000 +0300
@@ -57,16 +57,7 @@
 
 #include <cust_leds.h>
 
-#if defined (CONFIG_ARCH_MT6573)
-#include <mach/mt6573_pwm.h>
-#include <mach/mt6573_gpio.h>
-#include <mach/pmu6573_sw.h>
-
-#elif defined (CONFIG_ARCH_MT6516)
-#include <mach/mt6516_pwm.h>
-#include <mach/mt6516_gpio.h>
-
-#elif defined (CONFIG_ARCH_MT6575) || defined (CONFIG_ARCH_MT6575T)
+#if defined (CONFIG_ARCH_MT6575) || defined (CONFIG_ARCH_MT6575T)
 #include <mach/mt6575_pwm.h>
 #include <mach/mt6575_gpio.h>
 #include <mach/pmic_mt6329_hw_bank1.h> 
@@ -78,7 +69,7 @@
 #include <mach/mt6575_pmic_feature_api.h>
 #include <mach/mt6575_boot.h>
 
-#elif defined (CONFIG_ARCH_MT6577)
+#elif defined (CONFIG_ARCH_MT6577) || defined (CONFIG_ARCH_MT6577T)
 #include <mach/mt6577_pwm.h>
 #include <mach/mt6577_gpio.h>
 #include <mach/pmic_mt6329_hw_bank1.h> 
@@ -91,10 +82,6 @@
 #include <mach/mt6577_boot.h>
 #endif
 
-#ifndef CONTROL_BL_TEMPERATURE
-#define CONTROL_BL_TEMPERATURE
-#endif
-
 
 /****************************************************************************
  * LED Variable Settings
@@ -115,7 +102,7 @@
 struct cust_mt65xx_led* bl_setting = NULL;
 unsigned int bl_brightness = 102;
 unsigned int bl_duty = 21;
-unsigned int bl_div = CLK_DIV1;
+unsigned int bl_div = CLK_DIV1; //CLK_DIV1 at 20121130
 unsigned int bl_frequency = 32000;
 
 
@@ -158,24 +145,6 @@
 extern unsigned int brightness_mapping(unsigned int level);
 extern int mtkfb_get_backlight_pwm(unsigned int divider, unsigned int *freq);
 
-
-#if defined (CONFIG_ARCH_MT6573)
-extern void upmu_kpled_mode(upmu_kpled_list_enum kpled, upmu_kpled_mode_enum val);
-extern void upmu_kpled_enable(upmu_kpled_list_enum kpled, kal_bool enable);
-
-#elif defined (CONFIG_ARCH_MT6516)
-/* import functions */
-extern void pmic_bl_dim_duty(kal_uint8 duty);
-extern ssize_t  mt6326_bl_Enable(void);
-extern ssize_t  mt6326_bl_Disable(void);
-extern ssize_t mt6326_kpled_Enable(void);
-extern ssize_t mt6326_kpled_Disable(void);
-extern ssize_t mt6326_kpled_dim_duty_Full(void);
-extern ssize_t mt6326_kpled_dim_duty_0(void);
-
-#endif
-
-
 /* export functions */
 int mt65xx_leds_brightness_set(enum mt65xx_led_type type, enum led_brightness level);
 
@@ -187,10 +156,6 @@
 static int  mt65xx_blink_set(struct led_classdev *led_cdev,
 			     unsigned long *delay_on,
 			     unsigned long *delay_off);
-#ifdef CONTROL_BL_TEMPERATURE
-int setMaxbrightness(int max_level, int enable);
-//static int control_backlight_brightness(int level);
-#endif
 
 /****************************************************************************
  * global variables
@@ -198,60 +163,10 @@
 static struct mt65xx_led_data *g_leds_data[MT65XX_LED_TYPE_TOTAL];
 struct wake_lock leds_suspend_lock;
 
-#ifdef CONTROL_BL_TEMPERATURE
-
-//define int limit for brightness limitation
-static unsigned  int limit = 255;
-static unsigned  int limit_flag = 0;  
-static unsigned  int last_level = 0; 
-static unsigned  int current_level = 0; 
-static DEFINE_MUTEX(bl_level_limit_mutex);
-
 
-//this API add for control the power and temperature
-//if enabe=1, the value of brightness will smaller  than max_level, whatever lightservice transfers to driver
-int setMaxbrightness(int max_level, int enable)
-{
-
-	struct cust_mt65xx_led *cust_led_list = get_cust_led_list();
-	mutex_lock(&bl_level_limit_mutex);
-	if (1 == enable)
-	{
-		limit_flag = 1;
-		limit = max_level;
-		mutex_unlock(&bl_level_limit_mutex);
-		LEDS_DEBUG("[LED] setMaxbrightness limit happen and release lock!!\n");
-		printk("setMaxbrightness enable:last_level=%d\n", last_level);
-		printk("setMaxbrightness enable:current_level=%d\n", current_level);
-		//if (limit < last_level){
-		if (0 != current_level){
-		printk("mt65xx_leds_set_cust in setMaxbrightness:value control start! limit=%d\n", limit);
-		mt65xx_led_set_cust(&cust_led_list[MT65XX_LED_TYPE_LCD], limit);
-		}
-	}
-	else
-	{
-		limit_flag = 0;
-		limit = 255;
-		mutex_unlock(&bl_level_limit_mutex);
-		LEDS_DEBUG("[LED] setMaxbrightness limit closed and and release lock!!\n");
-		printk("setMaxbrightness disable:last_level=%d\n", last_level);
-		printk("setMaxbrightness enable:current_level=%d\n", current_level);
-		//if (last_level != 0){
-		if (0 != current_level){
-		printk("control temperature close:limit=%d\n", limit);
-		mt65xx_led_set_cust(&cust_led_list[MT65XX_LED_TYPE_LCD], last_level);
-		
-		//printk("mt65xx_leds_set_cust in setMaxbrightness:value control close!\n");
-		}
-	}
- 	
-	LEDS_DEBUG("[LED] setMaxbrightness limit_flag = %d, limit=%d, current_level=%d\n",limit_flag, limit, current_level);
-	
-	return 0;
-	
-}
-#endif
+/****************************************************************************
+ * internal functions
+ ***************************************************************************/
 static int brightness_mapto64(int level)
 {
         if (level < 30)
@@ -285,7 +200,7 @@
 	pwm_setting.pwm_no = pwm_num;
     
         LEDS_DEBUG("[LED]led_set_pwm: mode=%d,pwm_no=%d\n", led->nled_mode, pwm_num);  
-	if((pwm_num != PWM3 && pwm_num != PWM4 && pwm_num != PWM5))
+	if((pwm_num != PWM1 && pwm_num != PWM3 && pwm_num != PWM4 && pwm_num != PWM5))
 		pwm_setting.clk_src = PWM_CLK_OLD_MODE_32K;
 	else
 		pwm_setting.clk_src = PWM_CLK_NEW_MODE_BLOCK_DIV_BY_1625;
@@ -293,8 +208,8 @@
 	switch (led->nled_mode)
 	{
 		case NLED_OFF :
-			if(pwm_num == PWM1)
-				pwm_setting.duty = 100;
+			if(pwm_num==PWM3)
+			pwm_setting.duty = 100;
 			else
 			pwm_setting.duty = 0;
 			pwm_setting.clk_div = CLK_DIV1;
@@ -302,10 +217,17 @@
 			break;
             
 		case NLED_ON :
-                pwm_setting.duty = 30;
+            if(pwm_num == PWM3 || pwm_num == PWM4 || pwm_num == PWM5)//LK@6575,2012-03-21
+            {
+                pwm_setting.duty = 100;//<100 will make blink effect due to 52M clk enter deep idle issue
+                pwm_setting.duration = 1;//new mode,4->1,250hz
+            }
+            else
+            {
+			pwm_setting.duty = 30;
+			pwm_setting.duration = 100;
+            }
 			pwm_setting.clk_div = CLK_DIV1;			
-                pwm_setting.duration = 100;
-
 			break;
             
 		case NLED_BLINK :
@@ -318,27 +240,9 @@
 	}
 	pwm_set_easy_config(&pwm_setting);
 
-#if defined (CONFIG_ARCH_MT6573)
-	if(pwm_num == PWM7)
-	{
-		if(led->nled_mode == NLED_OFF)
-		{
-			LEDS_DEBUG("[LED]Disable MT6573 keypad led\n");
-			upmu_kpled_enable(KPLED,0);
-		}else
-		{
-			LEDS_DEBUG("[LED]Enable MT6573 keypad led\n");
-			upmu_kpled_mode(KPLED,0);
-			upmu_kpled_enable(KPLED,1);
-		}		
-	}
-#endif	
-
-	return 0;
-	
+	return 0;	
 }
 
-#if defined (CONFIG_ARCH_MT6575) || defined (CONFIG_ARCH_MT6575T) || defined (CONFIG_ARCH_MT6577)
 #define PMIC_PERIOD_NUM 15
 int pmic_period_array[] = {250,500,1000,1250,1666,2000,2500,3333,4000,5000,6666,8000,10000,13333,16000};
 u8 pmic_clksel_array[] = {0,0,0,0,0,0,1,1,1,2,2,2,3,3,3};
@@ -396,30 +300,14 @@
 			
 	return 0;
 }
-#endif
 
 static int backlight_set_pwm(int pwm_num, u32 level, u32 div, struct PWM_config *config_data)
 {
 	struct pwm_spec_config pwm_setting;
 	pwm_setting.pwm_no = pwm_num;
 	pwm_setting.mode = PWM_MODE_FIFO; //new mode fifo and periodical mode
-		
-	#ifdef CONTROL_BL_TEMPERATURE
-	mutex_lock(&bl_level_limit_mutex);
-			current_level = level;
-			printk("brightness_set_pwm:current_level=%d\n", current_level);
-			if(0 == limit_flag){
-				last_level = level;
-				printk("brightness_set_pwm:last_level=%d\n", last_level);
-			}else {
-					if(limit < current_level){
-						level = limit;
-						printk("backlight_set_pwm: control level=%d\n", level);
-					}
-			}	
-	mutex_unlock(&bl_level_limit_mutex);
-	#endif
-	if(config_data->div)
+
+ 	if(config_data->div)
 	{
 		pwm_setting.clk_div = config_data->div;
 		backlight_PWM_div = config_data->div;
@@ -471,52 +359,6 @@
 }
 
 
-
-#if defined (CONFIG_ARCH_MT6516)
-/* import functions */
-static int brightness_set_pmic(enum mt65xx_led_pmic pmic_type, u32 level, u32 div)
-{
-	int tmp_level = level;
-	LEDS_DEBUG("[LED]PMIC#%d:%d\n", pmic_type, level);
-
-	if (pmic_type == MT65XX_LED_PMIC_LCD) {
-		if (level) 
-		{
-			level = brightness_mapping(tmp_level);
-			if(level == ERROR_BL_LEVEL)
-				level = tmp_level<8?1:tmp_level/8;
-			mt6326_bl_Enable();
-			pmic_bl_dim_duty(level);
-		}
-		else {
-			mt6326_bl_Disable();
-		}
-		return 0;
-	}
-	else if (pmic_type == MT65XX_LED_PMIC_BUTTON) {
-		if (level) {
-			mt6326_kpled_dim_duty_Full();
-			mt6326_kpled_Enable();
-		}
-		else {
-			mt6326_kpled_dim_duty_0();
-			mt6326_kpled_Disable();
-		}
-		return 0;
-	}
-
-	return -1;
-}
-
-
-#elif  defined (CONFIG_ARCH_MT6573)
-static int brightness_set_pmic(enum mt65xx_led_pmic pmic_type, u32 level, u32 div)
-{
-	return 0;
-}
-
-
-#elif  defined (CONFIG_ARCH_MT6575) || defined (CONFIG_ARCH_MT6575T)|| defined (CONFIG_ARCH_MT6577)
 static int brightness_set_pmic(enum mt65xx_led_pmic pmic_type, u32 level, u32 div)
 {
 	int tmp_level = level;
@@ -568,22 +410,6 @@
 		*/		
 		if (level) 
 		{
-			#ifdef CONTROL_BL_TEMPERATURE
-			mutex_lock(&bl_level_limit_mutex);
-			current_level = level;
-			printk("brightness_set_pmic:current_level=%d\n", current_level);
-			if(0 == limit_flag){
-				last_level = level;
-				printk("brightness_set_pmic:last_level=%d\n", last_level);
-			}else {
-					if(limit < current_level){
-						level = limit;
-						printk("backlight_set_pmic: control level=%d\n", level);
-					}
-			}	
-			mutex_unlock(&bl_level_limit_mutex);
-			#endif
-	
 			level = brightness_mapping(tmp_level);
 			if(level == ERROR_BL_LEVEL)
 				level = tmp_level/42;
@@ -627,6 +453,7 @@
 					break;
 			}
 			
+		
 			upmu_top2_bst_drv_ck_pdn(0x0);
 			upmu_boost_en(0x1);
 			bl_duty = level;	
@@ -643,7 +470,7 @@
 	{
 		if (level) 
 		{
-			hwBacklightKPLEDTuning(0x1F, 0x0);
+			hwBacklightKPLEDTuning(0x9, 0x0);
 			hwBacklightKPLEDTurnOn();
 		}
 		else 
@@ -711,9 +538,6 @@
 	return -1;
 }
 
-#endif
-
-
 
 static int brightness_set_gpio(int gpio_num, enum led_brightness level)
 {
@@ -732,9 +556,7 @@
 static int mt65xx_led_set_cust(struct cust_mt65xx_led *cust, int level)
 {
 	struct nled_setting led_tmp_setting = {0,0,0};
-	int tmp_level;
-
-	tmp_level = level;
+	int tmp_level = level;
 	if (level > LED_FULL)
 		level = LED_FULL;
 	else if (level < 0)
@@ -765,17 +587,9 @@
 			{
 				if(level == 0)
 				{
-					if(!strcmp(cust->name,"red"))
-						{
-							mt_set_gpio_out(GPIO194,GPIO_OUT_ZERO);//for power saving
-						}
 					led_tmp_setting.nled_mode = NLED_OFF;
 				}else
 				{
-					if(!strcmp(cust->name,"red"))
-						{
-							mt_set_gpio_out(GPIO194,GPIO_OUT_ONE);//for power saving
-						}
 					led_tmp_setting.nled_mode = NLED_ON;
 				}
 				led_set_pwm(cust->data,&led_tmp_setting);
@@ -793,21 +607,6 @@
 			{
 			    bl_brightness = level;
             }
-			#ifdef CONTROL_BL_TEMPERATURE
-			mutex_lock(&bl_level_limit_mutex);
-			current_level = level;
-			printk("brightness_set_cust:current_level=%d\n", current_level);
-			if(0 == limit_flag){
-				last_level = level;
-				printk("brightness_set_cust:last_level=%d\n", last_level);
-			}else {
-					if(limit < current_level){
-						level = limit;
-						printk("backlight_set_cust: control level=%d\n", level);
-					}
-			}	
-			mutex_unlock(&bl_level_limit_mutex);
-			#endif
 			return ((cust_brightness_set)(cust->data))(level, bl_div);
             
 		case MT65XX_LED_MODE_NONE:
@@ -833,7 +632,7 @@
 		container_of(led_cdev, struct mt65xx_led_data, cdev);
 
 	// do something only when level is changed
-	if((led_data->level != level)||!strcmp(led_data->cust.name,"red")) {
+	if (led_data->level != level) {
 		led_data->level = level;
 		if(strcmp(led_data->cust.name,"lcd-backlight"))
 		{
@@ -869,9 +668,7 @@
 				nled_tmp_setting.blink_on_time = led_data->delay_on;
 				led_set_pwm(led_data->cust.data,&nled_tmp_setting);
 				return 0;
-			}
-			
-			#if defined (CONFIG_ARCH_MT6575) || defined (CONFIG_ARCH_MT6575T)|| defined (CONFIG_ARCH_MT6577)
+			}		
 			else if((led_data->cust.mode == MT65XX_LED_MODE_PMIC) && (led_data->cust.data == MT65XX_LED_PMIC_NLED_ISINK4
 				|| led_data->cust.data == MT65XX_LED_PMIC_NLED_ISINK5))
 			{
@@ -884,9 +681,7 @@
 				} else {
 					wake_lock(&leds_suspend_lock);
 				}
-			}
-			#endif		
-			
+			}				
 			else if (!got_wake_lock) {
 				wake_lock(&leds_suspend_lock);
 				got_wake_lock = 1;
@@ -899,9 +694,7 @@
 				nled_tmp_setting.nled_mode = NLED_OFF;
 				led_set_pwm(led_data->cust.data,&nled_tmp_setting);
 				return 0;
-			}
-			
-			#if defined (CONFIG_ARCH_MT6575) || defined (CONFIG_ARCH_MT6575T)|| defined (CONFIG_ARCH_MT6577)
+			}		
 			else if((led_data->cust.mode == MT65XX_LED_MODE_PMIC) && (led_data->cust.data == MT65XX_LED_PMIC_NLED_ISINK4
 				|| led_data->cust.data == MT65XX_LED_PMIC_NLED_ISINK5))
 			{
@@ -911,9 +704,7 @@
 				} else {
 					wake_unlock(&leds_suspend_lock);
 				}
-			}
-			#endif	
-			
+			}			
 			else if (got_wake_lock) {
 				wake_unlock(&leds_suspend_lock);
 				got_wake_lock = 0;
@@ -969,21 +760,7 @@
 	if(count == size)
 	{
 		if(bl_setting->mode == MT65XX_LED_MODE_PMIC)
-		{
-#if defined (CONFIG_ARCH_MT6573)	
-
-#elif defined (CONFIG_ARCH_MT6516)
-			if (level) //duty:0-31
-			{
-				mt6326_bl_Enable();
-				pmic_bl_dim_duty(level);
-				
-			}else 
-			{
-				mt6326_bl_Disable();
-			}
-			
-#elif defined (CONFIG_ARCH_MT6575) || defined (CONFIG_ARCH_MT6575T)|| defined (CONFIG_ARCH_MT6577)
+		{			
 			//duty:0-16
 			if((level >= 0) && (level <= 15))
 			{
@@ -992,8 +769,7 @@
 			else
 			{
 				LEDS_DEBUG("duty value is error, please select vaule from [0-15]!\n");
-			}
-#endif			
+			}		
 		}
 		else if(bl_setting->mode == MT65XX_LED_MODE_PWM)
 		{
@@ -1072,7 +848,7 @@
     }
     else if(bl_setting->mode == MT65XX_LED_MODE_CUST)
     {
-        //mtkfb_get_backlight_pwm(bl_div, &bl_frequency);  		
+        mtkfb_get_backlight_pwm(bl_div, &bl_frequency);  		
     }
 
     LEDS_DEBUG("[LED]get backlight PWM frequency value is:%d \n", bl_frequency);
@@ -1186,14 +962,6 @@
 		
 	}
 
-#ifdef CONTROL_BL_TEMPERATURE
-
-	last_level = 0;  
-	limit = 255;
-	limit_flag = 0; 
-	current_level = 0;
-	printk("[LED]led probe last_level = %d, limit = %d, limit_flag = %d, current_level = %d\n",last_level,limit,limit_flag,current_level);
-#endif
 
 	return 0;
 
@@ -1289,24 +1057,11 @@
 	.shutdown   = mt65xx_leds_shutdown,
 };
 
-#if 0
-static struct platform_device mt65xx_leds_device = {
-	.name = "leds-mt65xx",
-	.id = -1
-};
-
-#endif
 static int __init mt65xx_leds_init(void)
 {
 	int ret;
 
 	LEDS_DEBUG("[LED]%s\n", __func__);
-
-#if 0
-	ret = platform_device_register(&mt65xx_leds_device);
-	if (ret)
-		printk("[LED]mt65xx_leds_init:dev:E%d\n", ret);
-#endif
 	ret = platform_driver_register(&mt65xx_leds_driver);
 
 	if (ret)
@@ -1317,7 +1072,6 @@
 	}
 
 	wake_lock_init(&leds_suspend_lock, WAKE_LOCK_SUSPEND, "leds wakelock");
-	printk("[LED]add control backlight temperature!\n");
 
 	return ret;
 }
